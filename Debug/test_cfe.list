
test_cfe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000d8  20000000  20000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022bc  200000d8  200000d8  000010d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000688  20002394  20002394  00003394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  20002a1c  20002a1c  00003a7c  2**0
                  CONTENTS
  4 .ARM          00000008  20002a1c  20002a1c  00003a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  20002a24  20002a7c  00003a7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  20002a24  20002a24  00003a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  20002a28  20002a28  00003a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20002a2c  20002a2c  00003a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  20002a7c  20002a7c  00003a7c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e2c  20002e2c  00003a7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003a7c  2**0
                  CONTENTS, READONLY
 12 .debug_line   00001f05  00000000  00000000  00003aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000058  00000000  00000000  000059b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000186d  00000000  00000000  00005a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000006b0  00000000  00000000  00007276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001c0  00000000  00000000  00007928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000483f  00000000  00000000  00007ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000150  00000000  00000000  0000c327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00001171  00000000  00000000  0000c477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000d5e8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000093c  00000000  00000000  0000d62c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

200000d8 <__do_global_dtors_aux>:
200000d8:	b510      	push	{r4, lr}
200000da:	4c05      	ldr	r4, [pc, #20]	@ (200000f0 <__do_global_dtors_aux+0x18>)
200000dc:	7823      	ldrb	r3, [r4, #0]
200000de:	b933      	cbnz	r3, 200000ee <__do_global_dtors_aux+0x16>
200000e0:	4b04      	ldr	r3, [pc, #16]	@ (200000f4 <__do_global_dtors_aux+0x1c>)
200000e2:	b113      	cbz	r3, 200000ea <__do_global_dtors_aux+0x12>
200000e4:	4804      	ldr	r0, [pc, #16]	@ (200000f8 <__do_global_dtors_aux+0x20>)
200000e6:	f3af 8000 	nop.w
200000ea:	2301      	movs	r3, #1
200000ec:	7023      	strb	r3, [r4, #0]
200000ee:	bd10      	pop	{r4, pc}
200000f0:	20002a7c 	.word	0x20002a7c
200000f4:	00000000 	.word	0x00000000
200000f8:	2000237c 	.word	0x2000237c

200000fc <frame_dummy>:
200000fc:	b508      	push	{r3, lr}
200000fe:	4b03      	ldr	r3, [pc, #12]	@ (2000010c <frame_dummy+0x10>)
20000100:	b11b      	cbz	r3, 2000010a <frame_dummy+0xe>
20000102:	4903      	ldr	r1, [pc, #12]	@ (20000110 <frame_dummy+0x14>)
20000104:	4803      	ldr	r0, [pc, #12]	@ (20000114 <frame_dummy+0x18>)
20000106:	f3af 8000 	nop.w
2000010a:	bd08      	pop	{r3, pc}
2000010c:	00000000 	.word	0x00000000
20000110:	20002a80 	.word	0x20002a80
20000114:	2000237c 	.word	0x2000237c

20000118 <SysTick_Handler>:
.section .text
.global SysTick_Handler
.type SysTick_Handler, %function
SysTick_Handler:

    push {r0}
20000118:	b401      	push	{r0}
    push {r1}
2000011a:	b402      	push	{r1}
    push {r2}
2000011c:	b404      	push	{r2}
    push {r3}
2000011e:	b408      	push	{r3}
    push {r4}
20000120:	b410      	push	{r4}
    push {r5}
20000122:	b420      	push	{r5}
    push {r6}
20000124:	b440      	push	{r6}
    push {r7}
20000126:	b480      	push	{r7}
    push {r8}
20000128:	f84d 8d04 	str.w	r8, [sp, #-4]!
    push {r9}
2000012c:	f84d 9d04 	str.w	r9, [sp, #-4]!
    push {r10}
20000130:	f84d ad04 	str.w	sl, [sp, #-4]!
    push {r11}
20000134:	f84d bd04 	str.w	fp, [sp, #-4]!
    push {r12}
20000138:	f84d cd04 	str.w	ip, [sp, #-4]!
    push {lr}
2000013c:	b500      	push	{lr}


	bl mytest_1
2000013e:	f001 ff01 	bl	20001f44 <mytest_1>
//
    pop {lr}
20000142:	f85d eb04 	ldr.w	lr, [sp], #4
    pop {r12}
20000146:	f85d cb04 	ldr.w	ip, [sp], #4
    pop {r11}
2000014a:	f85d bb04 	ldr.w	fp, [sp], #4
    pop {r10}
2000014e:	f85d ab04 	ldr.w	sl, [sp], #4
    pop {r9}
20000152:	f85d 9b04 	ldr.w	r9, [sp], #4
    pop {r8}
20000156:	f85d 8b04 	ldr.w	r8, [sp], #4
    pop {r7}
2000015a:	bc80      	pop	{r7}
    pop {r6}
2000015c:	bc40      	pop	{r6}
    pop {r5}
2000015e:	bc20      	pop	{r5}
    pop {r4}
20000160:	bc10      	pop	{r4}
    pop {r3}
20000162:	bc08      	pop	{r3}
    pop {r2}
20000164:	bc04      	pop	{r2}
    pop {r1}
20000166:	bc02      	pop	{r1}
    pop {r0}
20000168:	bc01      	pop	{r0}

    bx lr
2000016a:	4770      	bx	lr

2000016c <add_function>:
.global add_function

.type add_function, %function
add_function:

    add r0, r0, r1
2000016c:	4408      	add	r0, r1
    add r0, r0, r2
2000016e:	4410      	add	r0, r2
    add r0, r0, r3
20000170:	4418      	add	r0, r3
    add r0, r0, r4
20000172:	4420      	add	r0, r4

	//push r1
    ldr r1, [sp, #0]
20000174:	9900      	ldr	r1, [sp, #0]
    add r0, r0, r1
20000176:	4408      	add	r0, r1


    ldr r1, [sp, #4]
20000178:	9901      	ldr	r1, [sp, #4]
    add r0, r0, r1
2000017a:	4408      	add	r0, r1
    bx lr
2000017c:	4770      	bx	lr

2000017e <USART1_IRQHandler>:
.section .text
.global USART1_IRQHandler
.type USART1_IRQHandler, %function
USART1_IRQHandler:

 	push {r0-r12, lr}
2000017e:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}


	bl mytest_1
20000182:	f001 fedf 	bl	20001f44 <mytest_1>
    //ldr r0, =0x40013800      // USART1 base address
    //ldr r1, [r0, #0x1C]      // Read USART1 status register (SR)
    //ldr r2, [r0, #0x24]      // Read USART1 data register (DR)


	pop {r0-r12, lr}
20000186:	e8bd 5fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

    bx lr
2000018a:	4770      	bx	lr

2000018c <strcmp>:
2000018c:	f810 2b01 	ldrb.w	r2, [r0], #1
20000190:	f811 3b01 	ldrb.w	r3, [r1], #1
20000194:	2a01      	cmp	r2, #1
20000196:	bf28      	it	cs
20000198:	429a      	cmpcs	r2, r3
2000019a:	d0f7      	beq.n	2000018c <strcmp>
2000019c:	1ad0      	subs	r0, r2, r3
2000019e:	4770      	bx	lr

200001a0 <__aeabi_uldivmod>:
200001a0:	b953      	cbnz	r3, 200001b8 <__aeabi_uldivmod+0x18>
200001a2:	b94a      	cbnz	r2, 200001b8 <__aeabi_uldivmod+0x18>
200001a4:	2900      	cmp	r1, #0
200001a6:	bf08      	it	eq
200001a8:	2800      	cmpeq	r0, #0
200001aa:	bf1c      	itt	ne
200001ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
200001b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
200001b4:	f000 b96a 	b.w	2000048c <__aeabi_idiv0>
200001b8:	f1ad 0c08 	sub.w	ip, sp, #8
200001bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
200001c0:	f000 f806 	bl	200001d0 <__udivmoddi4>
200001c4:	f8dd e004 	ldr.w	lr, [sp, #4]
200001c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
200001cc:	b004      	add	sp, #16
200001ce:	4770      	bx	lr

200001d0 <__udivmoddi4>:
200001d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
200001d4:	9d08      	ldr	r5, [sp, #32]
200001d6:	460c      	mov	r4, r1
200001d8:	2b00      	cmp	r3, #0
200001da:	d14e      	bne.n	2000027a <__udivmoddi4+0xaa>
200001dc:	4694      	mov	ip, r2
200001de:	458c      	cmp	ip, r1
200001e0:	4686      	mov	lr, r0
200001e2:	fab2 f282 	clz	r2, r2
200001e6:	d962      	bls.n	200002ae <__udivmoddi4+0xde>
200001e8:	b14a      	cbz	r2, 200001fe <__udivmoddi4+0x2e>
200001ea:	f1c2 0320 	rsb	r3, r2, #32
200001ee:	4091      	lsls	r1, r2
200001f0:	fa20 f303 	lsr.w	r3, r0, r3
200001f4:	fa0c fc02 	lsl.w	ip, ip, r2
200001f8:	4319      	orrs	r1, r3
200001fa:	fa00 fe02 	lsl.w	lr, r0, r2
200001fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
20000202:	fa1f f68c 	uxth.w	r6, ip
20000206:	fbb1 f4f7 	udiv	r4, r1, r7
2000020a:	ea4f 431e 	mov.w	r3, lr, lsr #16
2000020e:	fb07 1114 	mls	r1, r7, r4, r1
20000212:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
20000216:	fb04 f106 	mul.w	r1, r4, r6
2000021a:	4299      	cmp	r1, r3
2000021c:	d90a      	bls.n	20000234 <__udivmoddi4+0x64>
2000021e:	eb1c 0303 	adds.w	r3, ip, r3
20000222:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
20000226:	f080 8112 	bcs.w	2000044e <__udivmoddi4+0x27e>
2000022a:	4299      	cmp	r1, r3
2000022c:	f240 810f 	bls.w	2000044e <__udivmoddi4+0x27e>
20000230:	3c02      	subs	r4, #2
20000232:	4463      	add	r3, ip
20000234:	1a59      	subs	r1, r3, r1
20000236:	fa1f f38e 	uxth.w	r3, lr
2000023a:	fbb1 f0f7 	udiv	r0, r1, r7
2000023e:	fb07 1110 	mls	r1, r7, r0, r1
20000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
20000246:	fb00 f606 	mul.w	r6, r0, r6
2000024a:	429e      	cmp	r6, r3
2000024c:	d90a      	bls.n	20000264 <__udivmoddi4+0x94>
2000024e:	eb1c 0303 	adds.w	r3, ip, r3
20000252:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
20000256:	f080 80fc 	bcs.w	20000452 <__udivmoddi4+0x282>
2000025a:	429e      	cmp	r6, r3
2000025c:	f240 80f9 	bls.w	20000452 <__udivmoddi4+0x282>
20000260:	4463      	add	r3, ip
20000262:	3802      	subs	r0, #2
20000264:	1b9b      	subs	r3, r3, r6
20000266:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
2000026a:	2100      	movs	r1, #0
2000026c:	b11d      	cbz	r5, 20000276 <__udivmoddi4+0xa6>
2000026e:	40d3      	lsrs	r3, r2
20000270:	2200      	movs	r2, #0
20000272:	e9c5 3200 	strd	r3, r2, [r5]
20000276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000027a:	428b      	cmp	r3, r1
2000027c:	d905      	bls.n	2000028a <__udivmoddi4+0xba>
2000027e:	b10d      	cbz	r5, 20000284 <__udivmoddi4+0xb4>
20000280:	e9c5 0100 	strd	r0, r1, [r5]
20000284:	2100      	movs	r1, #0
20000286:	4608      	mov	r0, r1
20000288:	e7f5      	b.n	20000276 <__udivmoddi4+0xa6>
2000028a:	fab3 f183 	clz	r1, r3
2000028e:	2900      	cmp	r1, #0
20000290:	d146      	bne.n	20000320 <__udivmoddi4+0x150>
20000292:	42a3      	cmp	r3, r4
20000294:	d302      	bcc.n	2000029c <__udivmoddi4+0xcc>
20000296:	4290      	cmp	r0, r2
20000298:	f0c0 80f0 	bcc.w	2000047c <__udivmoddi4+0x2ac>
2000029c:	1a86      	subs	r6, r0, r2
2000029e:	eb64 0303 	sbc.w	r3, r4, r3
200002a2:	2001      	movs	r0, #1
200002a4:	2d00      	cmp	r5, #0
200002a6:	d0e6      	beq.n	20000276 <__udivmoddi4+0xa6>
200002a8:	e9c5 6300 	strd	r6, r3, [r5]
200002ac:	e7e3      	b.n	20000276 <__udivmoddi4+0xa6>
200002ae:	2a00      	cmp	r2, #0
200002b0:	f040 8090 	bne.w	200003d4 <__udivmoddi4+0x204>
200002b4:	eba1 040c 	sub.w	r4, r1, ip
200002b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
200002bc:	fa1f f78c 	uxth.w	r7, ip
200002c0:	2101      	movs	r1, #1
200002c2:	fbb4 f6f8 	udiv	r6, r4, r8
200002c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
200002ca:	fb08 4416 	mls	r4, r8, r6, r4
200002ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
200002d2:	fb07 f006 	mul.w	r0, r7, r6
200002d6:	4298      	cmp	r0, r3
200002d8:	d908      	bls.n	200002ec <__udivmoddi4+0x11c>
200002da:	eb1c 0303 	adds.w	r3, ip, r3
200002de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
200002e2:	d202      	bcs.n	200002ea <__udivmoddi4+0x11a>
200002e4:	4298      	cmp	r0, r3
200002e6:	f200 80cd 	bhi.w	20000484 <__udivmoddi4+0x2b4>
200002ea:	4626      	mov	r6, r4
200002ec:	1a1c      	subs	r4, r3, r0
200002ee:	fa1f f38e 	uxth.w	r3, lr
200002f2:	fbb4 f0f8 	udiv	r0, r4, r8
200002f6:	fb08 4410 	mls	r4, r8, r0, r4
200002fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
200002fe:	fb00 f707 	mul.w	r7, r0, r7
20000302:	429f      	cmp	r7, r3
20000304:	d908      	bls.n	20000318 <__udivmoddi4+0x148>
20000306:	eb1c 0303 	adds.w	r3, ip, r3
2000030a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
2000030e:	d202      	bcs.n	20000316 <__udivmoddi4+0x146>
20000310:	429f      	cmp	r7, r3
20000312:	f200 80b0 	bhi.w	20000476 <__udivmoddi4+0x2a6>
20000316:	4620      	mov	r0, r4
20000318:	1bdb      	subs	r3, r3, r7
2000031a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
2000031e:	e7a5      	b.n	2000026c <__udivmoddi4+0x9c>
20000320:	f1c1 0620 	rsb	r6, r1, #32
20000324:	408b      	lsls	r3, r1
20000326:	fa22 f706 	lsr.w	r7, r2, r6
2000032a:	431f      	orrs	r7, r3
2000032c:	fa20 fc06 	lsr.w	ip, r0, r6
20000330:	fa04 f301 	lsl.w	r3, r4, r1
20000334:	ea43 030c 	orr.w	r3, r3, ip
20000338:	40f4      	lsrs	r4, r6
2000033a:	fa00 f801 	lsl.w	r8, r0, r1
2000033e:	0c38      	lsrs	r0, r7, #16
20000340:	ea4f 4913 	mov.w	r9, r3, lsr #16
20000344:	fbb4 fef0 	udiv	lr, r4, r0
20000348:	fa1f fc87 	uxth.w	ip, r7
2000034c:	fb00 441e 	mls	r4, r0, lr, r4
20000350:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
20000354:	fb0e f90c 	mul.w	r9, lr, ip
20000358:	45a1      	cmp	r9, r4
2000035a:	fa02 f201 	lsl.w	r2, r2, r1
2000035e:	d90a      	bls.n	20000376 <__udivmoddi4+0x1a6>
20000360:	193c      	adds	r4, r7, r4
20000362:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
20000366:	f080 8084 	bcs.w	20000472 <__udivmoddi4+0x2a2>
2000036a:	45a1      	cmp	r9, r4
2000036c:	f240 8081 	bls.w	20000472 <__udivmoddi4+0x2a2>
20000370:	f1ae 0e02 	sub.w	lr, lr, #2
20000374:	443c      	add	r4, r7
20000376:	eba4 0409 	sub.w	r4, r4, r9
2000037a:	fa1f f983 	uxth.w	r9, r3
2000037e:	fbb4 f3f0 	udiv	r3, r4, r0
20000382:	fb00 4413 	mls	r4, r0, r3, r4
20000386:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
2000038a:	fb03 fc0c 	mul.w	ip, r3, ip
2000038e:	45a4      	cmp	ip, r4
20000390:	d907      	bls.n	200003a2 <__udivmoddi4+0x1d2>
20000392:	193c      	adds	r4, r7, r4
20000394:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
20000398:	d267      	bcs.n	2000046a <__udivmoddi4+0x29a>
2000039a:	45a4      	cmp	ip, r4
2000039c:	d965      	bls.n	2000046a <__udivmoddi4+0x29a>
2000039e:	3b02      	subs	r3, #2
200003a0:	443c      	add	r4, r7
200003a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
200003a6:	fba0 9302 	umull	r9, r3, r0, r2
200003aa:	eba4 040c 	sub.w	r4, r4, ip
200003ae:	429c      	cmp	r4, r3
200003b0:	46ce      	mov	lr, r9
200003b2:	469c      	mov	ip, r3
200003b4:	d351      	bcc.n	2000045a <__udivmoddi4+0x28a>
200003b6:	d04e      	beq.n	20000456 <__udivmoddi4+0x286>
200003b8:	b155      	cbz	r5, 200003d0 <__udivmoddi4+0x200>
200003ba:	ebb8 030e 	subs.w	r3, r8, lr
200003be:	eb64 040c 	sbc.w	r4, r4, ip
200003c2:	fa04 f606 	lsl.w	r6, r4, r6
200003c6:	40cb      	lsrs	r3, r1
200003c8:	431e      	orrs	r6, r3
200003ca:	40cc      	lsrs	r4, r1
200003cc:	e9c5 6400 	strd	r6, r4, [r5]
200003d0:	2100      	movs	r1, #0
200003d2:	e750      	b.n	20000276 <__udivmoddi4+0xa6>
200003d4:	f1c2 0320 	rsb	r3, r2, #32
200003d8:	fa20 f103 	lsr.w	r1, r0, r3
200003dc:	fa0c fc02 	lsl.w	ip, ip, r2
200003e0:	fa24 f303 	lsr.w	r3, r4, r3
200003e4:	4094      	lsls	r4, r2
200003e6:	430c      	orrs	r4, r1
200003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
200003ec:	fa00 fe02 	lsl.w	lr, r0, r2
200003f0:	fa1f f78c 	uxth.w	r7, ip
200003f4:	fbb3 f0f8 	udiv	r0, r3, r8
200003f8:	fb08 3110 	mls	r1, r8, r0, r3
200003fc:	0c23      	lsrs	r3, r4, #16
200003fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
20000402:	fb00 f107 	mul.w	r1, r0, r7
20000406:	4299      	cmp	r1, r3
20000408:	d908      	bls.n	2000041c <__udivmoddi4+0x24c>
2000040a:	eb1c 0303 	adds.w	r3, ip, r3
2000040e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
20000412:	d22c      	bcs.n	2000046e <__udivmoddi4+0x29e>
20000414:	4299      	cmp	r1, r3
20000416:	d92a      	bls.n	2000046e <__udivmoddi4+0x29e>
20000418:	3802      	subs	r0, #2
2000041a:	4463      	add	r3, ip
2000041c:	1a5b      	subs	r3, r3, r1
2000041e:	b2a4      	uxth	r4, r4
20000420:	fbb3 f1f8 	udiv	r1, r3, r8
20000424:	fb08 3311 	mls	r3, r8, r1, r3
20000428:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
2000042c:	fb01 f307 	mul.w	r3, r1, r7
20000430:	42a3      	cmp	r3, r4
20000432:	d908      	bls.n	20000446 <__udivmoddi4+0x276>
20000434:	eb1c 0404 	adds.w	r4, ip, r4
20000438:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
2000043c:	d213      	bcs.n	20000466 <__udivmoddi4+0x296>
2000043e:	42a3      	cmp	r3, r4
20000440:	d911      	bls.n	20000466 <__udivmoddi4+0x296>
20000442:	3902      	subs	r1, #2
20000444:	4464      	add	r4, ip
20000446:	1ae4      	subs	r4, r4, r3
20000448:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
2000044c:	e739      	b.n	200002c2 <__udivmoddi4+0xf2>
2000044e:	4604      	mov	r4, r0
20000450:	e6f0      	b.n	20000234 <__udivmoddi4+0x64>
20000452:	4608      	mov	r0, r1
20000454:	e706      	b.n	20000264 <__udivmoddi4+0x94>
20000456:	45c8      	cmp	r8, r9
20000458:	d2ae      	bcs.n	200003b8 <__udivmoddi4+0x1e8>
2000045a:	ebb9 0e02 	subs.w	lr, r9, r2
2000045e:	eb63 0c07 	sbc.w	ip, r3, r7
20000462:	3801      	subs	r0, #1
20000464:	e7a8      	b.n	200003b8 <__udivmoddi4+0x1e8>
20000466:	4631      	mov	r1, r6
20000468:	e7ed      	b.n	20000446 <__udivmoddi4+0x276>
2000046a:	4603      	mov	r3, r0
2000046c:	e799      	b.n	200003a2 <__udivmoddi4+0x1d2>
2000046e:	4630      	mov	r0, r6
20000470:	e7d4      	b.n	2000041c <__udivmoddi4+0x24c>
20000472:	46d6      	mov	lr, sl
20000474:	e77f      	b.n	20000376 <__udivmoddi4+0x1a6>
20000476:	4463      	add	r3, ip
20000478:	3802      	subs	r0, #2
2000047a:	e74d      	b.n	20000318 <__udivmoddi4+0x148>
2000047c:	4606      	mov	r6, r0
2000047e:	4623      	mov	r3, r4
20000480:	4608      	mov	r0, r1
20000482:	e70f      	b.n	200002a4 <__udivmoddi4+0xd4>
20000484:	3e02      	subs	r6, #2
20000486:	4463      	add	r3, ip
20000488:	e730      	b.n	200002ec <__udivmoddi4+0x11c>
2000048a:	bf00      	nop

2000048c <__aeabi_idiv0>:
2000048c:	4770      	bx	lr
2000048e:	bf00      	nop

20000490 <Reset_Handler>:
 ldr   sp, =_estack    /* Set stack pointer */
20000490:	f8df d0e0 	ldr.w	sp, [pc, #224]	@ 20000574 <L__usart_tdr+0x4>
  ldr r2, =_sbss
20000494:	4a38      	ldr	r2, [pc, #224]	@ (20000578 <L__usart_tdr+0x8>)
  ldr r4, =_ebss
20000496:	4c39      	ldr	r4, [pc, #228]	@ (2000057c <L__usart_tdr+0xc>)
  movs r3, #0
20000498:	2300      	movs	r3, #0
  cmp r2, r4
2000049a:	42a2      	cmp	r2, r4
  beq 2f
2000049c:	d002      	beq.n	200004a4 <Reset_Handler+0x14>
  str  r3, [r2]
2000049e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
200004a0:	3204      	adds	r2, #4
  b  1b
200004a2:	e7fa      	b.n	2000049a <Reset_Handler+0xa>
  ldr   r0, L__rcc_ahb2enr
200004a4:	f8df 009c 	ldr.w	r0, [pc, #156]	@ 20000544 <L__rcc_ahb2enr>
  mov   r1, 0x2
200004a8:	f04f 0102 	mov.w	r1, #2
  str   r1, [r0]
200004ac:	6001      	str	r1, [r0, #0]
  ldr   r0, L__rcc_cr
200004ae:	4824      	ldr	r0, [pc, #144]	@ (20000540 <L__rcc_cr>)
  mov   r1, 0xf00
200004b0:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
  str   r1, [r0]
200004b4:	6001      	str	r1, [r0, #0]
  ldr   r0, L__rcc_ccipr
200004b6:	4824      	ldr	r0, [pc, #144]	@ (20000548 <L__rcc_ccipr>)
  mov   r1, 0x2
200004b8:	f04f 0102 	mov.w	r1, #2
  str   r1, [r0]
200004bc:	6001      	str	r1, [r0, #0]
  ldr   r0, L__rcc_apb2enr
200004be:	4823      	ldr	r0, [pc, #140]	@ (2000054c <L__rcc_apb2enr>)
  mov   r1, 0x4000
200004c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  str   r1, [r0]
200004c4:	6001      	str	r1, [r0, #0]
  ldr   r0, L__gpio_moder
200004c6:	4822      	ldr	r0, [pc, #136]	@ (20000550 <L__gpio_moder>)
  mov   r1, 0xa000
200004c8:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
  str   r1, [r0]
200004cc:	6001      	str	r1, [r0, #0]
  ldr   r0, L__gpio_afrl
200004ce:	4821      	ldr	r0, [pc, #132]	@ (20000554 <L__gpio_afrl>)
  mov   r1, 0x77000000
200004d0:	f04f 41ee 	mov.w	r1, #1996488704	@ 0x77000000
  str   r1, [r0]
200004d4:	6001      	str	r1, [r0, #0]
  ldr   r0, L__usart_cr1
200004d6:	4822      	ldr	r0, [pc, #136]	@ (20000560 <L__usart_cr1>)
  mov   r1, 0xd
200004d8:	f04f 010d 	mov.w	r1, #13
  str   r1, [r0]
200004dc:	6001      	str	r1, [r0, #0]
  ldr   r0, L__usart_brr
200004de:	4822      	ldr	r0, [pc, #136]	@ (20000568 <L__usart_brr>)
  mov   r1, 0x8b
200004e0:	f04f 018b 	mov.w	r1, #139	@ 0x8b
  str   r1, [r0]
200004e4:	6001      	str	r1, [r0, #0]
  ldr   r0, L__usart_isr
200004e6:	4821      	ldr	r0, [pc, #132]	@ (2000056c <L__usart_isr>)
  ldr   r1, [r0]
200004e8:	6801      	ldr	r1, [r0, #0]
  and   r1,  1<<7
200004ea:	f001 0180 	and.w	r1, r1, #128	@ 0x80
  cmp   r1,  1<<7
200004ee:	2980      	cmp	r1, #128	@ 0x80
  bne   1b
200004f0:	d1fa      	bne.n	200004e8 <Reset_Handler+0x58>
  ldr   r0, L__usart_tdr
200004f2:	481f      	ldr	r0, [pc, #124]	@ (20000570 <L__usart_tdr>)
  mov   r1, 0x0A  // Changed from 0x59 (Y) to 0x0A (newline)
200004f4:	f04f 010a 	mov.w	r1, #10
  str   r1, [r0]
200004f8:	6001      	str	r1, [r0, #0]
  ldr   r0, L__usart_isr
200004fa:	481c      	ldr	r0, [pc, #112]	@ (2000056c <L__usart_isr>)
  ldr   r1, [r0]
200004fc:	6801      	ldr	r1, [r0, #0]
  and   r1, 1<<7
200004fe:	f001 0180 	and.w	r1, r1, #128	@ 0x80
  cmp   r1, 1<<7
20000502:	2980      	cmp	r1, #128	@ 0x80
  bne   1b
20000504:	d1fa      	bne.n	200004fc <Reset_Handler+0x6c>
  mov r0, #1
20000506:	f04f 0001 	mov.w	r0, #1
  mov r1, #2
2000050a:	f04f 0102 	mov.w	r1, #2

2000050e <compute>:
  add r2, r1, r0
2000050e:	eb01 0200 	add.w	r2, r1, r0
  mov r0, r2
20000512:	4610      	mov	r0, r2
  add r1, r1, #1
20000514:	f101 0101 	add.w	r1, r1, #1
  cmp r1, #101
20000518:	2965      	cmp	r1, #101	@ 0x65
  bne compute
2000051a:	d1f8      	bne.n	2000050e <compute>
bl sts_main
2000051c:	f000 fcea 	bl	20000ef4 <sts_main>

20000520 <start>:
    ldr   r1, [r0]
20000520:	6801      	ldr	r1, [r0, #0]
    ands  r1, r1, 1<<7
20000522:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
    beq   start
20000526:	d0fb      	beq.n	20000520 <start>
    ldr   r0, L__usart_tdr
20000528:	4811      	ldr	r0, [pc, #68]	@ (20000570 <L__usart_tdr>)
    mov   r1, #48
2000052a:	f04f 0130 	mov.w	r1, #48	@ 0x30
    str   r1, [r0]
2000052e:	6001      	str	r1, [r0, #0]

20000530 <stop>:
    ldr   r1, [r0]
20000530:	6801      	ldr	r1, [r0, #0]
    ands  r1, r1, 1<<7
20000532:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
    beq   stop
20000536:	d0fb      	beq.n	20000530 <stop>
    ldr   r0, L__usart_tdr
20000538:	480d      	ldr	r0, [pc, #52]	@ (20000570 <L__usart_tdr>)
    mov   r1, #49
2000053a:	f04f 0131 	mov.w	r1, #49	@ 0x31
    str   r1, [r0]
2000053e:	6001      	str	r1, [r0, #0]

20000540 <L__rcc_cr>:
20000540:	40021000 	.word	0x40021000

20000544 <L__rcc_ahb2enr>:
20000544:	4002104c 	.word	0x4002104c

20000548 <L__rcc_ccipr>:
20000548:	40021088 	.word	0x40021088

2000054c <L__rcc_apb2enr>:
2000054c:	40021060 	.word	0x40021060

20000550 <L__gpio_moder>:
20000550:	48000400 	.word	0x48000400

20000554 <L__gpio_afrl>:
20000554:	48000420 	.word	0x48000420

20000558 <L__gpio_ospeedr>:
20000558:	48000408 	.word	0x48000408

2000055c <L__gpio_pupdr>:
2000055c:	4800040c 	.word	0x4800040c

20000560 <L__usart_cr1>:
20000560:	40013800 	.word	0x40013800

20000564 <L__usart_otyper>:
20000564:	40013804 	.word	0x40013804

20000568 <L__usart_brr>:
20000568:	4001380c 	.word	0x4001380c

2000056c <L__usart_isr>:
2000056c:	4001381c 	.word	0x4001381c

20000570 <L__usart_tdr>:
20000570:	40013828 	.word	0x40013828
 ldr   sp, =_estack    /* Set stack pointer */
20000574:	20018000 	.word	0x20018000
  ldr r2, =_sbss
20000578:	20002a7c 	.word	0x20002a7c
  ldr r4, =_ebss
2000057c:	20002e2c 	.word	0x20002e2c

20000580 <__atox>:
    *  Return Value:
    *      number of digits placed in output buffer
    ********************************************************************* */
static int __atox(char *buf,unsigned int num,unsigned int radix,int width,
		     const char *digits)
{
20000580:	b480      	push	{r7}
20000582:	b08b      	sub	sp, #44	@ 0x2c
20000584:	af00      	add	r7, sp, #0
20000586:	60f8      	str	r0, [r7, #12]
20000588:	60b9      	str	r1, [r7, #8]
2000058a:	607a      	str	r2, [r7, #4]
2000058c:	603b      	str	r3, [r7, #0]
    char buffer[16];
    char *op;
    int retval;

    op = &buffer[0];
2000058e:	f107 0310 	add.w	r3, r7, #16
20000592:	627b      	str	r3, [r7, #36]	@ 0x24
    retval = 0;
20000594:	2300      	movs	r3, #0
20000596:	623b      	str	r3, [r7, #32]

    do {
	*op++ = digits[num % radix];
20000598:	68bb      	ldr	r3, [r7, #8]
2000059a:	687a      	ldr	r2, [r7, #4]
2000059c:	fbb3 f2f2 	udiv	r2, r3, r2
200005a0:	6879      	ldr	r1, [r7, #4]
200005a2:	fb01 f202 	mul.w	r2, r1, r2
200005a6:	1a9b      	subs	r3, r3, r2
200005a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
200005aa:	441a      	add	r2, r3
200005ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200005ae:	1c59      	adds	r1, r3, #1
200005b0:	6279      	str	r1, [r7, #36]	@ 0x24
200005b2:	7812      	ldrb	r2, [r2, #0]
200005b4:	701a      	strb	r2, [r3, #0]
	retval++;
200005b6:	6a3b      	ldr	r3, [r7, #32]
200005b8:	3301      	adds	r3, #1
200005ba:	623b      	str	r3, [r7, #32]
	num /= radix;
200005bc:	68ba      	ldr	r2, [r7, #8]
200005be:	687b      	ldr	r3, [r7, #4]
200005c0:	fbb2 f3f3 	udiv	r3, r2, r3
200005c4:	60bb      	str	r3, [r7, #8]
	} while (num != 0);
200005c6:	68bb      	ldr	r3, [r7, #8]
200005c8:	2b00      	cmp	r3, #0
200005ca:	d1e5      	bne.n	20000598 <__atox+0x18>

    if (width && (width > retval)) {
200005cc:	683b      	ldr	r3, [r7, #0]
200005ce:	2b00      	cmp	r3, #0
200005d0:	d020      	beq.n	20000614 <__atox+0x94>
200005d2:	683a      	ldr	r2, [r7, #0]
200005d4:	6a3b      	ldr	r3, [r7, #32]
200005d6:	429a      	cmp	r2, r3
200005d8:	dd1c      	ble.n	20000614 <__atox+0x94>
	width = width - retval;
200005da:	683a      	ldr	r2, [r7, #0]
200005dc:	6a3b      	ldr	r3, [r7, #32]
200005de:	1ad3      	subs	r3, r2, r3
200005e0:	603b      	str	r3, [r7, #0]
	while (width) {
200005e2:	e00a      	b.n	200005fa <__atox+0x7a>
	    *op++ = '0';
200005e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200005e6:	1c5a      	adds	r2, r3, #1
200005e8:	627a      	str	r2, [r7, #36]	@ 0x24
200005ea:	2230      	movs	r2, #48	@ 0x30
200005ec:	701a      	strb	r2, [r3, #0]
	    retval++;
200005ee:	6a3b      	ldr	r3, [r7, #32]
200005f0:	3301      	adds	r3, #1
200005f2:	623b      	str	r3, [r7, #32]
	    width--;
200005f4:	683b      	ldr	r3, [r7, #0]
200005f6:	3b01      	subs	r3, #1
200005f8:	603b      	str	r3, [r7, #0]
	while (width) {
200005fa:	683b      	ldr	r3, [r7, #0]
200005fc:	2b00      	cmp	r3, #0
200005fe:	d1f1      	bne.n	200005e4 <__atox+0x64>
	    }
	}

    while (op != buffer) {
20000600:	e008      	b.n	20000614 <__atox+0x94>
	op--;
20000602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20000604:	3b01      	subs	r3, #1
20000606:	627b      	str	r3, [r7, #36]	@ 0x24
	*buf++ = *op;
20000608:	68fb      	ldr	r3, [r7, #12]
2000060a:	1c5a      	adds	r2, r3, #1
2000060c:	60fa      	str	r2, [r7, #12]
2000060e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
20000610:	7812      	ldrb	r2, [r2, #0]
20000612:	701a      	strb	r2, [r3, #0]
    while (op != buffer) {
20000614:	f107 0310 	add.w	r3, r7, #16
20000618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
2000061a:	429a      	cmp	r2, r3
2000061c:	d1f1      	bne.n	20000602 <__atox+0x82>
	}

    return retval;
2000061e:	6a3b      	ldr	r3, [r7, #32]
}
20000620:	4618      	mov	r0, r3
20000622:	372c      	adds	r7, #44	@ 0x2c
20000624:	46bd      	mov	sp, r7
20000626:	f85d 7b04 	ldr.w	r7, [sp], #4
2000062a:	4770      	bx	lr

2000062c <__llatox>:
    *  Return Value:
    *      number of digits placed in output buffer
    ********************************************************************* */
static int __llatox(char *buf,unsigned long long num,unsigned int radix,
		    int width,const char *digits)
{
2000062c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
20000630:	b08a      	sub	sp, #40	@ 0x28
20000632:	af00      	add	r7, sp, #0
20000634:	60f8      	str	r0, [r7, #12]
20000636:	e9c7 2300 	strd	r2, r3, [r7]
    char buffer[16];
    char *op;
    int retval;

    op = &buffer[0];
2000063a:	f107 0310 	add.w	r3, r7, #16
2000063e:	627b      	str	r3, [r7, #36]	@ 0x24
    retval = 0;
20000640:	2300      	movs	r3, #0
20000642:	623b      	str	r3, [r7, #32]
	retval++;
	num >>= 4;
	} while (num != 0);
#else
    do {
	*op++ = digits[num % radix];
20000644:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
20000646:	2200      	movs	r2, #0
20000648:	4698      	mov	r8, r3
2000064a:	4691      	mov	r9, r2
2000064c:	e9d7 0100 	ldrd	r0, r1, [r7]
20000650:	4642      	mov	r2, r8
20000652:	464b      	mov	r3, r9
20000654:	f7ff fda4 	bl	200001a0 <__aeabi_uldivmod>
20000658:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
2000065a:	441a      	add	r2, r3
2000065c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2000065e:	1c59      	adds	r1, r3, #1
20000660:	6279      	str	r1, [r7, #36]	@ 0x24
20000662:	7812      	ldrb	r2, [r2, #0]
20000664:	701a      	strb	r2, [r3, #0]
	retval++;
20000666:	6a3b      	ldr	r3, [r7, #32]
20000668:	3301      	adds	r3, #1
2000066a:	623b      	str	r3, [r7, #32]
	num /= radix;
2000066c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
2000066e:	2200      	movs	r2, #0
20000670:	461c      	mov	r4, r3
20000672:	4615      	mov	r5, r2
20000674:	4622      	mov	r2, r4
20000676:	462b      	mov	r3, r5
20000678:	e9d7 0100 	ldrd	r0, r1, [r7]
2000067c:	f7ff fd90 	bl	200001a0 <__aeabi_uldivmod>
20000680:	4602      	mov	r2, r0
20000682:	460b      	mov	r3, r1
20000684:	e9c7 2300 	strd	r2, r3, [r7]
	} while (num != 0);
20000688:	e9d7 2300 	ldrd	r2, r3, [r7]
2000068c:	4313      	orrs	r3, r2
2000068e:	d1d9      	bne.n	20000644 <__llatox+0x18>
#endif

    if (width && (width > retval)) {
20000690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20000692:	2b00      	cmp	r3, #0
20000694:	d020      	beq.n	200006d8 <__llatox+0xac>
20000696:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
20000698:	6a3b      	ldr	r3, [r7, #32]
2000069a:	429a      	cmp	r2, r3
2000069c:	dd1c      	ble.n	200006d8 <__llatox+0xac>
	width = width - retval;
2000069e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
200006a0:	6a3b      	ldr	r3, [r7, #32]
200006a2:	1ad3      	subs	r3, r2, r3
200006a4:	647b      	str	r3, [r7, #68]	@ 0x44
	while (width) {
200006a6:	e00a      	b.n	200006be <__llatox+0x92>
	    *op++ = '0';
200006a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200006aa:	1c5a      	adds	r2, r3, #1
200006ac:	627a      	str	r2, [r7, #36]	@ 0x24
200006ae:	2230      	movs	r2, #48	@ 0x30
200006b0:	701a      	strb	r2, [r3, #0]
	    retval++;
200006b2:	6a3b      	ldr	r3, [r7, #32]
200006b4:	3301      	adds	r3, #1
200006b6:	623b      	str	r3, [r7, #32]
	    width--;
200006b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
200006ba:	3b01      	subs	r3, #1
200006bc:	647b      	str	r3, [r7, #68]	@ 0x44
	while (width) {
200006be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
200006c0:	2b00      	cmp	r3, #0
200006c2:	d1f1      	bne.n	200006a8 <__llatox+0x7c>
	    }
	}

    while (op != buffer) {
200006c4:	e008      	b.n	200006d8 <__llatox+0xac>
	op--;
200006c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200006c8:	3b01      	subs	r3, #1
200006ca:	627b      	str	r3, [r7, #36]	@ 0x24
	*buf++ = *op;
200006cc:	68fb      	ldr	r3, [r7, #12]
200006ce:	1c5a      	adds	r2, r3, #1
200006d0:	60fa      	str	r2, [r7, #12]
200006d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
200006d4:	7812      	ldrb	r2, [r2, #0]
200006d6:	701a      	strb	r2, [r3, #0]
    while (op != buffer) {
200006d8:	f107 0310 	add.w	r3, r7, #16
200006dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
200006de:	429a      	cmp	r2, r3
200006e0:	d1f1      	bne.n	200006c6 <__llatox+0x9a>
	}

    return retval;
200006e2:	6a3b      	ldr	r3, [r7, #32]
}
200006e4:	4618      	mov	r0, r3
200006e6:	3728      	adds	r7, #40	@ 0x28
200006e8:	46bd      	mov	sp, r7
200006ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

200006f0 <xvsprintf>:
    *  Return Value:
    *      number of characters copied
    ********************************************************************* */
#define isdigit(x) (((x) >= '0') && ((x) <= '9'))
int xvsprintf(char *outbuf,const char *templat,va_list marker)
{
200006f0:	b5b0      	push	{r4, r5, r7, lr}
200006f2:	b09a      	sub	sp, #104	@ 0x68
200006f4:	af04      	add	r7, sp, #16
200006f6:	60f8      	str	r0, [r7, #12]
200006f8:	60b9      	str	r1, [r7, #8]
200006fa:	607a      	str	r2, [r7, #4]
    long long ll;
    int leadingzero;
    int leadingnegsign;
    int islong;
    int width;
    int width2 = 0;
200006fc:	2300      	movs	r3, #0
200006fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int hashash = 0;
20000700:	2300      	movs	r3, #0
20000702:	62bb      	str	r3, [r7, #40]	@ 0x28

    optr = outbuf;
20000704:	68fb      	ldr	r3, [r7, #12]
20000706:	657b      	str	r3, [r7, #84]	@ 0x54
    iptr = templat;
20000708:	68bb      	ldr	r3, [r7, #8]
2000070a:	653b      	str	r3, [r7, #80]	@ 0x50

    while (*iptr) {
2000070c:	e326      	b.n	20000d5c <xvsprintf+0x66c>
	if (*iptr != '%') {*optr++ = *iptr++; continue;}
2000070e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000710:	781b      	ldrb	r3, [r3, #0]
20000712:	2b25      	cmp	r3, #37	@ 0x25
20000714:	d008      	beq.n	20000728 <xvsprintf+0x38>
20000716:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
20000718:	1c53      	adds	r3, r2, #1
2000071a:	653b      	str	r3, [r7, #80]	@ 0x50
2000071c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
2000071e:	1c59      	adds	r1, r3, #1
20000720:	6579      	str	r1, [r7, #84]	@ 0x54
20000722:	7812      	ldrb	r2, [r2, #0]
20000724:	701a      	strb	r2, [r3, #0]
20000726:	e319      	b.n	20000d5c <xvsprintf+0x66c>

	iptr++;
20000728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
2000072a:	3301      	adds	r3, #1
2000072c:	653b      	str	r3, [r7, #80]	@ 0x50

	if (*iptr == '#') { hashash = 1; iptr++; }
2000072e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000730:	781b      	ldrb	r3, [r3, #0]
20000732:	2b23      	cmp	r3, #35	@ 0x23
20000734:	d104      	bne.n	20000740 <xvsprintf+0x50>
20000736:	2301      	movs	r3, #1
20000738:	62bb      	str	r3, [r7, #40]	@ 0x28
2000073a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
2000073c:	3301      	adds	r3, #1
2000073e:	653b      	str	r3, [r7, #80]	@ 0x50
	if (*iptr == '-') {
20000740:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000742:	781b      	ldrb	r3, [r3, #0]
20000744:	2b2d      	cmp	r3, #45	@ 0x2d
20000746:	d105      	bne.n	20000754 <xvsprintf+0x64>
	    leadingnegsign = 1;
20000748:	2301      	movs	r3, #1
2000074a:	627b      	str	r3, [r7, #36]	@ 0x24
	    iptr++;
2000074c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
2000074e:	3301      	adds	r3, #1
20000750:	653b      	str	r3, [r7, #80]	@ 0x50
20000752:	e001      	b.n	20000758 <xvsprintf+0x68>
	    }
	else leadingnegsign = 0;
20000754:	2300      	movs	r3, #0
20000756:	627b      	str	r3, [r7, #36]	@ 0x24

	if (*iptr == '0') leadingzero = 1;
20000758:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
2000075a:	781b      	ldrb	r3, [r3, #0]
2000075c:	2b30      	cmp	r3, #48	@ 0x30
2000075e:	d102      	bne.n	20000766 <xvsprintf+0x76>
20000760:	2301      	movs	r3, #1
20000762:	623b      	str	r3, [r7, #32]
20000764:	e001      	b.n	2000076a <xvsprintf+0x7a>
	else leadingzero = 0;
20000766:	2300      	movs	r3, #0
20000768:	623b      	str	r3, [r7, #32]

	width = 0;
2000076a:	2300      	movs	r3, #0
2000076c:	633b      	str	r3, [r7, #48]	@ 0x30
	while (*iptr && isdigit(*iptr)) {
2000076e:	e016      	b.n	2000079e <xvsprintf+0xae>
	    width += (*iptr - '0');
20000770:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000772:	781b      	ldrb	r3, [r3, #0]
20000774:	3b30      	subs	r3, #48	@ 0x30
20000776:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
20000778:	4413      	add	r3, r2
2000077a:	633b      	str	r3, [r7, #48]	@ 0x30
	    iptr++;
2000077c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
2000077e:	3301      	adds	r3, #1
20000780:	653b      	str	r3, [r7, #80]	@ 0x50
	    if (isdigit(*iptr)) width *= 10;
20000782:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000784:	781b      	ldrb	r3, [r3, #0]
20000786:	2b2f      	cmp	r3, #47	@ 0x2f
20000788:	d909      	bls.n	2000079e <xvsprintf+0xae>
2000078a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
2000078c:	781b      	ldrb	r3, [r3, #0]
2000078e:	2b39      	cmp	r3, #57	@ 0x39
20000790:	d805      	bhi.n	2000079e <xvsprintf+0xae>
20000792:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
20000794:	4613      	mov	r3, r2
20000796:	009b      	lsls	r3, r3, #2
20000798:	4413      	add	r3, r2
2000079a:	005b      	lsls	r3, r3, #1
2000079c:	633b      	str	r3, [r7, #48]	@ 0x30
	while (*iptr && isdigit(*iptr)) {
2000079e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200007a0:	781b      	ldrb	r3, [r3, #0]
200007a2:	2b00      	cmp	r3, #0
200007a4:	d007      	beq.n	200007b6 <xvsprintf+0xc6>
200007a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200007a8:	781b      	ldrb	r3, [r3, #0]
200007aa:	2b2f      	cmp	r3, #47	@ 0x2f
200007ac:	d903      	bls.n	200007b6 <xvsprintf+0xc6>
200007ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200007b0:	781b      	ldrb	r3, [r3, #0]
200007b2:	2b39      	cmp	r3, #57	@ 0x39
200007b4:	d9dc      	bls.n	20000770 <xvsprintf+0x80>
	    }
	if (*iptr == '.') {
200007b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200007b8:	781b      	ldrb	r3, [r3, #0]
200007ba:	2b2e      	cmp	r3, #46	@ 0x2e
200007bc:	d128      	bne.n	20000810 <xvsprintf+0x120>
	    iptr++;
200007be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200007c0:	3301      	adds	r3, #1
200007c2:	653b      	str	r3, [r7, #80]	@ 0x50
	    width2 = 0;
200007c4:	2300      	movs	r3, #0
200007c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    while (*iptr && isdigit(*iptr)) {
200007c8:	e016      	b.n	200007f8 <xvsprintf+0x108>
		width2 += (*iptr - '0');
200007ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200007cc:	781b      	ldrb	r3, [r3, #0]
200007ce:	3b30      	subs	r3, #48	@ 0x30
200007d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
200007d2:	4413      	add	r3, r2
200007d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		iptr++;
200007d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200007d8:	3301      	adds	r3, #1
200007da:	653b      	str	r3, [r7, #80]	@ 0x50
		if (isdigit(*iptr)) width2 *= 10;
200007dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200007de:	781b      	ldrb	r3, [r3, #0]
200007e0:	2b2f      	cmp	r3, #47	@ 0x2f
200007e2:	d909      	bls.n	200007f8 <xvsprintf+0x108>
200007e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200007e6:	781b      	ldrb	r3, [r3, #0]
200007e8:	2b39      	cmp	r3, #57	@ 0x39
200007ea:	d805      	bhi.n	200007f8 <xvsprintf+0x108>
200007ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
200007ee:	4613      	mov	r3, r2
200007f0:	009b      	lsls	r3, r3, #2
200007f2:	4413      	add	r3, r2
200007f4:	005b      	lsls	r3, r3, #1
200007f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    while (*iptr && isdigit(*iptr)) {
200007f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200007fa:	781b      	ldrb	r3, [r3, #0]
200007fc:	2b00      	cmp	r3, #0
200007fe:	d007      	beq.n	20000810 <xvsprintf+0x120>
20000800:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000802:	781b      	ldrb	r3, [r3, #0]
20000804:	2b2f      	cmp	r3, #47	@ 0x2f
20000806:	d903      	bls.n	20000810 <xvsprintf+0x120>
20000808:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
2000080a:	781b      	ldrb	r3, [r3, #0]
2000080c:	2b39      	cmp	r3, #57	@ 0x39
2000080e:	d9dc      	bls.n	200007ca <xvsprintf+0xda>
		}
	    }

	islong = 0;
20000810:	2300      	movs	r3, #0
20000812:	637b      	str	r3, [r7, #52]	@ 0x34
	if (*iptr == 'l') { islong++; iptr++; }
20000814:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000816:	781b      	ldrb	r3, [r3, #0]
20000818:	2b6c      	cmp	r3, #108	@ 0x6c
2000081a:	d105      	bne.n	20000828 <xvsprintf+0x138>
2000081c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000081e:	3301      	adds	r3, #1
20000820:	637b      	str	r3, [r7, #52]	@ 0x34
20000822:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000824:	3301      	adds	r3, #1
20000826:	653b      	str	r3, [r7, #80]	@ 0x50
	if (*iptr == 'l') { islong++; iptr++; }
20000828:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
2000082a:	781b      	ldrb	r3, [r3, #0]
2000082c:	2b6c      	cmp	r3, #108	@ 0x6c
2000082e:	d105      	bne.n	2000083c <xvsprintf+0x14c>
20000830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000832:	3301      	adds	r3, #1
20000834:	637b      	str	r3, [r7, #52]	@ 0x34
20000836:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000838:	3301      	adds	r3, #1
2000083a:	653b      	str	r3, [r7, #80]	@ 0x50

	switch (*iptr) {
2000083c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
2000083e:	781b      	ldrb	r3, [r3, #0]
20000840:	3b49      	subs	r3, #73	@ 0x49
20000842:	2b2f      	cmp	r3, #47	@ 0x2f
20000844:	f200 8280 	bhi.w	20000d48 <xvsprintf+0x658>
20000848:	a201      	add	r2, pc, #4	@ (adr r2, 20000850 <xvsprintf+0x160>)
2000084a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000084e:	bf00      	nop
20000850:	20000911 	.word	0x20000911
20000854:	20000d49 	.word	0x20000d49
20000858:	20000d49 	.word	0x20000d49
2000085c:	20000d49 	.word	0x20000d49
20000860:	20000d49 	.word	0x20000d49
20000864:	20000d49 	.word	0x20000d49
20000868:	20000d49 	.word	0x20000d49
2000086c:	20000c61 	.word	0x20000c61
20000870:	20000d49 	.word	0x20000d49
20000874:	20000d49 	.word	0x20000d49
20000878:	20000d49 	.word	0x20000d49
2000087c:	20000d49 	.word	0x20000d49
20000880:	20000d49 	.word	0x20000d49
20000884:	20000d49 	.word	0x20000d49
20000888:	20000d49 	.word	0x20000d49
2000088c:	20000bd3 	.word	0x20000bd3
20000890:	20000d49 	.word	0x20000d49
20000894:	20000ceb 	.word	0x20000ceb
20000898:	20000d49 	.word	0x20000d49
2000089c:	20000d49 	.word	0x20000d49
200008a0:	20000d49 	.word	0x20000d49
200008a4:	20000d49 	.word	0x20000d49
200008a8:	20000d49 	.word	0x20000d49
200008ac:	20000d49 	.word	0x20000d49
200008b0:	20000a3b 	.word	0x20000a3b
200008b4:	20000cbf 	.word	0x20000cbf
200008b8:	20000d31 	.word	0x20000d31
200008bc:	20000aa7 	.word	0x20000aa7
200008c0:	20000d49 	.word	0x20000d49
200008c4:	20000d49 	.word	0x20000d49
200008c8:	20000d49 	.word	0x20000d49
200008cc:	20000d49 	.word	0x20000d49
200008d0:	20000d49 	.word	0x20000d49
200008d4:	20000d49 	.word	0x20000d49
200008d8:	20000d49 	.word	0x20000d49
200008dc:	20000d49 	.word	0x20000d49
200008e0:	20000d49 	.word	0x20000d49
200008e4:	20000d49 	.word	0x20000d49
200008e8:	20000d49 	.word	0x20000d49
200008ec:	20000c61 	.word	0x20000c61
200008f0:	20000d49 	.word	0x20000d49
200008f4:	20000d49 	.word	0x20000d49
200008f8:	200009c3 	.word	0x200009c3
200008fc:	20000d49 	.word	0x20000d49
20000900:	20000b55 	.word	0x20000b55
20000904:	20000d49 	.word	0x20000d49
20000908:	20000c93 	.word	0x20000c93
2000090c:	20000bd3 	.word	0x20000bd3
	    case 'I':
		tmpptr = (unsigned char *) va_arg(marker,unsigned char *);
20000910:	687b      	ldr	r3, [r7, #4]
20000912:	1d1a      	adds	r2, r3, #4
20000914:	607a      	str	r2, [r7, #4]
20000916:	681b      	ldr	r3, [r3, #0]
20000918:	64fb      	str	r3, [r7, #76]	@ 0x4c
		optr += __atox(optr,*tmpptr++,10,0,digits);
2000091a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
2000091c:	1c5a      	adds	r2, r3, #1
2000091e:	64fa      	str	r2, [r7, #76]	@ 0x4c
20000920:	781b      	ldrb	r3, [r3, #0]
20000922:	4619      	mov	r1, r3
20000924:	4b9a      	ldr	r3, [pc, #616]	@ (20000b90 <xvsprintf+0x4a0>)
20000926:	9300      	str	r3, [sp, #0]
20000928:	2300      	movs	r3, #0
2000092a:	220a      	movs	r2, #10
2000092c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
2000092e:	f7ff fe27 	bl	20000580 <__atox>
20000932:	4603      	mov	r3, r0
20000934:	461a      	mov	r2, r3
20000936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000938:	4413      	add	r3, r2
2000093a:	657b      	str	r3, [r7, #84]	@ 0x54
		*optr++ = '.';
2000093c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
2000093e:	1c5a      	adds	r2, r3, #1
20000940:	657a      	str	r2, [r7, #84]	@ 0x54
20000942:	222e      	movs	r2, #46	@ 0x2e
20000944:	701a      	strb	r2, [r3, #0]
		optr += __atox(optr,*tmpptr++,10,0,digits);
20000946:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20000948:	1c5a      	adds	r2, r3, #1
2000094a:	64fa      	str	r2, [r7, #76]	@ 0x4c
2000094c:	781b      	ldrb	r3, [r3, #0]
2000094e:	4619      	mov	r1, r3
20000950:	4b8f      	ldr	r3, [pc, #572]	@ (20000b90 <xvsprintf+0x4a0>)
20000952:	9300      	str	r3, [sp, #0]
20000954:	2300      	movs	r3, #0
20000956:	220a      	movs	r2, #10
20000958:	6d78      	ldr	r0, [r7, #84]	@ 0x54
2000095a:	f7ff fe11 	bl	20000580 <__atox>
2000095e:	4603      	mov	r3, r0
20000960:	461a      	mov	r2, r3
20000962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000964:	4413      	add	r3, r2
20000966:	657b      	str	r3, [r7, #84]	@ 0x54
		*optr++ = '.';
20000968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
2000096a:	1c5a      	adds	r2, r3, #1
2000096c:	657a      	str	r2, [r7, #84]	@ 0x54
2000096e:	222e      	movs	r2, #46	@ 0x2e
20000970:	701a      	strb	r2, [r3, #0]
		optr += __atox(optr,*tmpptr++,10,0,digits);
20000972:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20000974:	1c5a      	adds	r2, r3, #1
20000976:	64fa      	str	r2, [r7, #76]	@ 0x4c
20000978:	781b      	ldrb	r3, [r3, #0]
2000097a:	4619      	mov	r1, r3
2000097c:	4b84      	ldr	r3, [pc, #528]	@ (20000b90 <xvsprintf+0x4a0>)
2000097e:	9300      	str	r3, [sp, #0]
20000980:	2300      	movs	r3, #0
20000982:	220a      	movs	r2, #10
20000984:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000986:	f7ff fdfb 	bl	20000580 <__atox>
2000098a:	4603      	mov	r3, r0
2000098c:	461a      	mov	r2, r3
2000098e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000990:	4413      	add	r3, r2
20000992:	657b      	str	r3, [r7, #84]	@ 0x54
		*optr++ = '.';
20000994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000996:	1c5a      	adds	r2, r3, #1
20000998:	657a      	str	r2, [r7, #84]	@ 0x54
2000099a:	222e      	movs	r2, #46	@ 0x2e
2000099c:	701a      	strb	r2, [r3, #0]
		optr += __atox(optr,*tmpptr++,10,0,digits);
2000099e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
200009a0:	1c5a      	adds	r2, r3, #1
200009a2:	64fa      	str	r2, [r7, #76]	@ 0x4c
200009a4:	781b      	ldrb	r3, [r3, #0]
200009a6:	4619      	mov	r1, r3
200009a8:	4b79      	ldr	r3, [pc, #484]	@ (20000b90 <xvsprintf+0x4a0>)
200009aa:	9300      	str	r3, [sp, #0]
200009ac:	2300      	movs	r3, #0
200009ae:	220a      	movs	r2, #10
200009b0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
200009b2:	f7ff fde5 	bl	20000580 <__atox>
200009b6:	4603      	mov	r3, r0
200009b8:	461a      	mov	r2, r3
200009ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
200009bc:	4413      	add	r3, r2
200009be:	657b      	str	r3, [r7, #84]	@ 0x54
		break;
200009c0:	e1c9      	b.n	20000d56 <xvsprintf+0x666>
	    case 's':
		tmpptr = (unsigned char *) va_arg(marker,unsigned char *);
200009c2:	687b      	ldr	r3, [r7, #4]
200009c4:	1d1a      	adds	r2, r3, #4
200009c6:	607a      	str	r2, [r7, #4]
200009c8:	681b      	ldr	r3, [r3, #0]
200009ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (!tmpptr) tmpptr = (unsigned char *) "(null)";
200009cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
200009ce:	2b00      	cmp	r3, #0
200009d0:	d101      	bne.n	200009d6 <xvsprintf+0x2e6>
200009d2:	4b70      	ldr	r3, [pc, #448]	@ (20000b94 <xvsprintf+0x4a4>)
200009d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if ((width == 0) & (width2 == 0)) {
200009d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
200009d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200009da:	4313      	orrs	r3, r2
200009dc:	2b00      	cmp	r3, #0
200009de:	d118      	bne.n	20000a12 <xvsprintf+0x322>
		    while (*tmpptr) *optr++ = *tmpptr++;
200009e0:	e007      	b.n	200009f2 <xvsprintf+0x302>
200009e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
200009e4:	1c53      	adds	r3, r2, #1
200009e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
200009e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
200009ea:	1c59      	adds	r1, r3, #1
200009ec:	6579      	str	r1, [r7, #84]	@ 0x54
200009ee:	7812      	ldrb	r2, [r2, #0]
200009f0:	701a      	strb	r2, [r3, #0]
200009f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
200009f4:	781b      	ldrb	r3, [r3, #0]
200009f6:	2b00      	cmp	r3, #0
200009f8:	d1f3      	bne.n	200009e2 <xvsprintf+0x2f2>
		    break;
200009fa:	e1ac      	b.n	20000d56 <xvsprintf+0x666>
		    }
		while (width && *tmpptr) {
		    *optr++ = *tmpptr++;
200009fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
200009fe:	1c53      	adds	r3, r2, #1
20000a00:	64fb      	str	r3, [r7, #76]	@ 0x4c
20000a02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000a04:	1c59      	adds	r1, r3, #1
20000a06:	6579      	str	r1, [r7, #84]	@ 0x54
20000a08:	7812      	ldrb	r2, [r2, #0]
20000a0a:	701a      	strb	r2, [r3, #0]
		    width--;
20000a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20000a0e:	3b01      	subs	r3, #1
20000a10:	633b      	str	r3, [r7, #48]	@ 0x30
		while (width && *tmpptr) {
20000a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20000a14:	2b00      	cmp	r3, #0
20000a16:	d00c      	beq.n	20000a32 <xvsprintf+0x342>
20000a18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20000a1a:	781b      	ldrb	r3, [r3, #0]
20000a1c:	2b00      	cmp	r3, #0
20000a1e:	d1ed      	bne.n	200009fc <xvsprintf+0x30c>
		    }
		while (width) {
20000a20:	e007      	b.n	20000a32 <xvsprintf+0x342>
		    *optr++ = ' ';
20000a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000a24:	1c5a      	adds	r2, r3, #1
20000a26:	657a      	str	r2, [r7, #84]	@ 0x54
20000a28:	2220      	movs	r2, #32
20000a2a:	701a      	strb	r2, [r3, #0]
		    width--;
20000a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20000a2e:	3b01      	subs	r3, #1
20000a30:	633b      	str	r3, [r7, #48]	@ 0x30
		while (width) {
20000a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20000a34:	2b00      	cmp	r3, #0
20000a36:	d1f4      	bne.n	20000a22 <xvsprintf+0x332>
		    }
		break;
20000a38:	e18d      	b.n	20000d56 <xvsprintf+0x666>
	    case 'a':
		tmpptr = (unsigned char *) va_arg(marker,unsigned char *);
20000a3a:	687b      	ldr	r3, [r7, #4]
20000a3c:	1d1a      	adds	r2, r3, #4
20000a3e:	607a      	str	r2, [r7, #4]
20000a40:	681b      	ldr	r3, [r3, #0]
20000a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
		for (x = 0; x < 5; x++) {
20000a44:	2300      	movs	r3, #0
20000a46:	64bb      	str	r3, [r7, #72]	@ 0x48
20000a48:	e018      	b.n	20000a7c <xvsprintf+0x38c>
		    optr += __atox(optr,*tmpptr++,16,2,digits);
20000a4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20000a4c:	1c5a      	adds	r2, r3, #1
20000a4e:	64fa      	str	r2, [r7, #76]	@ 0x4c
20000a50:	781b      	ldrb	r3, [r3, #0]
20000a52:	4619      	mov	r1, r3
20000a54:	4b4e      	ldr	r3, [pc, #312]	@ (20000b90 <xvsprintf+0x4a0>)
20000a56:	9300      	str	r3, [sp, #0]
20000a58:	2302      	movs	r3, #2
20000a5a:	2210      	movs	r2, #16
20000a5c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000a5e:	f7ff fd8f 	bl	20000580 <__atox>
20000a62:	4603      	mov	r3, r0
20000a64:	461a      	mov	r2, r3
20000a66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000a68:	4413      	add	r3, r2
20000a6a:	657b      	str	r3, [r7, #84]	@ 0x54
		    *optr++ = '-';
20000a6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000a6e:	1c5a      	adds	r2, r3, #1
20000a70:	657a      	str	r2, [r7, #84]	@ 0x54
20000a72:	222d      	movs	r2, #45	@ 0x2d
20000a74:	701a      	strb	r2, [r3, #0]
		for (x = 0; x < 5; x++) {
20000a76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20000a78:	3301      	adds	r3, #1
20000a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
20000a7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20000a7e:	2b04      	cmp	r3, #4
20000a80:	dde3      	ble.n	20000a4a <xvsprintf+0x35a>
		    }
		optr += __atox(optr,*tmpptr++,16,2,digits);
20000a82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20000a84:	1c5a      	adds	r2, r3, #1
20000a86:	64fa      	str	r2, [r7, #76]	@ 0x4c
20000a88:	781b      	ldrb	r3, [r3, #0]
20000a8a:	4619      	mov	r1, r3
20000a8c:	4b40      	ldr	r3, [pc, #256]	@ (20000b90 <xvsprintf+0x4a0>)
20000a8e:	9300      	str	r3, [sp, #0]
20000a90:	2302      	movs	r3, #2
20000a92:	2210      	movs	r2, #16
20000a94:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000a96:	f7ff fd73 	bl	20000580 <__atox>
20000a9a:	4603      	mov	r3, r0
20000a9c:	461a      	mov	r2, r3
20000a9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000aa0:	4413      	add	r3, r2
20000aa2:	657b      	str	r3, [r7, #84]	@ 0x54
		break;
20000aa4:	e157      	b.n	20000d56 <xvsprintf+0x666>
20000aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000aa8:	2b01      	cmp	r3, #1
20000aaa:	dc03      	bgt.n	20000ab4 <xvsprintf+0x3c4>
20000aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000aae:	2b00      	cmp	r3, #0
20000ab0:	da04      	bge.n	20000abc <xvsprintf+0x3cc>
			ll = va_arg(marker,long long int);
			if (ll < 0) { *optr++='-'; ll = -ll;}
			optr += __llatox(optr,ll,10,width,digits);
			break;
		    }
		break;
20000ab2:	e150      	b.n	20000d56 <xvsprintf+0x666>
20000ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000ab6:	2b02      	cmp	r3, #2
20000ab8:	d01e      	beq.n	20000af8 <xvsprintf+0x408>
20000aba:	e14c      	b.n	20000d56 <xvsprintf+0x666>
			i = va_arg(marker,int);
20000abc:	687b      	ldr	r3, [r7, #4]
20000abe:	1d1a      	adds	r2, r3, #4
20000ac0:	607a      	str	r2, [r7, #4]
20000ac2:	681b      	ldr	r3, [r3, #0]
20000ac4:	647b      	str	r3, [r7, #68]	@ 0x44
			if (i < 0) { *optr++='-'; i = -i;}
20000ac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20000ac8:	2b00      	cmp	r3, #0
20000aca:	da07      	bge.n	20000adc <xvsprintf+0x3ec>
20000acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000ace:	1c5a      	adds	r2, r3, #1
20000ad0:	657a      	str	r2, [r7, #84]	@ 0x54
20000ad2:	222d      	movs	r2, #45	@ 0x2d
20000ad4:	701a      	strb	r2, [r3, #0]
20000ad6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20000ad8:	425b      	negs	r3, r3
20000ada:	647b      	str	r3, [r7, #68]	@ 0x44
			optr += __atox(optr,i,10,width,digits);
20000adc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
20000ade:	4b2c      	ldr	r3, [pc, #176]	@ (20000b90 <xvsprintf+0x4a0>)
20000ae0:	9300      	str	r3, [sp, #0]
20000ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20000ae4:	220a      	movs	r2, #10
20000ae6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000ae8:	f7ff fd4a 	bl	20000580 <__atox>
20000aec:	4603      	mov	r3, r0
20000aee:	461a      	mov	r2, r3
20000af0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000af2:	4413      	add	r3, r2
20000af4:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
20000af6:	e02c      	b.n	20000b52 <xvsprintf+0x462>
			ll = va_arg(marker,long long int);
20000af8:	687b      	ldr	r3, [r7, #4]
20000afa:	3307      	adds	r3, #7
20000afc:	f023 0307 	bic.w	r3, r3, #7
20000b00:	f103 0208 	add.w	r2, r3, #8
20000b04:	607a      	str	r2, [r7, #4]
20000b06:	e9d3 2300 	ldrd	r2, r3, [r3]
20000b0a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
			if (ll < 0) { *optr++='-'; ll = -ll;}
20000b0e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
20000b12:	2b00      	cmp	r3, #0
20000b14:	da0c      	bge.n	20000b30 <xvsprintf+0x440>
20000b16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000b18:	1c5a      	adds	r2, r3, #1
20000b1a:	657a      	str	r2, [r7, #84]	@ 0x54
20000b1c:	222d      	movs	r2, #45	@ 0x2d
20000b1e:	701a      	strb	r2, [r3, #0]
20000b20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
20000b24:	2100      	movs	r1, #0
20000b26:	4254      	negs	r4, r2
20000b28:	eb61 0503 	sbc.w	r5, r1, r3
20000b2c:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
			optr += __llatox(optr,ll,10,width,digits);
20000b30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
20000b34:	4916      	ldr	r1, [pc, #88]	@ (20000b90 <xvsprintf+0x4a0>)
20000b36:	9102      	str	r1, [sp, #8]
20000b38:	6b39      	ldr	r1, [r7, #48]	@ 0x30
20000b3a:	9101      	str	r1, [sp, #4]
20000b3c:	210a      	movs	r1, #10
20000b3e:	9100      	str	r1, [sp, #0]
20000b40:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000b42:	f7ff fd73 	bl	2000062c <__llatox>
20000b46:	4603      	mov	r3, r0
20000b48:	461a      	mov	r2, r3
20000b4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000b4c:	4413      	add	r3, r2
20000b4e:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
20000b50:	bf00      	nop
		break;
20000b52:	e100      	b.n	20000d56 <xvsprintf+0x666>
20000b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000b56:	2b01      	cmp	r3, #1
20000b58:	dc03      	bgt.n	20000b62 <xvsprintf+0x472>
20000b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000b5c:	2b00      	cmp	r3, #0
20000b5e:	da04      	bge.n	20000b6a <xvsprintf+0x47a>
		    case 2:
			ulx = va_arg(marker,unsigned long long);
			optr += __llatox(optr,ulx,10,width,digits);
			break;
		    }
		break;
20000b60:	e0f9      	b.n	20000d56 <xvsprintf+0x666>
20000b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000b64:	2b02      	cmp	r3, #2
20000b66:	d017      	beq.n	20000b98 <xvsprintf+0x4a8>
20000b68:	e0f5      	b.n	20000d56 <xvsprintf+0x666>
			ux = va_arg(marker,unsigned int);
20000b6a:	687b      	ldr	r3, [r7, #4]
20000b6c:	1d1a      	adds	r2, r3, #4
20000b6e:	607a      	str	r2, [r7, #4]
20000b70:	681b      	ldr	r3, [r3, #0]
20000b72:	617b      	str	r3, [r7, #20]
			optr += __atox(optr,ux,10,width,digits);
20000b74:	4b06      	ldr	r3, [pc, #24]	@ (20000b90 <xvsprintf+0x4a0>)
20000b76:	9300      	str	r3, [sp, #0]
20000b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20000b7a:	220a      	movs	r2, #10
20000b7c:	6979      	ldr	r1, [r7, #20]
20000b7e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000b80:	f7ff fcfe 	bl	20000580 <__atox>
20000b84:	4603      	mov	r3, r0
20000b86:	461a      	mov	r2, r3
20000b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000b8a:	4413      	add	r3, r2
20000b8c:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
20000b8e:	e01f      	b.n	20000bd0 <xvsprintf+0x4e0>
20000b90:	200028f4 	.word	0x200028f4
20000b94:	20002394 	.word	0x20002394
			ulx = va_arg(marker,unsigned long long);
20000b98:	687b      	ldr	r3, [r7, #4]
20000b9a:	3307      	adds	r3, #7
20000b9c:	f023 0307 	bic.w	r3, r3, #7
20000ba0:	f103 0208 	add.w	r2, r3, #8
20000ba4:	607a      	str	r2, [r7, #4]
20000ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
20000baa:	e9c7 2306 	strd	r2, r3, [r7, #24]
			optr += __llatox(optr,ulx,10,width,digits);
20000bae:	4b73      	ldr	r3, [pc, #460]	@ (20000d7c <xvsprintf+0x68c>)
20000bb0:	9302      	str	r3, [sp, #8]
20000bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20000bb4:	9301      	str	r3, [sp, #4]
20000bb6:	230a      	movs	r3, #10
20000bb8:	9300      	str	r3, [sp, #0]
20000bba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
20000bbe:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000bc0:	f7ff fd34 	bl	2000062c <__llatox>
20000bc4:	4603      	mov	r3, r0
20000bc6:	461a      	mov	r2, r3
20000bc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000bca:	4413      	add	r3, r2
20000bcc:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
20000bce:	bf00      	nop
		break;
20000bd0:	e0c1      	b.n	20000d56 <xvsprintf+0x666>
20000bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000bd4:	2b01      	cmp	r3, #1
20000bd6:	dc03      	bgt.n	20000be0 <xvsprintf+0x4f0>
20000bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000bda:	2b00      	cmp	r3, #0
20000bdc:	da04      	bge.n	20000be8 <xvsprintf+0x4f8>
			ulx = va_arg(marker,unsigned long long);
			optr += __llatox(optr,ulx,16,width,
				       (*iptr == 'X') ? digits : ldigits);
			break;
		    }
		break;
20000bde:	e0ba      	b.n	20000d56 <xvsprintf+0x666>
20000be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000be2:	2b02      	cmp	r3, #2
20000be4:	d019      	beq.n	20000c1a <xvsprintf+0x52a>
20000be6:	e0b6      	b.n	20000d56 <xvsprintf+0x666>
			ux = va_arg(marker,unsigned int);
20000be8:	687b      	ldr	r3, [r7, #4]
20000bea:	1d1a      	adds	r2, r3, #4
20000bec:	607a      	str	r2, [r7, #4]
20000bee:	681b      	ldr	r3, [r3, #0]
20000bf0:	617b      	str	r3, [r7, #20]
				       (*iptr == 'X') ? digits : ldigits);
20000bf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000bf4:	781b      	ldrb	r3, [r3, #0]
			optr += __atox(optr,ux,16,width,
20000bf6:	2b58      	cmp	r3, #88	@ 0x58
20000bf8:	d101      	bne.n	20000bfe <xvsprintf+0x50e>
20000bfa:	4b60      	ldr	r3, [pc, #384]	@ (20000d7c <xvsprintf+0x68c>)
20000bfc:	e000      	b.n	20000c00 <xvsprintf+0x510>
20000bfe:	4b60      	ldr	r3, [pc, #384]	@ (20000d80 <xvsprintf+0x690>)
20000c00:	9300      	str	r3, [sp, #0]
20000c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20000c04:	2210      	movs	r2, #16
20000c06:	6979      	ldr	r1, [r7, #20]
20000c08:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000c0a:	f7ff fcb9 	bl	20000580 <__atox>
20000c0e:	4603      	mov	r3, r0
20000c10:	461a      	mov	r2, r3
20000c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000c14:	4413      	add	r3, r2
20000c16:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
20000c18:	e021      	b.n	20000c5e <xvsprintf+0x56e>
			ulx = va_arg(marker,unsigned long long);
20000c1a:	687b      	ldr	r3, [r7, #4]
20000c1c:	3307      	adds	r3, #7
20000c1e:	f023 0307 	bic.w	r3, r3, #7
20000c22:	f103 0208 	add.w	r2, r3, #8
20000c26:	607a      	str	r2, [r7, #4]
20000c28:	e9d3 2300 	ldrd	r2, r3, [r3]
20000c2c:	e9c7 2306 	strd	r2, r3, [r7, #24]
				       (*iptr == 'X') ? digits : ldigits);
20000c30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000c32:	781b      	ldrb	r3, [r3, #0]
			optr += __llatox(optr,ulx,16,width,
20000c34:	2b58      	cmp	r3, #88	@ 0x58
20000c36:	d101      	bne.n	20000c3c <xvsprintf+0x54c>
20000c38:	4b50      	ldr	r3, [pc, #320]	@ (20000d7c <xvsprintf+0x68c>)
20000c3a:	e000      	b.n	20000c3e <xvsprintf+0x54e>
20000c3c:	4b50      	ldr	r3, [pc, #320]	@ (20000d80 <xvsprintf+0x690>)
20000c3e:	9302      	str	r3, [sp, #8]
20000c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20000c42:	9301      	str	r3, [sp, #4]
20000c44:	2310      	movs	r3, #16
20000c46:	9300      	str	r3, [sp, #0]
20000c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
20000c4c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000c4e:	f7ff fced 	bl	2000062c <__llatox>
20000c52:	4603      	mov	r3, r0
20000c54:	461a      	mov	r2, r3
20000c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000c58:	4413      	add	r3, r2
20000c5a:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
20000c5c:	bf00      	nop
		break;
20000c5e:	e07a      	b.n	20000d56 <xvsprintf+0x666>
#ifdef __long64
		lx = va_arg(marker,long long);
		optr += __llatox(optr,lx,16,16,
				 (*iptr == 'P') ? digits : ldigits);
#else
		x = va_arg(marker,long);
20000c60:	687b      	ldr	r3, [r7, #4]
20000c62:	1d1a      	adds	r2, r3, #4
20000c64:	607a      	str	r2, [r7, #4]
20000c66:	681b      	ldr	r3, [r3, #0]
20000c68:	64bb      	str	r3, [r7, #72]	@ 0x48
		optr += __atox(optr,x,16,8,
20000c6a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
			       (*iptr == 'P') ? digits : ldigits);
20000c6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000c6e:	781b      	ldrb	r3, [r3, #0]
		optr += __atox(optr,x,16,8,
20000c70:	2b50      	cmp	r3, #80	@ 0x50
20000c72:	d101      	bne.n	20000c78 <xvsprintf+0x588>
20000c74:	4b41      	ldr	r3, [pc, #260]	@ (20000d7c <xvsprintf+0x68c>)
20000c76:	e000      	b.n	20000c7a <xvsprintf+0x58a>
20000c78:	4b41      	ldr	r3, [pc, #260]	@ (20000d80 <xvsprintf+0x690>)
20000c7a:	9300      	str	r3, [sp, #0]
20000c7c:	2308      	movs	r3, #8
20000c7e:	2210      	movs	r2, #16
20000c80:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000c82:	f7ff fc7d 	bl	20000580 <__atox>
20000c86:	4603      	mov	r3, r0
20000c88:	461a      	mov	r2, r3
20000c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000c8c:	4413      	add	r3, r2
20000c8e:	657b      	str	r3, [r7, #84]	@ 0x54
#endif
		break;
20000c90:	e061      	b.n	20000d56 <xvsprintf+0x666>
	    case 'w':
		x = va_arg(marker,unsigned int);
20000c92:	687b      	ldr	r3, [r7, #4]
20000c94:	1d1a      	adds	r2, r3, #4
20000c96:	607a      	str	r2, [r7, #4]
20000c98:	681b      	ldr	r3, [r3, #0]
20000c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
	        x &= 0x0000FFFF;
20000c9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20000c9e:	b29b      	uxth	r3, r3
20000ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
		optr += __atox(optr,x,16,4,digits);
20000ca2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
20000ca4:	4b35      	ldr	r3, [pc, #212]	@ (20000d7c <xvsprintf+0x68c>)
20000ca6:	9300      	str	r3, [sp, #0]
20000ca8:	2304      	movs	r3, #4
20000caa:	2210      	movs	r2, #16
20000cac:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000cae:	f7ff fc67 	bl	20000580 <__atox>
20000cb2:	4603      	mov	r3, r0
20000cb4:	461a      	mov	r2, r3
20000cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000cb8:	4413      	add	r3, r2
20000cba:	657b      	str	r3, [r7, #84]	@ 0x54
		break;
20000cbc:	e04b      	b.n	20000d56 <xvsprintf+0x666>
	    case 'b':
		x = va_arg(marker,unsigned int);
20000cbe:	687b      	ldr	r3, [r7, #4]
20000cc0:	1d1a      	adds	r2, r3, #4
20000cc2:	607a      	str	r2, [r7, #4]
20000cc4:	681b      	ldr	r3, [r3, #0]
20000cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
	        x &= 0x0000FF;
20000cc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20000cca:	b2db      	uxtb	r3, r3
20000ccc:	64bb      	str	r3, [r7, #72]	@ 0x48
		optr += __atox(optr,x,16,2,digits);
20000cce:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
20000cd0:	4b2a      	ldr	r3, [pc, #168]	@ (20000d7c <xvsprintf+0x68c>)
20000cd2:	9300      	str	r3, [sp, #0]
20000cd4:	2302      	movs	r3, #2
20000cd6:	2210      	movs	r2, #16
20000cd8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000cda:	f7ff fc51 	bl	20000580 <__atox>
20000cde:	4603      	mov	r3, r0
20000ce0:	461a      	mov	r2, r3
20000ce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000ce4:	4413      	add	r3, r2
20000ce6:	657b      	str	r3, [r7, #84]	@ 0x54
		break;
20000ce8:	e035      	b.n	20000d56 <xvsprintf+0x666>
	    case 'Z':
		x = va_arg(marker,unsigned int);
20000cea:	687b      	ldr	r3, [r7, #4]
20000cec:	1d1a      	adds	r2, r3, #4
20000cee:	607a      	str	r2, [r7, #4]
20000cf0:	681b      	ldr	r3, [r3, #0]
20000cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
		tmpptr = va_arg(marker,unsigned char *);
20000cf4:	687b      	ldr	r3, [r7, #4]
20000cf6:	1d1a      	adds	r2, r3, #4
20000cf8:	607a      	str	r2, [r7, #4]
20000cfa:	681b      	ldr	r3, [r3, #0]
20000cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
		while (x) {
20000cfe:	e013      	b.n	20000d28 <xvsprintf+0x638>
		    optr += __atox(optr,*tmpptr++,16,2,digits);
20000d00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20000d02:	1c5a      	adds	r2, r3, #1
20000d04:	64fa      	str	r2, [r7, #76]	@ 0x4c
20000d06:	781b      	ldrb	r3, [r3, #0]
20000d08:	4619      	mov	r1, r3
20000d0a:	4b1c      	ldr	r3, [pc, #112]	@ (20000d7c <xvsprintf+0x68c>)
20000d0c:	9300      	str	r3, [sp, #0]
20000d0e:	2302      	movs	r3, #2
20000d10:	2210      	movs	r2, #16
20000d12:	6d78      	ldr	r0, [r7, #84]	@ 0x54
20000d14:	f7ff fc34 	bl	20000580 <__atox>
20000d18:	4603      	mov	r3, r0
20000d1a:	461a      	mov	r2, r3
20000d1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000d1e:	4413      	add	r3, r2
20000d20:	657b      	str	r3, [r7, #84]	@ 0x54
		    x--;
20000d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20000d24:	3b01      	subs	r3, #1
20000d26:	64bb      	str	r3, [r7, #72]	@ 0x48
		while (x) {
20000d28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
20000d2a:	2b00      	cmp	r3, #0
20000d2c:	d1e8      	bne.n	20000d00 <xvsprintf+0x610>
		    }
		break;
20000d2e:	e012      	b.n	20000d56 <xvsprintf+0x666>
	    case 'c':
		x = va_arg(marker, int);
20000d30:	687b      	ldr	r3, [r7, #4]
20000d32:	1d1a      	adds	r2, r3, #4
20000d34:	607a      	str	r2, [r7, #4]
20000d36:	681b      	ldr	r3, [r3, #0]
20000d38:	64bb      	str	r3, [r7, #72]	@ 0x48
		*optr++ = x & 0xff;
20000d3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000d3c:	1c5a      	adds	r2, r3, #1
20000d3e:	657a      	str	r2, [r7, #84]	@ 0x54
20000d40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
20000d42:	b2d2      	uxtb	r2, r2
20000d44:	701a      	strb	r2, [r3, #0]
		break;
20000d46:	e006      	b.n	20000d56 <xvsprintf+0x666>

	    default:
		*optr++ = *iptr;
20000d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000d4a:	1c5a      	adds	r2, r3, #1
20000d4c:	657a      	str	r2, [r7, #84]	@ 0x54
20000d4e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
20000d50:	7812      	ldrb	r2, [r2, #0]
20000d52:	701a      	strb	r2, [r3, #0]
		break;
20000d54:	bf00      	nop
	    }
	iptr++;
20000d56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000d58:	3301      	adds	r3, #1
20000d5a:	653b      	str	r3, [r7, #80]	@ 0x50
    while (*iptr) {
20000d5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000d5e:	781b      	ldrb	r3, [r3, #0]
20000d60:	2b00      	cmp	r3, #0
20000d62:	f47f acd4 	bne.w	2000070e <xvsprintf+0x1e>
	}

 //   *optr++ = '\r';
 //   *optr++ = '\n';
    *optr = '\0';
20000d66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000d68:	2200      	movs	r2, #0
20000d6a:	701a      	strb	r2, [r3, #0]

    return (optr - outbuf);
20000d6c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
20000d6e:	68fb      	ldr	r3, [r7, #12]
20000d70:	1ad3      	subs	r3, r2, r3
}
20000d72:	4618      	mov	r0, r3
20000d74:	3758      	adds	r7, #88	@ 0x58
20000d76:	46bd      	mov	sp, r7
20000d78:	bdb0      	pop	{r4, r5, r7, pc}
20000d7a:	bf00      	nop
20000d7c:	200028f4 	.word	0x200028f4
20000d80:	20002908 	.word	0x20002908

20000d84 <printf>:
    *  Return value:
    *  	   number of bytes written
    ********************************************************************* */

int printf(const char *templat,...)
{
20000d84:	b40f      	push	{r0, r1, r2, r3}
20000d86:	b580      	push	{r7, lr}
20000d88:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
20000d8c:	af00      	add	r7, sp, #0
    va_list marker;
    int count;
    char buffer[512];

    va_start(marker,templat);
20000d8e:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
20000d92:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
    count = xvsprintf(buffer,templat,marker);
20000d96:	1d3b      	adds	r3, r7, #4
20000d98:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
20000d9c:	f8d7 1218 	ldr.w	r1, [r7, #536]	@ 0x218
20000da0:	4618      	mov	r0, r3
20000da2:	f7ff fca5 	bl	200006f0 <xvsprintf>
20000da6:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
    va_end(marker);


    for(int i = 0; i< count; i++){
20000daa:	2300      	movs	r3, #0
20000dac:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
20000db0:	e00f      	b.n	20000dd2 <printf+0x4e>
    	putc(buffer[i]);
20000db2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
20000db6:	f5a3 7203 	sub.w	r2, r3, #524	@ 0x20c
20000dba:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
20000dbe:	4413      	add	r3, r2
20000dc0:	781b      	ldrb	r3, [r3, #0]
20000dc2:	4618      	mov	r0, r3
20000dc4:	f000 f816 	bl	20000df4 <putc>
    for(int i = 0; i< count; i++){
20000dc8:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
20000dcc:	3301      	adds	r3, #1
20000dce:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
20000dd2:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
20000dd6:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
20000dda:	429a      	cmp	r2, r3
20000ddc:	dbe9      	blt.n	20000db2 <printf+0x2e>
    }

    //putc('\r');
    //putc('\n');

    return count;
20000dde:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
}
20000de2:	4618      	mov	r0, r3
20000de4:	f507 7704 	add.w	r7, r7, #528	@ 0x210
20000de8:	46bd      	mov	sp, r7
20000dea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
20000dee:	b004      	add	sp, #16
20000df0:	4770      	bx	lr
	...

20000df4 <putc>:
	for(int i = 0; i< strlen(str); i++)
		putc(*str++);
}


void putc(char c) {
20000df4:	b480      	push	{r7}
20000df6:	b085      	sub	sp, #20
20000df8:	af00      	add	r7, sp, #0
20000dfa:	4603      	mov	r3, r0
20000dfc:	71fb      	strb	r3, [r7, #7]

    //volatile uint32_t *usart_isr = &UART->USART_ISR;
    volatile uint32_t *usart_isr = (volatile uint32_t *)(0x40013800 + 0x1C);
20000dfe:	4b10      	ldr	r3, [pc, #64]	@ (20000e40 <putc+0x4c>)
20000e00:	60fb      	str	r3, [r7, #12]

    //volatile uint32_t *usart_tdr = &UART->USART_TDR;
    volatile uint32_t *usart_tdr = (volatile uint32_t *)(0x40013800 + 0x28);
20000e02:	4b10      	ldr	r3, [pc, #64]	@ (20000e44 <putc+0x50>)
20000e04:	60bb      	str	r3, [r7, #8]

    if (c == '\n'){
20000e06:	79fb      	ldrb	r3, [r7, #7]
20000e08:	2b0a      	cmp	r3, #10
20000e0a:	d109      	bne.n	20000e20 <putc+0x2c>

		 while((*usart_isr & (1 << 7)) == 0);
20000e0c:	bf00      	nop
20000e0e:	68fb      	ldr	r3, [r7, #12]
20000e10:	681b      	ldr	r3, [r3, #0]
20000e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20000e16:	2b00      	cmp	r3, #0
20000e18:	d0f9      	beq.n	20000e0e <putc+0x1a>
		 *usart_tdr = '\r';
20000e1a:	68bb      	ldr	r3, [r7, #8]
20000e1c:	220d      	movs	r2, #13
20000e1e:	601a      	str	r2, [r3, #0]
    }

    while((*usart_isr & (1 << 7)) == 0);
20000e20:	bf00      	nop
20000e22:	68fb      	ldr	r3, [r7, #12]
20000e24:	681b      	ldr	r3, [r3, #0]
20000e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20000e2a:	2b00      	cmp	r3, #0
20000e2c:	d0f9      	beq.n	20000e22 <putc+0x2e>



    *usart_tdr = c;
20000e2e:	79fa      	ldrb	r2, [r7, #7]
20000e30:	68bb      	ldr	r3, [r7, #8]
20000e32:	601a      	str	r2, [r3, #0]
}
20000e34:	bf00      	nop
20000e36:	3714      	adds	r7, #20
20000e38:	46bd      	mov	sp, r7
20000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
20000e3e:	4770      	bx	lr
20000e40:	4001381c 	.word	0x4001381c
20000e44:	40013828 	.word	0x40013828

20000e48 <poll_for_input>:
char getc(); // Function to get a character from USART

#define BUFFER_SIZE 100


void poll_for_input(char *buffer, int size) {
20000e48:	b580      	push	{r7, lr}
20000e4a:	b084      	sub	sp, #16
20000e4c:	af00      	add	r7, sp, #0
20000e4e:	6078      	str	r0, [r7, #4]
20000e50:	6039      	str	r1, [r7, #0]
    int index = 0;
20000e52:	2300      	movs	r3, #0
20000e54:	60fb      	str	r3, [r7, #12]
    char ch;

    printf("STS>");
20000e56:	4822      	ldr	r0, [pc, #136]	@ (20000ee0 <poll_for_input+0x98>)
20000e58:	f7ff ff94 	bl	20000d84 <printf>

    while (1) {
        ch = getc();
20000e5c:	f000 f868 	bl	20000f30 <getc>
20000e60:	4603      	mov	r3, r0
20000e62:	72fb      	strb	r3, [r7, #11]
        if (ch == '\r' || ch == '\n') {
20000e64:	7afb      	ldrb	r3, [r7, #11]
20000e66:	2b0d      	cmp	r3, #13
20000e68:	d002      	beq.n	20000e70 <poll_for_input+0x28>
20000e6a:	7afb      	ldrb	r3, [r7, #11]
20000e6c:	2b0a      	cmp	r3, #10
20000e6e:	d113      	bne.n	20000e98 <poll_for_input+0x50>

			if (index == 0) {
20000e70:	68fb      	ldr	r3, [r7, #12]
20000e72:	2b00      	cmp	r3, #0
20000e74:	d106      	bne.n	20000e84 <poll_for_input+0x3c>
				printf("\n");
20000e76:	481b      	ldr	r0, [pc, #108]	@ (20000ee4 <poll_for_input+0x9c>)
20000e78:	f7ff ff84 	bl	20000d84 <printf>
				printf("STS> ");
20000e7c:	481a      	ldr	r0, [pc, #104]	@ (20000ee8 <poll_for_input+0xa0>)
20000e7e:	f7ff ff81 	bl	20000d84 <printf>
				continue;
20000e82:	e027      	b.n	20000ed4 <poll_for_input+0x8c>
			}
            buffer[index] = '\0';
20000e84:	68fb      	ldr	r3, [r7, #12]
20000e86:	687a      	ldr	r2, [r7, #4]
20000e88:	4413      	add	r3, r2
20000e8a:	2200      	movs	r2, #0
20000e8c:	701a      	strb	r2, [r3, #0]
            printf("\nCaptured command: '%s'\n", buffer);
20000e8e:	6879      	ldr	r1, [r7, #4]
20000e90:	4816      	ldr	r0, [pc, #88]	@ (20000eec <poll_for_input+0xa4>)
20000e92:	f7ff ff77 	bl	20000d84 <printf>
            break;
20000e96:	e01e      	b.n	20000ed6 <poll_for_input+0x8e>
        } else if (ch == '\b' && index > 0) {
20000e98:	7afb      	ldrb	r3, [r7, #11]
20000e9a:	2b08      	cmp	r3, #8
20000e9c:	d109      	bne.n	20000eb2 <poll_for_input+0x6a>
20000e9e:	68fb      	ldr	r3, [r7, #12]
20000ea0:	2b00      	cmp	r3, #0
20000ea2:	dd06      	ble.n	20000eb2 <poll_for_input+0x6a>
            index--;
20000ea4:	68fb      	ldr	r3, [r7, #12]
20000ea6:	3b01      	subs	r3, #1
20000ea8:	60fb      	str	r3, [r7, #12]
            printf("\b \b");
20000eaa:	4811      	ldr	r0, [pc, #68]	@ (20000ef0 <poll_for_input+0xa8>)
20000eac:	f7ff ff6a 	bl	20000d84 <printf>
20000eb0:	e010      	b.n	20000ed4 <poll_for_input+0x8c>
        } else if (index < size - 1) {
20000eb2:	683b      	ldr	r3, [r7, #0]
20000eb4:	3b01      	subs	r3, #1
20000eb6:	68fa      	ldr	r2, [r7, #12]
20000eb8:	429a      	cmp	r2, r3
20000eba:	dacf      	bge.n	20000e5c <poll_for_input+0x14>
            buffer[index++] = ch;
20000ebc:	68fb      	ldr	r3, [r7, #12]
20000ebe:	1c5a      	adds	r2, r3, #1
20000ec0:	60fa      	str	r2, [r7, #12]
20000ec2:	461a      	mov	r2, r3
20000ec4:	687b      	ldr	r3, [r7, #4]
20000ec6:	4413      	add	r3, r2
20000ec8:	7afa      	ldrb	r2, [r7, #11]
20000eca:	701a      	strb	r2, [r3, #0]
            putc(ch);
20000ecc:	7afb      	ldrb	r3, [r7, #11]
20000ece:	4618      	mov	r0, r3
20000ed0:	f7ff ff90 	bl	20000df4 <putc>
        ch = getc();
20000ed4:	e7c2      	b.n	20000e5c <poll_for_input+0x14>
        }
    }
}
20000ed6:	bf00      	nop
20000ed8:	3710      	adds	r7, #16
20000eda:	46bd      	mov	sp, r7
20000edc:	bd80      	pop	{r7, pc}
20000ede:	bf00      	nop
20000ee0:	200023b0 	.word	0x200023b0
20000ee4:	200023b8 	.word	0x200023b8
20000ee8:	200023bc 	.word	0x200023bc
20000eec:	200023c4 	.word	0x200023c4
20000ef0:	200023e0 	.word	0x200023e0

20000ef4 <sts_main>:

void sts_main(int a, int b) {
20000ef4:	b580      	push	{r7, lr}
20000ef6:	b09c      	sub	sp, #112	@ 0x70
20000ef8:	af00      	add	r7, sp, #0
20000efa:	6078      	str	r0, [r7, #4]
20000efc:	6039      	str	r1, [r7, #0]
    char input_buffer[BUFFER_SIZE];
    printf("STS Silicon Testing Software type help to see list of available commands\n");
20000efe:	480a      	ldr	r0, [pc, #40]	@ (20000f28 <sts_main+0x34>)
20000f00:	f7ff ff40 	bl	20000d84 <printf>

    register_ui_commands();
20000f04:	f000 f866 	bl	20000fd4 <register_ui_commands>
	while(1){

		poll_for_input(input_buffer, BUFFER_SIZE);
20000f08:	f107 030c 	add.w	r3, r7, #12
20000f0c:	2164      	movs	r1, #100	@ 0x64
20000f0e:	4618      	mov	r0, r3
20000f10:	f7ff ff9a 	bl	20000e48 <poll_for_input>


		//printf("\nYou entered: %s\n", input_buffer);

		execute_command(input_buffer);
20000f14:	f107 030c 	add.w	r3, r7, #12
20000f18:	4618      	mov	r0, r3
20000f1a:	f000 f947 	bl	200011ac <execute_command>

		printf("\n");
20000f1e:	4803      	ldr	r0, [pc, #12]	@ (20000f2c <sts_main+0x38>)
20000f20:	f7ff ff30 	bl	20000d84 <printf>
	while(1){
20000f24:	bf00      	nop
20000f26:	e7ef      	b.n	20000f08 <sts_main+0x14>
20000f28:	200023e4 	.word	0x200023e4
20000f2c:	200023b8 	.word	0x200023b8

20000f30 <getc>:
	}

}


char getc() {
20000f30:	b480      	push	{r7}
20000f32:	b083      	sub	sp, #12
20000f34:	af00      	add	r7, sp, #0
    volatile uint32_t *usart_isr = (volatile uint32_t *)(0x40013800 + 0x1C);
20000f36:	4b0a      	ldr	r3, [pc, #40]	@ (20000f60 <getc+0x30>)
20000f38:	607b      	str	r3, [r7, #4]
    volatile uint32_t *usart_rdr = (volatile uint32_t *)(0x40013800 + 0x24);
20000f3a:	4b0a      	ldr	r3, [pc, #40]	@ (20000f64 <getc+0x34>)
20000f3c:	603b      	str	r3, [r7, #0]


    while ((*usart_isr & (1 << 5)) == 0);
20000f3e:	bf00      	nop
20000f40:	687b      	ldr	r3, [r7, #4]
20000f42:	681b      	ldr	r3, [r3, #0]
20000f44:	f003 0320 	and.w	r3, r3, #32
20000f48:	2b00      	cmp	r3, #0
20000f4a:	d0f9      	beq.n	20000f40 <getc+0x10>

    return (char)(*usart_rdr & 0xFF);
20000f4c:	683b      	ldr	r3, [r7, #0]
20000f4e:	681b      	ldr	r3, [r3, #0]
20000f50:	b2db      	uxtb	r3, r3
}
20000f52:	4618      	mov	r0, r3
20000f54:	370c      	adds	r7, #12
20000f56:	46bd      	mov	sp, r7
20000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
20000f5c:	4770      	bx	lr
20000f5e:	bf00      	nop
20000f60:	4001381c 	.word	0x4001381c
20000f64:	40013824 	.word	0x40013824

20000f68 <add_cmd>:

#define MAX_COMMANDS 50
CommandWithArgs command_list[MAX_COMMANDS];
int command_count = 0;

int add_cmd(const char *name, void (*function)(int argc, char *argv[]), const char *description) {
20000f68:	b480      	push	{r7}
20000f6a:	b085      	sub	sp, #20
20000f6c:	af00      	add	r7, sp, #0
20000f6e:	60f8      	str	r0, [r7, #12]
20000f70:	60b9      	str	r1, [r7, #8]
20000f72:	607a      	str	r2, [r7, #4]
    command_list[command_count].name = name;
20000f74:	4b15      	ldr	r3, [pc, #84]	@ (20000fcc <add_cmd+0x64>)
20000f76:	681a      	ldr	r2, [r3, #0]
20000f78:	4915      	ldr	r1, [pc, #84]	@ (20000fd0 <add_cmd+0x68>)
20000f7a:	4613      	mov	r3, r2
20000f7c:	005b      	lsls	r3, r3, #1
20000f7e:	4413      	add	r3, r2
20000f80:	009b      	lsls	r3, r3, #2
20000f82:	440b      	add	r3, r1
20000f84:	68fa      	ldr	r2, [r7, #12]
20000f86:	601a      	str	r2, [r3, #0]
    command_list[command_count].function = function;
20000f88:	4b10      	ldr	r3, [pc, #64]	@ (20000fcc <add_cmd+0x64>)
20000f8a:	681a      	ldr	r2, [r3, #0]
20000f8c:	4910      	ldr	r1, [pc, #64]	@ (20000fd0 <add_cmd+0x68>)
20000f8e:	4613      	mov	r3, r2
20000f90:	005b      	lsls	r3, r3, #1
20000f92:	4413      	add	r3, r2
20000f94:	009b      	lsls	r3, r3, #2
20000f96:	440b      	add	r3, r1
20000f98:	3304      	adds	r3, #4
20000f9a:	68ba      	ldr	r2, [r7, #8]
20000f9c:	601a      	str	r2, [r3, #0]
    command_list[command_count].description = description;
20000f9e:	4b0b      	ldr	r3, [pc, #44]	@ (20000fcc <add_cmd+0x64>)
20000fa0:	681a      	ldr	r2, [r3, #0]
20000fa2:	490b      	ldr	r1, [pc, #44]	@ (20000fd0 <add_cmd+0x68>)
20000fa4:	4613      	mov	r3, r2
20000fa6:	005b      	lsls	r3, r3, #1
20000fa8:	4413      	add	r3, r2
20000faa:	009b      	lsls	r3, r3, #2
20000fac:	440b      	add	r3, r1
20000fae:	3308      	adds	r3, #8
20000fb0:	687a      	ldr	r2, [r7, #4]
20000fb2:	601a      	str	r2, [r3, #0]
    command_count++;
20000fb4:	4b05      	ldr	r3, [pc, #20]	@ (20000fcc <add_cmd+0x64>)
20000fb6:	681b      	ldr	r3, [r3, #0]
20000fb8:	3301      	adds	r3, #1
20000fba:	4a04      	ldr	r2, [pc, #16]	@ (20000fcc <add_cmd+0x64>)
20000fbc:	6013      	str	r3, [r2, #0]

    return 0;
20000fbe:	2300      	movs	r3, #0
}
20000fc0:	4618      	mov	r0, r3
20000fc2:	3714      	adds	r7, #20
20000fc4:	46bd      	mov	sp, r7
20000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
20000fca:	4770      	bx	lr
20000fcc:	20002cf0 	.word	0x20002cf0
20000fd0:	20002a98 	.word	0x20002a98

20000fd4 <register_ui_commands>:

void register_ui_commands() {
20000fd4:	b580      	push	{r7, lr}
20000fd6:	af00      	add	r7, sp, #0
    add_cmd("simple", simple_command, "Executes a simple command.");
20000fd8:	4a26      	ldr	r2, [pc, #152]	@ (20001074 <register_ui_commands+0xa0>)
20000fda:	4927      	ldr	r1, [pc, #156]	@ (20001078 <register_ui_commands+0xa4>)
20000fdc:	4827      	ldr	r0, [pc, #156]	@ (2000107c <register_ui_commands+0xa8>)
20000fde:	f7ff ffc3 	bl	20000f68 <add_cmd>
    add_cmd("help", help_command, "Displays help information.");
20000fe2:	4a27      	ldr	r2, [pc, #156]	@ (20001080 <register_ui_commands+0xac>)
20000fe4:	4927      	ldr	r1, [pc, #156]	@ (20001084 <register_ui_commands+0xb0>)
20000fe6:	4828      	ldr	r0, [pc, #160]	@ (20001088 <register_ui_commands+0xb4>)
20000fe8:	f7ff ffbe 	bl	20000f68 <add_cmd>
    add_cmd("display", ui_cmd_display, "Displays memory contents.");
20000fec:	4a27      	ldr	r2, [pc, #156]	@ (2000108c <register_ui_commands+0xb8>)
20000fee:	4928      	ldr	r1, [pc, #160]	@ (20001090 <register_ui_commands+0xbc>)
20000ff0:	4828      	ldr	r0, [pc, #160]	@ (20001094 <register_ui_commands+0xc0>)
20000ff2:	f7ff ffb9 	bl	20000f68 <add_cmd>
    add_cmd("edit", ui_cmd_edit, "Edits a memory location.");
20000ff6:	4a28      	ldr	r2, [pc, #160]	@ (20001098 <register_ui_commands+0xc4>)
20000ff8:	4928      	ldr	r1, [pc, #160]	@ (2000109c <register_ui_commands+0xc8>)
20000ffa:	4829      	ldr	r0, [pc, #164]	@ (200010a0 <register_ui_commands+0xcc>)
20000ffc:	f7ff ffb4 	bl	20000f68 <add_cmd>
    add_cmd("ledr", LEDR_Init, "Red LED.");
20001000:	4a28      	ldr	r2, [pc, #160]	@ (200010a4 <register_ui_commands+0xd0>)
20001002:	4929      	ldr	r1, [pc, #164]	@ (200010a8 <register_ui_commands+0xd4>)
20001004:	4829      	ldr	r0, [pc, #164]	@ (200010ac <register_ui_commands+0xd8>)
20001006:	f7ff ffaf 	bl	20000f68 <add_cmd>
    add_cmd("i2c", ui_cmd_I2C, "Executes an I2C command.");
2000100a:	4a29      	ldr	r2, [pc, #164]	@ (200010b0 <register_ui_commands+0xdc>)
2000100c:	4929      	ldr	r1, [pc, #164]	@ (200010b4 <register_ui_commands+0xe0>)
2000100e:	482a      	ldr	r0, [pc, #168]	@ (200010b8 <register_ui_commands+0xe4>)
20001010:	f7ff ffaa 	bl	20000f68 <add_cmd>
    add_cmd("joystick", ui_cmd_joystick, "Handles joystick input.");
20001014:	4a29      	ldr	r2, [pc, #164]	@ (200010bc <register_ui_commands+0xe8>)
20001016:	492a      	ldr	r1, [pc, #168]	@ (200010c0 <register_ui_commands+0xec>)
20001018:	482a      	ldr	r0, [pc, #168]	@ (200010c4 <register_ui_commands+0xf0>)
2000101a:	f7ff ffa5 	bl	20000f68 <add_cmd>
    add_cmd("uart", uart_handler, "Handles UART communication.");
2000101e:	4a2a      	ldr	r2, [pc, #168]	@ (200010c8 <register_ui_commands+0xf4>)
20001020:	492a      	ldr	r1, [pc, #168]	@ (200010cc <register_ui_commands+0xf8>)
20001022:	482b      	ldr	r0, [pc, #172]	@ (200010d0 <register_ui_commands+0xfc>)
20001024:	f7ff ffa0 	bl	20000f68 <add_cmd>
    add_cmd("i2cwrite", ui_cmd_write_I2C, "Writes to I2C.");
20001028:	4a2a      	ldr	r2, [pc, #168]	@ (200010d4 <register_ui_commands+0x100>)
2000102a:	492b      	ldr	r1, [pc, #172]	@ (200010d8 <register_ui_commands+0x104>)
2000102c:	482b      	ldr	r0, [pc, #172]	@ (200010dc <register_ui_commands+0x108>)
2000102e:	f7ff ff9b 	bl	20000f68 <add_cmd>
    add_cmd("measureclock", ui_clock_measure, "measure clock" );
20001032:	4a2b      	ldr	r2, [pc, #172]	@ (200010e0 <register_ui_commands+0x10c>)
20001034:	492b      	ldr	r1, [pc, #172]	@ (200010e4 <register_ui_commands+0x110>)
20001036:	482c      	ldr	r0, [pc, #176]	@ (200010e8 <register_ui_commands+0x114>)
20001038:	f7ff ff96 	bl	20000f68 <add_cmd>
    add_cmd("ledg", ui_cmd_LEDG, "Green LED" );
2000103c:	4a2b      	ldr	r2, [pc, #172]	@ (200010ec <register_ui_commands+0x118>)
2000103e:	492c      	ldr	r1, [pc, #176]	@ (200010f0 <register_ui_commands+0x11c>)
20001040:	482c      	ldr	r0, [pc, #176]	@ (200010f4 <register_ui_commands+0x120>)
20001042:	f7ff ff91 	bl	20000f68 <add_cmd>
    add_cmd("cm", ui_CM, "measure clock" );
20001046:	4a26      	ldr	r2, [pc, #152]	@ (200010e0 <register_ui_commands+0x10c>)
20001048:	492b      	ldr	r1, [pc, #172]	@ (200010f8 <register_ui_commands+0x124>)
2000104a:	482c      	ldr	r0, [pc, #176]	@ (200010fc <register_ui_commands+0x128>)
2000104c:	f7ff ff8c 	bl	20000f68 <add_cmd>
    add_cmd("systick", SysTick_Init, "systick init" );
20001050:	4a2b      	ldr	r2, [pc, #172]	@ (20001100 <register_ui_commands+0x12c>)
20001052:	492c      	ldr	r1, [pc, #176]	@ (20001104 <register_ui_commands+0x130>)
20001054:	482c      	ldr	r0, [pc, #176]	@ (20001108 <register_ui_commands+0x134>)
20001056:	f7ff ff87 	bl	20000f68 <add_cmd>
    add_cmd("joystick_INT", i2c_joystick_handler, "joystick intertupt" );
2000105a:	4a2c      	ldr	r2, [pc, #176]	@ (2000110c <register_ui_commands+0x138>)
2000105c:	492c      	ldr	r1, [pc, #176]	@ (20001110 <register_ui_commands+0x13c>)
2000105e:	482d      	ldr	r0, [pc, #180]	@ (20001114 <register_ui_commands+0x140>)
20001060:	f7ff ff82 	bl	20000f68 <add_cmd>
    add_cmd("codetest", codetest, "testing functions" );
20001064:	4a2c      	ldr	r2, [pc, #176]	@ (20001118 <register_ui_commands+0x144>)
20001066:	492d      	ldr	r1, [pc, #180]	@ (2000111c <register_ui_commands+0x148>)
20001068:	482d      	ldr	r0, [pc, #180]	@ (20001120 <register_ui_commands+0x14c>)
2000106a:	f7ff ff7d 	bl	20000f68 <add_cmd>
}
2000106e:	bf00      	nop
20001070:	bd80      	pop	{r7, pc}
20001072:	bf00      	nop
20001074:	20002430 	.word	0x20002430
20001078:	200012b1 	.word	0x200012b1
2000107c:	2000244c 	.word	0x2000244c
20001080:	20002454 	.word	0x20002454
20001084:	200012f5 	.word	0x200012f5
20001088:	20002470 	.word	0x20002470
2000108c:	20002478 	.word	0x20002478
20001090:	20001361 	.word	0x20001361
20001094:	20002494 	.word	0x20002494
20001098:	2000249c 	.word	0x2000249c
2000109c:	200013c1 	.word	0x200013c1
200010a0:	200024b8 	.word	0x200024b8
200010a4:	200024c0 	.word	0x200024c0
200010a8:	2000142d 	.word	0x2000142d
200010ac:	200024cc 	.word	0x200024cc
200010b0:	200024d4 	.word	0x200024d4
200010b4:	20001811 	.word	0x20001811
200010b8:	200024f0 	.word	0x200024f0
200010bc:	200024f4 	.word	0x200024f4
200010c0:	20001ba9 	.word	0x20001ba9
200010c4:	2000250c 	.word	0x2000250c
200010c8:	20002518 	.word	0x20002518
200010cc:	20001f09 	.word	0x20001f09
200010d0:	20002534 	.word	0x20002534
200010d4:	2000253c 	.word	0x2000253c
200010d8:	20001a79 	.word	0x20001a79
200010dc:	2000254c 	.word	0x2000254c
200010e0:	20002558 	.word	0x20002558
200010e4:	20001f71 	.word	0x20001f71
200010e8:	20002568 	.word	0x20002568
200010ec:	20002578 	.word	0x20002578
200010f0:	20001535 	.word	0x20001535
200010f4:	20002584 	.word	0x20002584
200010f8:	20002069 	.word	0x20002069
200010fc:	2000258c 	.word	0x2000258c
20001100:	20002590 	.word	0x20002590
20001104:	20002111 	.word	0x20002111
20001108:	200025a0 	.word	0x200025a0
2000110c:	200025a8 	.word	0x200025a8
20001110:	20001e75 	.word	0x20001e75
20001114:	200025bc 	.word	0x200025bc
20001118:	200025cc 	.word	0x200025cc
2000111c:	20001e31 	.word	0x20001e31
20001120:	200025e0 	.word	0x200025e0

20001124 <split_string>:


#define COMMAND_COUNT (sizeof(command_list) / sizeof(CommandWithArgs))


char* split_string(char* str, char delimiter, int* current_position) {
20001124:	b480      	push	{r7}
20001126:	b087      	sub	sp, #28
20001128:	af00      	add	r7, sp, #0
2000112a:	60f8      	str	r0, [r7, #12]
2000112c:	460b      	mov	r3, r1
2000112e:	607a      	str	r2, [r7, #4]
20001130:	72fb      	strb	r3, [r7, #11]
    if (str[*current_position] == '\0') {
20001132:	687b      	ldr	r3, [r7, #4]
20001134:	681b      	ldr	r3, [r3, #0]
20001136:	461a      	mov	r2, r3
20001138:	68fb      	ldr	r3, [r7, #12]
2000113a:	4413      	add	r3, r2
2000113c:	781b      	ldrb	r3, [r3, #0]
2000113e:	2b00      	cmp	r3, #0
20001140:	d101      	bne.n	20001146 <split_string+0x22>
        return NULL;
20001142:	2300      	movs	r3, #0
20001144:	e02b      	b.n	2000119e <split_string+0x7a>
    }

    char* token = &str[*current_position];
20001146:	687b      	ldr	r3, [r7, #4]
20001148:	681b      	ldr	r3, [r3, #0]
2000114a:	461a      	mov	r2, r3
2000114c:	68fb      	ldr	r3, [r7, #12]
2000114e:	4413      	add	r3, r2
20001150:	617b      	str	r3, [r7, #20]
    while (str[*current_position] != '\0') {
20001152:	e01b      	b.n	2000118c <split_string+0x68>
        if (str[*current_position] == delimiter) {
20001154:	687b      	ldr	r3, [r7, #4]
20001156:	681b      	ldr	r3, [r3, #0]
20001158:	461a      	mov	r2, r3
2000115a:	68fb      	ldr	r3, [r7, #12]
2000115c:	4413      	add	r3, r2
2000115e:	781b      	ldrb	r3, [r3, #0]
20001160:	7afa      	ldrb	r2, [r7, #11]
20001162:	429a      	cmp	r2, r3
20001164:	d10d      	bne.n	20001182 <split_string+0x5e>
            str[*current_position] = '\0';
20001166:	687b      	ldr	r3, [r7, #4]
20001168:	681b      	ldr	r3, [r3, #0]
2000116a:	461a      	mov	r2, r3
2000116c:	68fb      	ldr	r3, [r7, #12]
2000116e:	4413      	add	r3, r2
20001170:	2200      	movs	r2, #0
20001172:	701a      	strb	r2, [r3, #0]
            (*current_position)++;
20001174:	687b      	ldr	r3, [r7, #4]
20001176:	681b      	ldr	r3, [r3, #0]
20001178:	1c5a      	adds	r2, r3, #1
2000117a:	687b      	ldr	r3, [r7, #4]
2000117c:	601a      	str	r2, [r3, #0]
            return token;
2000117e:	697b      	ldr	r3, [r7, #20]
20001180:	e00d      	b.n	2000119e <split_string+0x7a>
        }
        (*current_position)++;
20001182:	687b      	ldr	r3, [r7, #4]
20001184:	681b      	ldr	r3, [r3, #0]
20001186:	1c5a      	adds	r2, r3, #1
20001188:	687b      	ldr	r3, [r7, #4]
2000118a:	601a      	str	r2, [r3, #0]
    while (str[*current_position] != '\0') {
2000118c:	687b      	ldr	r3, [r7, #4]
2000118e:	681b      	ldr	r3, [r3, #0]
20001190:	461a      	mov	r2, r3
20001192:	68fb      	ldr	r3, [r7, #12]
20001194:	4413      	add	r3, r2
20001196:	781b      	ldrb	r3, [r3, #0]
20001198:	2b00      	cmp	r3, #0
2000119a:	d1db      	bne.n	20001154 <split_string+0x30>
    }

    return token;
2000119c:	697b      	ldr	r3, [r7, #20]
}
2000119e:	4618      	mov	r0, r3
200011a0:	371c      	adds	r7, #28
200011a2:	46bd      	mov	sp, r7
200011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
200011a8:	4770      	bx	lr
	...

200011ac <execute_command>:


void execute_command(char *input_buffer) {
200011ac:	b580      	push	{r7, lr}
200011ae:	b0ea      	sub	sp, #424	@ 0x1a8
200011b0:	af00      	add	r7, sp, #0
200011b2:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
200011b6:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
200011ba:	6018      	str	r0, [r3, #0]
    char *argv[BUFFER_SIZE];
    int argc = 0;
200011bc:	2300      	movs	r3, #0
200011be:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    int current_position = 0;
200011c2:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
200011c6:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
200011ca:	2200      	movs	r2, #0
200011cc:	601a      	str	r2, [r3, #0]

    char *token = split_string(input_buffer, ' ', &current_position);
200011ce:	f107 0208 	add.w	r2, r7, #8
200011d2:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
200011d6:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
200011da:	2120      	movs	r1, #32
200011dc:	6818      	ldr	r0, [r3, #0]
200011de:	f7ff ffa1 	bl	20001124 <split_string>
200011e2:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0
    while (token != NULL && argc < BUFFER_SIZE) {
200011e6:	e018      	b.n	2000121a <execute_command+0x6e>
        argv[argc++] = token;
200011e8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
200011ec:	1c5a      	adds	r2, r3, #1
200011ee:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
200011f2:	f507 72d4 	add.w	r2, r7, #424	@ 0x1a8
200011f6:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
200011fa:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
200011fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        token = split_string(input_buffer, ' ', &current_position);
20001202:	f107 0208 	add.w	r2, r7, #8
20001206:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
2000120a:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
2000120e:	2120      	movs	r1, #32
20001210:	6818      	ldr	r0, [r3, #0]
20001212:	f7ff ff87 	bl	20001124 <split_string>
20001216:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0
    while (token != NULL && argc < BUFFER_SIZE) {
2000121a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
2000121e:	2b00      	cmp	r3, #0
20001220:	d003      	beq.n	2000122a <execute_command+0x7e>
20001222:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
20001226:	2b63      	cmp	r3, #99	@ 0x63
20001228:	ddde      	ble.n	200011e8 <execute_command+0x3c>
    }

    for (int i = 0; i < COMMAND_COUNT; i++) {
2000122a:	2300      	movs	r3, #0
2000122c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
20001230:	e029      	b.n	20001286 <execute_command+0xda>
        if (strcmp(argv[0], command_list[i].name) == 0) {
20001232:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
20001236:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
2000123a:	6818      	ldr	r0, [r3, #0]
2000123c:	491a      	ldr	r1, [pc, #104]	@ (200012a8 <execute_command+0xfc>)
2000123e:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
20001242:	4613      	mov	r3, r2
20001244:	005b      	lsls	r3, r3, #1
20001246:	4413      	add	r3, r2
20001248:	009b      	lsls	r3, r3, #2
2000124a:	440b      	add	r3, r1
2000124c:	681b      	ldr	r3, [r3, #0]
2000124e:	4619      	mov	r1, r3
20001250:	f7fe ff9c 	bl	2000018c <strcmp>
20001254:	4603      	mov	r3, r0
20001256:	2b00      	cmp	r3, #0
20001258:	d110      	bne.n	2000127c <execute_command+0xd0>
            command_list[i].function(argc, argv);
2000125a:	4913      	ldr	r1, [pc, #76]	@ (200012a8 <execute_command+0xfc>)
2000125c:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
20001260:	4613      	mov	r3, r2
20001262:	005b      	lsls	r3, r3, #1
20001264:	4413      	add	r3, r2
20001266:	009b      	lsls	r3, r3, #2
20001268:	440b      	add	r3, r1
2000126a:	3304      	adds	r3, #4
2000126c:	681b      	ldr	r3, [r3, #0]
2000126e:	f107 020c 	add.w	r2, r7, #12
20001272:	4611      	mov	r1, r2
20001274:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
20001278:	4798      	blx	r3
2000127a:	e011      	b.n	200012a0 <execute_command+0xf4>
    for (int i = 0; i < COMMAND_COUNT; i++) {
2000127c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
20001280:	3301      	adds	r3, #1
20001282:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
20001286:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
2000128a:	2b31      	cmp	r3, #49	@ 0x31
2000128c:	d9d1      	bls.n	20001232 <execute_command+0x86>
            return;
        }
    }
    printf("Unknown command: %s\n", argv[0]);
2000128e:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
20001292:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
20001296:	681b      	ldr	r3, [r3, #0]
20001298:	4619      	mov	r1, r3
2000129a:	4804      	ldr	r0, [pc, #16]	@ (200012ac <execute_command+0x100>)
2000129c:	f7ff fd72 	bl	20000d84 <printf>
}
200012a0:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
200012a4:	46bd      	mov	sp, r7
200012a6:	bd80      	pop	{r7, pc}
200012a8:	20002a98 	.word	0x20002a98
200012ac:	200025ec 	.word	0x200025ec

200012b0 <simple_command>:


void simple_command(int argc, char *argv[]) {
200012b0:	b580      	push	{r7, lr}
200012b2:	b082      	sub	sp, #8
200012b4:	af00      	add	r7, sp, #0
200012b6:	6078      	str	r0, [r7, #4]
200012b8:	6039      	str	r1, [r7, #0]
    printf("Executing simple command.\n");
200012ba:	480c      	ldr	r0, [pc, #48]	@ (200012ec <simple_command+0x3c>)
200012bc:	f7ff fd62 	bl	20000d84 <printf>
    if (argc > 1) {
200012c0:	687b      	ldr	r3, [r7, #4]
200012c2:	2b01      	cmp	r3, #1
200012c4:	dd0d      	ble.n	200012e2 <simple_command+0x32>
        printf("Argument: %s\n", argv[1]);
200012c6:	683b      	ldr	r3, [r7, #0]
200012c8:	3304      	adds	r3, #4
200012ca:	681b      	ldr	r3, [r3, #0]
200012cc:	4619      	mov	r1, r3
200012ce:	4808      	ldr	r0, [pc, #32]	@ (200012f0 <simple_command+0x40>)
200012d0:	f7ff fd58 	bl	20000d84 <printf>
        printf("Argument: %s\n", argv[2]);
200012d4:	683b      	ldr	r3, [r7, #0]
200012d6:	3308      	adds	r3, #8
200012d8:	681b      	ldr	r3, [r3, #0]
200012da:	4619      	mov	r1, r3
200012dc:	4804      	ldr	r0, [pc, #16]	@ (200012f0 <simple_command+0x40>)
200012de:	f7ff fd51 	bl	20000d84 <printf>

    }
}
200012e2:	bf00      	nop
200012e4:	3708      	adds	r7, #8
200012e6:	46bd      	mov	sp, r7
200012e8:	bd80      	pop	{r7, pc}
200012ea:	bf00      	nop
200012ec:	20002604 	.word	0x20002604
200012f0:	20002620 	.word	0x20002620

200012f4 <help_command>:

void help_command(int argc, char *argv[]) {
200012f4:	b580      	push	{r7, lr}
200012f6:	b084      	sub	sp, #16
200012f8:	af00      	add	r7, sp, #0
200012fa:	6078      	str	r0, [r7, #4]
200012fc:	6039      	str	r1, [r7, #0]
    printf("Available commands:\n");
200012fe:	4814      	ldr	r0, [pc, #80]	@ (20001350 <help_command+0x5c>)
20001300:	f7ff fd40 	bl	20000d84 <printf>
    for (int i = 0; i < command_count; i++) {
20001304:	2300      	movs	r3, #0
20001306:	60fb      	str	r3, [r7, #12]
20001308:	e017      	b.n	2000133a <help_command+0x46>
        printf("- %s: %s\n", command_list[i].name, command_list[i].description);
2000130a:	4912      	ldr	r1, [pc, #72]	@ (20001354 <help_command+0x60>)
2000130c:	68fa      	ldr	r2, [r7, #12]
2000130e:	4613      	mov	r3, r2
20001310:	005b      	lsls	r3, r3, #1
20001312:	4413      	add	r3, r2
20001314:	009b      	lsls	r3, r3, #2
20001316:	440b      	add	r3, r1
20001318:	6819      	ldr	r1, [r3, #0]
2000131a:	480e      	ldr	r0, [pc, #56]	@ (20001354 <help_command+0x60>)
2000131c:	68fa      	ldr	r2, [r7, #12]
2000131e:	4613      	mov	r3, r2
20001320:	005b      	lsls	r3, r3, #1
20001322:	4413      	add	r3, r2
20001324:	009b      	lsls	r3, r3, #2
20001326:	4403      	add	r3, r0
20001328:	3308      	adds	r3, #8
2000132a:	681b      	ldr	r3, [r3, #0]
2000132c:	461a      	mov	r2, r3
2000132e:	480a      	ldr	r0, [pc, #40]	@ (20001358 <help_command+0x64>)
20001330:	f7ff fd28 	bl	20000d84 <printf>
    for (int i = 0; i < command_count; i++) {
20001334:	68fb      	ldr	r3, [r7, #12]
20001336:	3301      	adds	r3, #1
20001338:	60fb      	str	r3, [r7, #12]
2000133a:	4b08      	ldr	r3, [pc, #32]	@ (2000135c <help_command+0x68>)
2000133c:	681b      	ldr	r3, [r3, #0]
2000133e:	68fa      	ldr	r2, [r7, #12]
20001340:	429a      	cmp	r2, r3
20001342:	dbe2      	blt.n	2000130a <help_command+0x16>
    }
}
20001344:	bf00      	nop
20001346:	bf00      	nop
20001348:	3710      	adds	r7, #16
2000134a:	46bd      	mov	sp, r7
2000134c:	bd80      	pop	{r7, pc}
2000134e:	bf00      	nop
20001350:	20002630 	.word	0x20002630
20001354:	20002a98 	.word	0x20002a98
20001358:	20002648 	.word	0x20002648
2000135c:	20002cf0 	.word	0x20002cf0

20001360 <ui_cmd_display>:

#include <stdint.h>
void ui_cmd_display(int argc, char *argv[]) {
20001360:	b580      	push	{r7, lr}
20001362:	b088      	sub	sp, #32
20001364:	af00      	add	r7, sp, #0
20001366:	6078      	str	r0, [r7, #4]
20001368:	6039      	str	r1, [r7, #0]

    printf("Printing out Memory Contents:\n");
2000136a:	4813      	ldr	r0, [pc, #76]	@ (200013b8 <ui_cmd_display+0x58>)
2000136c:	f7ff fd0a 	bl	20000d84 <printf>

    char *addr_str = argv[1];
20001370:	683b      	ldr	r3, [r7, #0]
20001372:	685b      	ldr	r3, [r3, #4]
20001374:	61bb      	str	r3, [r7, #24]
    uint32_t address = (uint32_t)strtoul(addr_str, NULL, 0);
20001376:	2200      	movs	r2, #0
20001378:	2100      	movs	r1, #0
2000137a:	69b8      	ldr	r0, [r7, #24]
2000137c:	f000 ffee 	bl	2000235c <strtoul>
20001380:	4603      	mov	r3, r0
20001382:	61fb      	str	r3, [r7, #28]

    volatile uint32_t *ptr;
    uint32_t value;

    volatile uint32_t *ADDRESS_END = (uint32_t *)(address + 0x32);
20001384:	69fb      	ldr	r3, [r7, #28]
20001386:	3332      	adds	r3, #50	@ 0x32
20001388:	617b      	str	r3, [r7, #20]

    for (; address <= (uint32_t)ADDRESS_END; address += 0x4) {
2000138a:	e00c      	b.n	200013a6 <ui_cmd_display+0x46>
        ptr = (volatile uint32_t *)address;
2000138c:	69fb      	ldr	r3, [r7, #28]
2000138e:	613b      	str	r3, [r7, #16]
        value = *ptr;
20001390:	693b      	ldr	r3, [r7, #16]
20001392:	681b      	ldr	r3, [r3, #0]
20001394:	60fb      	str	r3, [r7, #12]

        printf("0x%08X: 0x%08X\n", address, value);
20001396:	68fa      	ldr	r2, [r7, #12]
20001398:	69f9      	ldr	r1, [r7, #28]
2000139a:	4808      	ldr	r0, [pc, #32]	@ (200013bc <ui_cmd_display+0x5c>)
2000139c:	f7ff fcf2 	bl	20000d84 <printf>
    for (; address <= (uint32_t)ADDRESS_END; address += 0x4) {
200013a0:	69fb      	ldr	r3, [r7, #28]
200013a2:	3304      	adds	r3, #4
200013a4:	61fb      	str	r3, [r7, #28]
200013a6:	697b      	ldr	r3, [r7, #20]
200013a8:	69fa      	ldr	r2, [r7, #28]
200013aa:	429a      	cmp	r2, r3
200013ac:	d9ee      	bls.n	2000138c <ui_cmd_display+0x2c>
    }
}
200013ae:	bf00      	nop
200013b0:	bf00      	nop
200013b2:	3720      	adds	r7, #32
200013b4:	46bd      	mov	sp, r7
200013b6:	bd80      	pop	{r7, pc}
200013b8:	20002654 	.word	0x20002654
200013bc:	20002674 	.word	0x20002674

200013c0 <ui_cmd_edit>:


void ui_cmd_edit(int argc, char *argv[])
{
200013c0:	b580      	push	{r7, lr}
200013c2:	b088      	sub	sp, #32
200013c4:	af00      	add	r7, sp, #0
200013c6:	6078      	str	r0, [r7, #4]
200013c8:	6039      	str	r1, [r7, #0]

	volatile uint32_t *ptr;
	uint32_t value;

	char *addr_str = argv[1];
200013ca:	683b      	ldr	r3, [r7, #0]
200013cc:	685b      	ldr	r3, [r3, #4]
200013ce:	61fb      	str	r3, [r7, #28]
    uint32_t address = (uint32_t)strtoul(addr_str, NULL, 0);
200013d0:	2200      	movs	r2, #0
200013d2:	2100      	movs	r1, #0
200013d4:	69f8      	ldr	r0, [r7, #28]
200013d6:	f000 ffc1 	bl	2000235c <strtoul>
200013da:	4603      	mov	r3, r0
200013dc:	61bb      	str	r3, [r7, #24]

    ptr = (volatile uint32_t *)address;
200013de:	69bb      	ldr	r3, [r7, #24]
200013e0:	617b      	str	r3, [r7, #20]
    value = *ptr;
200013e2:	697b      	ldr	r3, [r7, #20]
200013e4:	681b      	ldr	r3, [r3, #0]
200013e6:	613b      	str	r3, [r7, #16]

    printf("original value 0x%08X: 0x%08X\n", address, value);
200013e8:	693a      	ldr	r2, [r7, #16]
200013ea:	69b9      	ldr	r1, [r7, #24]
200013ec:	480d      	ldr	r0, [pc, #52]	@ (20001424 <ui_cmd_edit+0x64>)
200013ee:	f7ff fcc9 	bl	20000d84 <printf>


	char *value_str = argv[2];
200013f2:	683b      	ldr	r3, [r7, #0]
200013f4:	689b      	ldr	r3, [r3, #8]
200013f6:	60fb      	str	r3, [r7, #12]
	uint32_t value2 = (uint32_t)strtoul(value_str, NULL, 0);
200013f8:	2200      	movs	r2, #0
200013fa:	2100      	movs	r1, #0
200013fc:	68f8      	ldr	r0, [r7, #12]
200013fe:	f000 ffad 	bl	2000235c <strtoul>
20001402:	4603      	mov	r3, r0
20001404:	60bb      	str	r3, [r7, #8]




    ptr = (volatile uint32_t *)address;
20001406:	69bb      	ldr	r3, [r7, #24]
20001408:	617b      	str	r3, [r7, #20]
    *ptr = value;
2000140a:	697b      	ldr	r3, [r7, #20]
2000140c:	693a      	ldr	r2, [r7, #16]
2000140e:	601a      	str	r2, [r3, #0]

    printf("new value 0x%08X: 0x%08X\n", address, value2);
20001410:	68ba      	ldr	r2, [r7, #8]
20001412:	69b9      	ldr	r1, [r7, #24]
20001414:	4804      	ldr	r0, [pc, #16]	@ (20001428 <ui_cmd_edit+0x68>)
20001416:	f7ff fcb5 	bl	20000d84 <printf>

}
2000141a:	bf00      	nop
2000141c:	3720      	adds	r7, #32
2000141e:	46bd      	mov	sp, r7
20001420:	bd80      	pop	{r7, pc}
20001422:	bf00      	nop
20001424:	20002684 	.word	0x20002684
20001428:	200026a4 	.word	0x200026a4

2000142c <LEDR_Init>:

#define GPIOC_BASE 0x48000800

void LEDR_Init(int argc, char *argv[])

{
2000142c:	b580      	push	{r7, lr}
2000142e:	b084      	sub	sp, #16
20001430:	af00      	add	r7, sp, #0
20001432:	6078      	str	r0, [r7, #4]
20001434:	6039      	str	r1, [r7, #0]

	*(volatile uint32_t *)(0x40007004) |= 0x200;
20001436:	4b21      	ldr	r3, [pc, #132]	@ (200014bc <LEDR_Init+0x90>)
20001438:	681b      	ldr	r3, [r3, #0]
2000143a:	4a20      	ldr	r2, [pc, #128]	@ (200014bc <LEDR_Init+0x90>)
2000143c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
20001440:	6013      	str	r3, [r2, #0]



    //RCC->AHB2ENR |= (1 << 2);
    RCC->AHB2ENR |= 0xF;
20001442:	4b1f      	ldr	r3, [pc, #124]	@ (200014c0 <LEDR_Init+0x94>)
20001444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20001446:	4a1e      	ldr	r2, [pc, #120]	@ (200014c0 <LEDR_Init+0x94>)
20001448:	f043 030f 	orr.w	r3, r3, #15
2000144c:	64d3      	str	r3, [r2, #76]	@ 0x4c
    RCC->APB1ENR1 |= (1 << 28);
2000144e:	4b1c      	ldr	r3, [pc, #112]	@ (200014c0 <LEDR_Init+0x94>)
20001450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20001452:	4a1b      	ldr	r2, [pc, #108]	@ (200014c0 <LEDR_Init+0x94>)
20001454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20001458:	6593      	str	r3, [r2, #88]	@ 0x58
    //RCC->APB2ENR |= (1 << 28);
    *(volatile uint32_t *)(GPIOC_BASE) = 0x4;
2000145a:	4b1a      	ldr	r3, [pc, #104]	@ (200014c4 <LEDR_Init+0x98>)
2000145c:	2204      	movs	r2, #4
2000145e:	601a      	str	r2, [r3, #0]
    *(volatile uint32_t *)(GPIOC_BASE + 0x14) = 0x0; // turn off
20001460:	4b19      	ldr	r3, [pc, #100]	@ (200014c8 <LEDR_Init+0x9c>)
20001462:	2200      	movs	r2, #0
20001464:	601a      	str	r2, [r3, #0]

    //GPIOC->GPIOx_MODER &= ~(0x3 << (1 * 2));
    //GPIOC->GPIOx_MODER |= (0x1 << (1 * 2));

    int state = atoi(argv[1]);
20001466:	683b      	ldr	r3, [r7, #0]
20001468:	3304      	adds	r3, #4
2000146a:	681b      	ldr	r3, [r3, #0]
2000146c:	4618      	mov	r0, r3
2000146e:	f000 fe7f 	bl	20002170 <atoi>
20001472:	60f8      	str	r0, [r7, #12]
    volatile uint32_t *GPIOC_ODR = (uint32_t *)(GPIOC_BASE + 0x14);
20001474:	4b14      	ldr	r3, [pc, #80]	@ (200014c8 <LEDR_Init+0x9c>)
20001476:	60bb      	str	r3, [r7, #8]
    if (state == 1) {
20001478:	68fb      	ldr	r3, [r7, #12]
2000147a:	2b01      	cmp	r3, #1
2000147c:	d109      	bne.n	20001492 <LEDR_Init+0x66>
        GPIOC->GPIOx_ODR &= ~(1 << 1);
2000147e:	4b11      	ldr	r3, [pc, #68]	@ (200014c4 <LEDR_Init+0x98>)
20001480:	695b      	ldr	r3, [r3, #20]
20001482:	4a10      	ldr	r2, [pc, #64]	@ (200014c4 <LEDR_Init+0x98>)
20001484:	f023 0302 	bic.w	r3, r3, #2
20001488:	6153      	str	r3, [r2, #20]
        printf("LED is ON\n");
2000148a:	4810      	ldr	r0, [pc, #64]	@ (200014cc <LEDR_Init+0xa0>)
2000148c:	f7ff fc7a 	bl	20000d84 <printf>
        GPIOC->GPIOx_ODR |= (1 << 1);
        printf("LED is OFF\n");
    } else {
        printf("Invalid state. Use 0 for OFF and 1 for ON.\n");
    }
}
20001490:	e00f      	b.n	200014b2 <LEDR_Init+0x86>
    } else if (state == 0) {
20001492:	68fb      	ldr	r3, [r7, #12]
20001494:	2b00      	cmp	r3, #0
20001496:	d109      	bne.n	200014ac <LEDR_Init+0x80>
        GPIOC->GPIOx_ODR |= (1 << 1);
20001498:	4b0a      	ldr	r3, [pc, #40]	@ (200014c4 <LEDR_Init+0x98>)
2000149a:	695b      	ldr	r3, [r3, #20]
2000149c:	4a09      	ldr	r2, [pc, #36]	@ (200014c4 <LEDR_Init+0x98>)
2000149e:	f043 0302 	orr.w	r3, r3, #2
200014a2:	6153      	str	r3, [r2, #20]
        printf("LED is OFF\n");
200014a4:	480a      	ldr	r0, [pc, #40]	@ (200014d0 <LEDR_Init+0xa4>)
200014a6:	f7ff fc6d 	bl	20000d84 <printf>
}
200014aa:	e002      	b.n	200014b2 <LEDR_Init+0x86>
        printf("Invalid state. Use 0 for OFF and 1 for ON.\n");
200014ac:	4809      	ldr	r0, [pc, #36]	@ (200014d4 <LEDR_Init+0xa8>)
200014ae:	f7ff fc69 	bl	20000d84 <printf>
}
200014b2:	bf00      	nop
200014b4:	3710      	adds	r7, #16
200014b6:	46bd      	mov	sp, r7
200014b8:	bd80      	pop	{r7, pc}
200014ba:	bf00      	nop
200014bc:	40007004 	.word	0x40007004
200014c0:	40021000 	.word	0x40021000
200014c4:	48000800 	.word	0x48000800
200014c8:	48000814 	.word	0x48000814
200014cc:	200026c0 	.word	0x200026c0
200014d0:	200026cc 	.word	0x200026cc
200014d4:	200026d8 	.word	0x200026d8

200014d8 <LEDG_Init>:

void LEDG_Init(void) {
200014d8:	b480      	push	{r7}
200014da:	b083      	sub	sp, #12
200014dc:	af00      	add	r7, sp, #0

    *(volatile uint32_t *)(0x40007004) = 0x200;
200014de:	4b10      	ldr	r3, [pc, #64]	@ (20001520 <LEDG_Init+0x48>)
200014e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
200014e4:	601a      	str	r2, [r3, #0]

    volatile uint32_t *RCC_AHB2ENR = (uint32_t *)(0x40021000 + 0x4C);
200014e6:	4b0f      	ldr	r3, [pc, #60]	@ (20001524 <LEDG_Init+0x4c>)
200014e8:	607b      	str	r3, [r7, #4]
    *RCC_AHB2ENR = 0xf;
200014ea:	687b      	ldr	r3, [r7, #4]
200014ec:	220f      	movs	r2, #15
200014ee:	601a      	str	r2, [r3, #0]

    volatile uint32_t *RCC_APB1ENR1 = (uint32_t *)(0x40021000 + 0x58);
200014f0:	4b0d      	ldr	r3, [pc, #52]	@ (20001528 <LEDG_Init+0x50>)
200014f2:	603b      	str	r3, [r7, #0]
    *RCC_APB1ENR1 |= (1 << 28);
200014f4:	683b      	ldr	r3, [r7, #0]
200014f6:	681b      	ldr	r3, [r3, #0]
200014f8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
200014fc:	683b      	ldr	r3, [r7, #0]
200014fe:	601a      	str	r2, [r3, #0]


    *(volatile uint32_t *)(GPIOB_BASE + 0)  |= 0x10; //
20001500:	4b0a      	ldr	r3, [pc, #40]	@ (2000152c <LEDG_Init+0x54>)
20001502:	681b      	ldr	r3, [r3, #0]
20001504:	4a09      	ldr	r2, [pc, #36]	@ (2000152c <LEDG_Init+0x54>)
20001506:	f043 0310 	orr.w	r3, r3, #16
2000150a:	6013      	str	r3, [r2, #0]

    *(volatile uint32_t *)(GPIOB_BASE + 0x14) = 0x0;
2000150c:	4b08      	ldr	r3, [pc, #32]	@ (20001530 <LEDG_Init+0x58>)
2000150e:	2200      	movs	r2, #0
20001510:	601a      	str	r2, [r3, #0]
}
20001512:	bf00      	nop
20001514:	370c      	adds	r7, #12
20001516:	46bd      	mov	sp, r7
20001518:	f85d 7b04 	ldr.w	r7, [sp], #4
2000151c:	4770      	bx	lr
2000151e:	bf00      	nop
20001520:	40007004 	.word	0x40007004
20001524:	4002104c 	.word	0x4002104c
20001528:	40021058 	.word	0x40021058
2000152c:	48000400 	.word	0x48000400
20001530:	48000414 	.word	0x48000414

20001534 <ui_cmd_LEDG>:


static int ui_cmd_LEDG(int argc, char *argv[]) {
20001534:	b580      	push	{r7, lr}
20001536:	b084      	sub	sp, #16
20001538:	af00      	add	r7, sp, #0
2000153a:	6078      	str	r0, [r7, #4]
2000153c:	6039      	str	r1, [r7, #0]

    int state = atoi(argv[1]);
2000153e:	683b      	ldr	r3, [r7, #0]
20001540:	3304      	adds	r3, #4
20001542:	681b      	ldr	r3, [r3, #0]
20001544:	4618      	mov	r0, r3
20001546:	f000 fe13 	bl	20002170 <atoi>
2000154a:	60f8      	str	r0, [r7, #12]


    LEDG_Init();
2000154c:	f7ff ffc4 	bl	200014d8 <LEDG_Init>
    volatile uint32_t *GPIOB_ODR = (uint32_t *)(GPIOB_BASE + 0x14);
20001550:	4b11      	ldr	r3, [pc, #68]	@ (20001598 <ui_cmd_LEDG+0x64>)
20001552:	60bb      	str	r3, [r7, #8]

    if (state == 0) {
20001554:	68fb      	ldr	r3, [r7, #12]
20001556:	2b00      	cmp	r3, #0
20001558:	d109      	bne.n	2000156e <ui_cmd_LEDG+0x3a>
    	*GPIOB_ODR |= (1 << 2);
2000155a:	68bb      	ldr	r3, [r7, #8]
2000155c:	681b      	ldr	r3, [r3, #0]
2000155e:	f043 0204 	orr.w	r2, r3, #4
20001562:	68bb      	ldr	r3, [r7, #8]
20001564:	601a      	str	r2, [r3, #0]
        printf("LED1 is OFF\n");
20001566:	480d      	ldr	r0, [pc, #52]	@ (2000159c <ui_cmd_LEDG+0x68>)
20001568:	f7ff fc0c 	bl	20000d84 <printf>
2000156c:	e00f      	b.n	2000158e <ui_cmd_LEDG+0x5a>
    } else if (state == 1) {
2000156e:	68fb      	ldr	r3, [r7, #12]
20001570:	2b01      	cmp	r3, #1
20001572:	d109      	bne.n	20001588 <ui_cmd_LEDG+0x54>
        *GPIOB_ODR &= ~(1 << 2);
20001574:	68bb      	ldr	r3, [r7, #8]
20001576:	681b      	ldr	r3, [r3, #0]
20001578:	f023 0204 	bic.w	r2, r3, #4
2000157c:	68bb      	ldr	r3, [r7, #8]
2000157e:	601a      	str	r2, [r3, #0]
        printf("LED1 is ON\n");
20001580:	4807      	ldr	r0, [pc, #28]	@ (200015a0 <ui_cmd_LEDG+0x6c>)
20001582:	f7ff fbff 	bl	20000d84 <printf>
20001586:	e002      	b.n	2000158e <ui_cmd_LEDG+0x5a>

    } else{
    	printf("Invalid state. Use 0 for OFF and 1 for ON.\n");
20001588:	4806      	ldr	r0, [pc, #24]	@ (200015a4 <ui_cmd_LEDG+0x70>)
2000158a:	f7ff fbfb 	bl	20000d84 <printf>


    }

    return 0;
2000158e:	2300      	movs	r3, #0
}
20001590:	4618      	mov	r0, r3
20001592:	3710      	adds	r7, #16
20001594:	46bd      	mov	sp, r7
20001596:	bd80      	pop	{r7, pc}
20001598:	48000414 	.word	0x48000414
2000159c:	20002704 	.word	0x20002704
200015a0:	20002714 	.word	0x20002714
200015a4:	200026d8 	.word	0x200026d8

200015a8 <I2C_Init>:



void I2C_Init(void) {
200015a8:	b480      	push	{r7}
200015aa:	af00      	add	r7, sp, #0



    // Transmit
    I2C->I2C_CR1 = 0; // I2C_CR1, clear
200015ac:	4b0e      	ldr	r3, [pc, #56]	@ (200015e8 <I2C_Init+0x40>)
200015ae:	2200      	movs	r2, #0
200015b0:	601a      	str	r2, [r3, #0]
    I2C->I2C_TIMINGR = 0x20303e5d; // I2C timing configuration
200015b2:	4b0d      	ldr	r3, [pc, #52]	@ (200015e8 <I2C_Init+0x40>)
200015b4:	4a0d      	ldr	r2, [pc, #52]	@ (200015ec <I2C_Init+0x44>)
200015b6:	611a      	str	r2, [r3, #16]
    I2C->I2C_OAR1 = 0; // I2C OAR1 configuration
200015b8:	4b0b      	ldr	r3, [pc, #44]	@ (200015e8 <I2C_Init+0x40>)
200015ba:	2200      	movs	r2, #0
200015bc:	609a      	str	r2, [r3, #8]
    I2C->I2C_OAR1 = 0x8000; // Ack own address1 mode
200015be:	4b0a      	ldr	r3, [pc, #40]	@ (200015e8 <I2C_Init+0x40>)
200015c0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
200015c4:	609a      	str	r2, [r3, #8]
    I2C->I2C_CR2 = 0; // I2C CR2 configuration
200015c6:	4b08      	ldr	r3, [pc, #32]	@ (200015e8 <I2C_Init+0x40>)
200015c8:	2200      	movs	r2, #0
200015ca:	605a      	str	r2, [r3, #4]
    USART -> USART_CR2 = 0x2008000; // Auto end, bit 15, NACK
200015cc:	4b08      	ldr	r3, [pc, #32]	@ (200015f0 <I2C_Init+0x48>)
200015ce:	4a09      	ldr	r2, [pc, #36]	@ (200015f4 <I2C_Init+0x4c>)
200015d0:	605a      	str	r2, [r3, #4]
    I2C->I2C_OAR2 = 0; // I2C OAR2 configuration
200015d2:	4b05      	ldr	r3, [pc, #20]	@ (200015e8 <I2C_Init+0x40>)
200015d4:	2200      	movs	r2, #0
200015d6:	60da      	str	r2, [r3, #12]
    I2C->I2C_CR1 = 1; // Enable the selected I2C peripheral
200015d8:	4b03      	ldr	r3, [pc, #12]	@ (200015e8 <I2C_Init+0x40>)
200015da:	2201      	movs	r2, #1
200015dc:	601a      	str	r2, [r3, #0]
    *(volatile uint32_t *)(0x40004404) = 0x2008000; // Auto end, bit 15, NACK
    *(volatile uint32_t *)(0x4000540C) = 0; // I2C OAR2 configuration

    *(volatile uint32_t *)(0x40005400) = 1; // Enable the selected I2C peripheral
*/
}
200015de:	bf00      	nop
200015e0:	46bd      	mov	sp, r7
200015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
200015e6:	4770      	bx	lr
200015e8:	40005400 	.word	0x40005400
200015ec:	20303e5d 	.word	0x20303e5d
200015f0:	40004400 	.word	0x40004400
200015f4:	02008000 	.word	0x02008000

200015f8 <I2C_Init_INIT>:


void I2C_Init_INIT(void) {
200015f8:	b480      	push	{r7}
200015fa:	af00      	add	r7, sp, #0
    // Initialization and clock configuration
    RCC->APB2ENR = 0x4001; // __HAL_RCC_SYSCFG_CLK_ENABLE();
200015fc:	4b2f      	ldr	r3, [pc, #188]	@ (200016bc <I2C_Init_INIT+0xc4>)
200015fe:	f244 0201 	movw	r2, #16385	@ 0x4001
20001602:	661a      	str	r2, [r3, #96]	@ 0x60
    RCC->APB1ENR1 = 0x10000000; // __HAL_RCC_PWR_CLK_ENABLE();
20001604:	4b2d      	ldr	r3, [pc, #180]	@ (200016bc <I2C_Init_INIT+0xc4>)
20001606:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
2000160a:	659a      	str	r2, [r3, #88]	@ 0x58
    // RCC->CCIPR = 0; // RCC I2C clock selection (commented out as it was in the original code)
    PWR->PWR_CR2 = 0x200; // PWR_CR2 enable
2000160c:	4b2c      	ldr	r3, [pc, #176]	@ (200016c0 <I2C_Init_INIT+0xc8>)
2000160e:	f44f 7200 	mov.w	r2, #512	@ 0x200
20001612:	605a      	str	r2, [r3, #4]
    RCC->AHB2ENR = 0x20ff; // GPIOG_CLK_ENABLE
20001614:	4b29      	ldr	r3, [pc, #164]	@ (200016bc <I2C_Init_INIT+0xc4>)
20001616:	f242 02ff 	movw	r2, #8447	@ 0x20ff
2000161a:	64da      	str	r2, [r3, #76]	@ 0x4c
    RCC->APB1ENR1 = 0x32200000;
2000161c:	4b27      	ldr	r3, [pc, #156]	@ (200016bc <I2C_Init_INIT+0xc4>)
2000161e:	4a29      	ldr	r2, [pc, #164]	@ (200016c4 <I2C_Init_INIT+0xcc>)
20001620:	659a      	str	r2, [r3, #88]	@ 0x58

    // GPIO configuration
    GPIOG->GPIOx_OSPEEDR = 0xc3c0fff; // GPIOx_OSPEEDR
20001622:	4b29      	ldr	r3, [pc, #164]	@ (200016c8 <I2C_Init_INIT+0xd0>)
20001624:	4a29      	ldr	r2, [pc, #164]	@ (200016cc <I2C_Init_INIT+0xd4>)
20001626:	609a      	str	r2, [r3, #8]
    GPIOG->GPIOx_OTYPER = 0x2000; // GPIO port output type register (GPIOx_OTYPER)
20001628:	4b27      	ldr	r3, [pc, #156]	@ (200016c8 <I2C_Init_INIT+0xd0>)
2000162a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
2000162e:	605a      	str	r2, [r3, #4]
    GPIOG->GPIOx_PUPDR = 0x4000000; // GPIOG_PUPDR
20001630:	4b25      	ldr	r3, [pc, #148]	@ (200016c8 <I2C_Init_INIT+0xd0>)
20001632:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
20001636:	60da      	str	r2, [r3, #12]
    GPIOG->GPIOx_AFRL = 0x400cc0; // Configure Alternate function mapped with the current IO
20001638:	4b23      	ldr	r3, [pc, #140]	@ (200016c8 <I2C_Init_INIT+0xd0>)
2000163a:	4a25      	ldr	r2, [pc, #148]	@ (200016d0 <I2C_Init_INIT+0xd8>)
2000163c:	621a      	str	r2, [r3, #32]
    GPIOG->GPIOx_MODER = 0x3bebcaaa; // Configure IO Direction mode (Input, Output, Alternate or Analog)
2000163e:	4b22      	ldr	r3, [pc, #136]	@ (200016c8 <I2C_Init_INIT+0xd0>)
20001640:	4a24      	ldr	r2, [pc, #144]	@ (200016d4 <I2C_Init_INIT+0xdc>)
20001642:	601a      	str	r2, [r3, #0]
    GPIOG->GPIOx_OSPEEDR = 0x3c3c0fff; // Configure the IO Speed
20001644:	4b20      	ldr	r3, [pc, #128]	@ (200016c8 <I2C_Init_INIT+0xd0>)
20001646:	4a24      	ldr	r2, [pc, #144]	@ (200016d8 <I2C_Init_INIT+0xe0>)
20001648:	609a      	str	r2, [r3, #8]
    GPIOG->GPIOx_OTYPER = 0x6000; // GPIO_OTYPER
2000164a:	4b1f      	ldr	r3, [pc, #124]	@ (200016c8 <I2C_Init_INIT+0xd0>)
2000164c:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
20001650:	605a      	str	r2, [r3, #4]
    GPIOA->GPIOx_PUPDR = 0x4000000; // Activate pull up or pull down GPIO_PUPDR
20001652:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
20001656:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
2000165a:	60da      	str	r2, [r3, #12]
    GPIOG->GPIOx_AFRL = 0x4400cc0; // Configure Alternate function mapped with the current IO
2000165c:	4b1a      	ldr	r3, [pc, #104]	@ (200016c8 <I2C_Init_INIT+0xd0>)
2000165e:	4a1f      	ldr	r2, [pc, #124]	@ (200016dc <I2C_Init_INIT+0xe4>)
20001660:	621a      	str	r2, [r3, #32]
    GPIOG->GPIOx_MODER = 0x2bebcaaa; // Configure IO Direction mode (Input, Output, Alternate or Analog)
20001662:	4b19      	ldr	r3, [pc, #100]	@ (200016c8 <I2C_Init_INIT+0xd0>)
20001664:	4a1e      	ldr	r2, [pc, #120]	@ (200016e0 <I2C_Init_INIT+0xe8>)
20001666:	601a      	str	r2, [r3, #0]
    GPIOG->GPIOx_OSPEEDR = 0x3c3c0fff; // Configure the IO Speed
20001668:	4b17      	ldr	r3, [pc, #92]	@ (200016c8 <I2C_Init_INIT+0xd0>)
2000166a:	4a1b      	ldr	r2, [pc, #108]	@ (200016d8 <I2C_Init_INIT+0xe0>)
2000166c:	609a      	str	r2, [r3, #8]
    GPIOG->GPIOx_OTYPER = 0x6000; // GPIO_OTYPER
2000166e:	4b16      	ldr	r3, [pc, #88]	@ (200016c8 <I2C_Init_INIT+0xd0>)
20001670:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
20001674:	605a      	str	r2, [r3, #4]
    GPIOA->GPIOx_PUPDR = 0x0; // Activate pull up or pull down GPIO_PUPDR
20001676:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
2000167a:	2200      	movs	r2, #0
2000167c:	60da      	str	r2, [r3, #12]
    //*(volatile uint8_t *)(0x48001841) = 0x24; // hi2c->State = HAL_I2C_STATE_BUSY (specific address not covered by provided structures)

    I2C->I2C_CR1 = 0; // Disable the selected I2C peripheral
2000167e:	4b19      	ldr	r3, [pc, #100]	@ (200016e4 <I2C_Init_INIT+0xec>)
20001680:	2200      	movs	r2, #0
20001682:	601a      	str	r2, [r3, #0]
    I2C->I2C_TIMINGR = 0x20303E5D; // Configure I2Cx: Frequency range
20001684:	4b17      	ldr	r3, [pc, #92]	@ (200016e4 <I2C_Init_INIT+0xec>)
20001686:	4a18      	ldr	r2, [pc, #96]	@ (200016e8 <I2C_Init_INIT+0xf0>)
20001688:	611a      	str	r2, [r3, #16]
    I2C->I2C_OAR1 = 0; // I2Cx OAR1 Configuration
2000168a:	4b16      	ldr	r3, [pc, #88]	@ (200016e4 <I2C_Init_INIT+0xec>)
2000168c:	2200      	movs	r2, #0
2000168e:	609a      	str	r2, [r3, #8]
    I2C->I2C_OAR1 = 0x8000; // Ack own address1 mode
20001690:	4b14      	ldr	r3, [pc, #80]	@ (200016e4 <I2C_Init_INIT+0xec>)
20001692:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
20001696:	609a      	str	r2, [r3, #8]
    I2C->I2C_CR2 = 0; // Clear the I2C ADD10 bit
20001698:	4b12      	ldr	r3, [pc, #72]	@ (200016e4 <I2C_Init_INIT+0xec>)
2000169a:	2200      	movs	r2, #0
2000169c:	605a      	str	r2, [r3, #4]
    I2C->I2C_OAR2 = 0; // I2Cx OAR2 Configuration
2000169e:	4b11      	ldr	r3, [pc, #68]	@ (200016e4 <I2C_Init_INIT+0xec>)
200016a0:	2200      	movs	r2, #0
200016a2:	60da      	str	r2, [r3, #12]
    I2C->I2C_CR1 = 0; // Configure I2Cx: Generalcall and NoStretch mode
200016a4:	4b0f      	ldr	r3, [pc, #60]	@ (200016e4 <I2C_Init_INIT+0xec>)
200016a6:	2200      	movs	r2, #0
200016a8:	601a      	str	r2, [r3, #0]
    I2C->I2C_CR1 = 1; // Enable the selected I2C peripheral
200016aa:	4b0e      	ldr	r3, [pc, #56]	@ (200016e4 <I2C_Init_INIT+0xec>)
200016ac:	2201      	movs	r2, #1
200016ae:	601a      	str	r2, [r3, #0]
}
200016b0:	bf00      	nop
200016b2:	46bd      	mov	sp, r7
200016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
200016b8:	4770      	bx	lr
200016ba:	bf00      	nop
200016bc:	40021000 	.word	0x40021000
200016c0:	40007000 	.word	0x40007000
200016c4:	32200000 	.word	0x32200000
200016c8:	48001800 	.word	0x48001800
200016cc:	0c3c0fff 	.word	0x0c3c0fff
200016d0:	00400cc0 	.word	0x00400cc0
200016d4:	3bebcaaa 	.word	0x3bebcaaa
200016d8:	3c3c0fff 	.word	0x3c3c0fff
200016dc:	04400cc0 	.word	0x04400cc0
200016e0:	2bebcaaa 	.word	0x2bebcaaa
200016e4:	40005400 	.word	0x40005400
200016e8:	20303e5d 	.word	0x20303e5d

200016ec <I2C_Init_INIT2>:

void I2C_Init_INIT2(void) {
200016ec:	b480      	push	{r7}
200016ee:	af00      	add	r7, sp, #0
    // Initialization and clock configuration



    *(volatile uint32_t *)(0x40021060) = 0x4001; // __HAL_RCC_SYSCFG_CLK_ENABLE();
200016f0:	4b2f      	ldr	r3, [pc, #188]	@ (200017b0 <I2C_Init_INIT2+0xc4>)
200016f2:	f244 0201 	movw	r2, #16385	@ 0x4001
200016f6:	601a      	str	r2, [r3, #0]



    *(volatile uint32_t *)(0x40021058) = 0x10000000; // __HAL_RCC_PWR_CLK_ENABLE();
200016f8:	4b2e      	ldr	r3, [pc, #184]	@ (200017b4 <I2C_Init_INIT2+0xc8>)
200016fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
200016fe:	601a      	str	r2, [r3, #0]

  //  *(volatile uint32_t *)(0x40021088) = 0; // RCC I2C clock selection

    *(volatile uint32_t *)(0x40007004) = 0x200; // PWR_CR2 enable
20001700:	4b2d      	ldr	r3, [pc, #180]	@ (200017b8 <I2C_Init_INIT2+0xcc>)
20001702:	f44f 7200 	mov.w	r2, #512	@ 0x200
20001706:	601a      	str	r2, [r3, #0]


    *(volatile uint32_t *)(0x4002104C) = 0x20ff; // GPIOG_CLK_ENABLE
20001708:	4b2c      	ldr	r3, [pc, #176]	@ (200017bc <I2C_Init_INIT2+0xd0>)
2000170a:	f242 02ff 	movw	r2, #8447	@ 0x20ff
2000170e:	601a      	str	r2, [r3, #0]


    *(volatile uint32_t *)(0x40021058) = 0x32200000;
20001710:	4b28      	ldr	r3, [pc, #160]	@ (200017b4 <I2C_Init_INIT2+0xc8>)
20001712:	4a2b      	ldr	r2, [pc, #172]	@ (200017c0 <I2C_Init_INIT2+0xd4>)
20001714:	601a      	str	r2, [r3, #0]


    // GPIO configuration
    *(volatile uint32_t *)(0x48001808) = 0xc3c0fff; // GPIOx_OSPEEDR
20001716:	4b2b      	ldr	r3, [pc, #172]	@ (200017c4 <I2C_Init_INIT2+0xd8>)
20001718:	4a2b      	ldr	r2, [pc, #172]	@ (200017c8 <I2C_Init_INIT2+0xdc>)
2000171a:	601a      	str	r2, [r3, #0]
    *(volatile uint32_t *)(0x48001804) = 0x2000; // GPIO port output type register (GPIOx_OTYPER)
2000171c:	4b2b      	ldr	r3, [pc, #172]	@ (200017cc <I2C_Init_INIT2+0xe0>)
2000171e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
20001722:	601a      	str	r2, [r3, #0]
    *(volatile uint32_t *)(0x4800180C) = 0x4000000; // GPIOG_PUPDR
20001724:	4b2a      	ldr	r3, [pc, #168]	@ (200017d0 <I2C_Init_INIT2+0xe4>)
20001726:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
2000172a:	601a      	str	r2, [r3, #0]
    *(volatile uint32_t *)(0x48001824) = 0x400cc0; // Configure Alternate function mapped with the current IO
2000172c:	4b29      	ldr	r3, [pc, #164]	@ (200017d4 <I2C_Init_INIT2+0xe8>)
2000172e:	4a2a      	ldr	r2, [pc, #168]	@ (200017d8 <I2C_Init_INIT2+0xec>)
20001730:	601a      	str	r2, [r3, #0]
    *(volatile uint32_t *)(0x48001800) = 0x3bebcaaa; // Configure IO Direction mode (Input, Output, Alternate or Analog)
20001732:	4b2a      	ldr	r3, [pc, #168]	@ (200017dc <I2C_Init_INIT2+0xf0>)
20001734:	4a2a      	ldr	r2, [pc, #168]	@ (200017e0 <I2C_Init_INIT2+0xf4>)
20001736:	601a      	str	r2, [r3, #0]
    *(volatile uint32_t *)(0x48001808) = 0x3c3c0fff; // Configure the IO Speed
20001738:	4b22      	ldr	r3, [pc, #136]	@ (200017c4 <I2C_Init_INIT2+0xd8>)
2000173a:	4a2a      	ldr	r2, [pc, #168]	@ (200017e4 <I2C_Init_INIT2+0xf8>)
2000173c:	601a      	str	r2, [r3, #0]
    *(volatile uint32_t *)(0x48001804) = 0x6000; // GPIO_OTYPER
2000173e:	4b23      	ldr	r3, [pc, #140]	@ (200017cc <I2C_Init_INIT2+0xe0>)
20001740:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
20001744:	601a      	str	r2, [r3, #0]
    *(volatile uint32_t *)(0x4800082C) = 0x4000000; // Activate pull up or pull down GPIO_PUPDR
20001746:	4b28      	ldr	r3, [pc, #160]	@ (200017e8 <I2C_Init_INIT2+0xfc>)
20001748:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
2000174c:	601a      	str	r2, [r3, #0]
    *(volatile uint32_t *)(0x48001824) = 0x4400cc0; // Configure Alternate function mapped with the current IO
2000174e:	4b21      	ldr	r3, [pc, #132]	@ (200017d4 <I2C_Init_INIT2+0xe8>)
20001750:	4a26      	ldr	r2, [pc, #152]	@ (200017ec <I2C_Init_INIT2+0x100>)
20001752:	601a      	str	r2, [r3, #0]
    *(volatile uint32_t *)(0x48001800) = 0x2bebcaaa; // Configure IO Direction mode (Input, Output, Alternate or Analog)
20001754:	4b21      	ldr	r3, [pc, #132]	@ (200017dc <I2C_Init_INIT2+0xf0>)
20001756:	4a26      	ldr	r2, [pc, #152]	@ (200017f0 <I2C_Init_INIT2+0x104>)
20001758:	601a      	str	r2, [r3, #0]
    *(volatile uint32_t *)(0x48001808) = 0x3c3c0fff; // Configure the IO Speed
2000175a:	4b1a      	ldr	r3, [pc, #104]	@ (200017c4 <I2C_Init_INIT2+0xd8>)
2000175c:	4a21      	ldr	r2, [pc, #132]	@ (200017e4 <I2C_Init_INIT2+0xf8>)
2000175e:	601a      	str	r2, [r3, #0]
    *(volatile uint32_t *)(0x48001804) = 0x6000; // GPIO_OTYPER
20001760:	4b1a      	ldr	r3, [pc, #104]	@ (200017cc <I2C_Init_INIT2+0xe0>)
20001762:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
20001766:	601a      	str	r2, [r3, #0]
    *(volatile uint32_t *)(0x4800082C) = 0x0; // Activate pull up or pull down GPIO_PUPDR
20001768:	4b1f      	ldr	r3, [pc, #124]	@ (200017e8 <I2C_Init_INIT2+0xfc>)
2000176a:	2200      	movs	r2, #0
2000176c:	601a      	str	r2, [r3, #0]
    *(volatile uint8_t *)(0x48001841) = 0x24; // hi2c->State = HAL_I2C_STATE_BUSY
2000176e:	4b21      	ldr	r3, [pc, #132]	@ (200017f4 <I2C_Init_INIT2+0x108>)
20001770:	2224      	movs	r2, #36	@ 0x24
20001772:	701a      	strb	r2, [r3, #0]


    *(volatile uint32_t *)(0x40005400) = 0; // Disable the selected I2C peripheral
20001774:	4b20      	ldr	r3, [pc, #128]	@ (200017f8 <I2C_Init_INIT2+0x10c>)
20001776:	2200      	movs	r2, #0
20001778:	601a      	str	r2, [r3, #0]
    *(volatile uint32_t *)(0x40005410) = 0x20303E5D; // Configure I2Cx: Frequency range
2000177a:	4b20      	ldr	r3, [pc, #128]	@ (200017fc <I2C_Init_INIT2+0x110>)
2000177c:	4a20      	ldr	r2, [pc, #128]	@ (20001800 <I2C_Init_INIT2+0x114>)
2000177e:	601a      	str	r2, [r3, #0]
    *(volatile uint32_t *)(0x40005408) = 0; // I2Cx OAR1 Configuration
20001780:	4b20      	ldr	r3, [pc, #128]	@ (20001804 <I2C_Init_INIT2+0x118>)
20001782:	2200      	movs	r2, #0
20001784:	601a      	str	r2, [r3, #0]
    *(volatile uint32_t *)(0x40005408) = 0x8000; // Ack own address1 mode
20001786:	4b1f      	ldr	r3, [pc, #124]	@ (20001804 <I2C_Init_INIT2+0x118>)
20001788:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
2000178c:	601a      	str	r2, [r3, #0]
    *(volatile uint32_t *)(0x40005404) = 0; // Clear the I2C ADD10 bit
2000178e:	4b1e      	ldr	r3, [pc, #120]	@ (20001808 <I2C_Init_INIT2+0x11c>)
20001790:	2200      	movs	r2, #0
20001792:	601a      	str	r2, [r3, #0]
    *(volatile uint32_t *)(0x4000540C) = 0; // I2Cx OAR2 Configuration
20001794:	4b1d      	ldr	r3, [pc, #116]	@ (2000180c <I2C_Init_INIT2+0x120>)
20001796:	2200      	movs	r2, #0
20001798:	601a      	str	r2, [r3, #0]
    *(volatile uint32_t *)(0x40005400) = 0; // Configure I2Cx: Generalcall and NoStretch mode
2000179a:	4b17      	ldr	r3, [pc, #92]	@ (200017f8 <I2C_Init_INIT2+0x10c>)
2000179c:	2200      	movs	r2, #0
2000179e:	601a      	str	r2, [r3, #0]
    *(volatile uint32_t *)(0x40005400) = 1; // Enable the selected I2C peripheral
200017a0:	4b15      	ldr	r3, [pc, #84]	@ (200017f8 <I2C_Init_INIT2+0x10c>)
200017a2:	2201      	movs	r2, #1
200017a4:	601a      	str	r2, [r3, #0]

}
200017a6:	bf00      	nop
200017a8:	46bd      	mov	sp, r7
200017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
200017ae:	4770      	bx	lr
200017b0:	40021060 	.word	0x40021060
200017b4:	40021058 	.word	0x40021058
200017b8:	40007004 	.word	0x40007004
200017bc:	4002104c 	.word	0x4002104c
200017c0:	32200000 	.word	0x32200000
200017c4:	48001808 	.word	0x48001808
200017c8:	0c3c0fff 	.word	0x0c3c0fff
200017cc:	48001804 	.word	0x48001804
200017d0:	4800180c 	.word	0x4800180c
200017d4:	48001824 	.word	0x48001824
200017d8:	00400cc0 	.word	0x00400cc0
200017dc:	48001800 	.word	0x48001800
200017e0:	3bebcaaa 	.word	0x3bebcaaa
200017e4:	3c3c0fff 	.word	0x3c3c0fff
200017e8:	4800082c 	.word	0x4800082c
200017ec:	04400cc0 	.word	0x04400cc0
200017f0:	2bebcaaa 	.word	0x2bebcaaa
200017f4:	48001841 	.word	0x48001841
200017f8:	40005400 	.word	0x40005400
200017fc:	40005410 	.word	0x40005410
20001800:	20303e5d 	.word	0x20303e5d
20001804:	40005408 	.word	0x40005408
20001808:	40005404 	.word	0x40005404
2000180c:	4000540c 	.word	0x4000540c

20001810 <ui_cmd_I2C>:


void ui_cmd_I2C(int argc, char *argv[])
{
20001810:	b580      	push	{r7, lr}
20001812:	b086      	sub	sp, #24
20001814:	af00      	add	r7, sp, #0
20001816:	6078      	str	r0, [r7, #4]
20001818:	6039      	str	r1, [r7, #0]
    RCC->APB2ENR = 0x4001;
2000181a:	4b5a      	ldr	r3, [pc, #360]	@ (20001984 <ui_cmd_I2C+0x174>)
2000181c:	f244 0201 	movw	r2, #16385	@ 0x4001
20001820:	661a      	str	r2, [r3, #96]	@ 0x60
    // *(volatile uint32_t *)(0x40021060) = 0x4001; // __HAL_RCC_SYSCFG_CLK_ENABLE();

    RCC->APB1ENR1 = 0x10000000;
20001822:	4b58      	ldr	r3, [pc, #352]	@ (20001984 <ui_cmd_I2C+0x174>)
20001824:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
20001828:	659a      	str	r2, [r3, #88]	@ 0x58
    //*(volatile uint32_t *)(0x40021058) = 0x10000000; // __HAL_RCC_PWR_CLK_ENABLE();

    RCC->CCIPR = 0;
2000182a:	4b56      	ldr	r3, [pc, #344]	@ (20001984 <ui_cmd_I2C+0x174>)
2000182c:	2200      	movs	r2, #0
2000182e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    //*(volatile uint32_t *)(0x40021088) = 0; // RCC i2c clock selection

    PWR->PWR_CR2 = 0x200;
20001832:	4b55      	ldr	r3, [pc, #340]	@ (20001988 <ui_cmd_I2C+0x178>)
20001834:	f44f 7200 	mov.w	r2, #512	@ 0x200
20001838:	605a      	str	r2, [r3, #4]
    //*(volatile uint32_t *)(0x40007004) = 0x200; // PWR_CR2 enable

    RCC->AHB2ENR = 0x20ff;
2000183a:	4b52      	ldr	r3, [pc, #328]	@ (20001984 <ui_cmd_I2C+0x174>)
2000183c:	f242 02ff 	movw	r2, #8447	@ 0x20ff
20001840:	64da      	str	r2, [r3, #76]	@ 0x4c
    //*(volatile uint32_t *)(0x4002104C) = 0x20ff; // GPIOG_CLK_ENABLE

    RCC->APB1ENR1 = 0x32200000;
20001842:	4b50      	ldr	r3, [pc, #320]	@ (20001984 <ui_cmd_I2C+0x174>)
20001844:	4a51      	ldr	r2, [pc, #324]	@ (2000198c <ui_cmd_I2C+0x17c>)
20001846:	659a      	str	r2, [r3, #88]	@ 0x58
    //*(volatile uint32_t *)(0x40021058) = 0x32200000;

    GPIOG->GPIOx_OSPEEDR = 0xc3c0fff;
20001848:	4b51      	ldr	r3, [pc, #324]	@ (20001990 <ui_cmd_I2C+0x180>)
2000184a:	4a52      	ldr	r2, [pc, #328]	@ (20001994 <ui_cmd_I2C+0x184>)
2000184c:	609a      	str	r2, [r3, #8]
    //*(volatile uint32_t *)(0x48001808) = 0xc3c0fff; // GPIOx_OSPEEDR

    GPIOG->GPIOx_OTYPER = 0x2000;
2000184e:	4b50      	ldr	r3, [pc, #320]	@ (20001990 <ui_cmd_I2C+0x180>)
20001850:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
20001854:	605a      	str	r2, [r3, #4]
    //*(volatile uint32_t *)(0x48001804) = 0x2000; // GPIO port output type register (GPIOx_OTYPER)

    GPIOG->GPIOx_PUPDR = 0x4000000;
20001856:	4b4e      	ldr	r3, [pc, #312]	@ (20001990 <ui_cmd_I2C+0x180>)
20001858:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
2000185c:	60da      	str	r2, [r3, #12]
    //*(volatile uint32_t *)(0x4800180C) = 0x4000000; // GPIOG_PUPDR

    GPIOG->GPIOx_AFRL = 0x400cc0;
2000185e:	4b4c      	ldr	r3, [pc, #304]	@ (20001990 <ui_cmd_I2C+0x180>)
20001860:	4a4d      	ldr	r2, [pc, #308]	@ (20001998 <ui_cmd_I2C+0x188>)
20001862:	621a      	str	r2, [r3, #32]
    //*(volatile uint32_t *)(0x48001824) = 0x400cc0; // Configure Alternate function mapped with the current IO

    GPIOG->GPIOx_MODER = 0x3bebcaaa;
20001864:	4b4a      	ldr	r3, [pc, #296]	@ (20001990 <ui_cmd_I2C+0x180>)
20001866:	4a4d      	ldr	r2, [pc, #308]	@ (2000199c <ui_cmd_I2C+0x18c>)
20001868:	601a      	str	r2, [r3, #0]
    //*(volatile uint32_t *)(0x48001800) = 0x3bebcaaa; // Configure IO Direction mode (Input, Output, Alternate or Analog)

    GPIOG->GPIOx_OSPEEDR = 0x3c3c0fff;
2000186a:	4b49      	ldr	r3, [pc, #292]	@ (20001990 <ui_cmd_I2C+0x180>)
2000186c:	4a4c      	ldr	r2, [pc, #304]	@ (200019a0 <ui_cmd_I2C+0x190>)
2000186e:	609a      	str	r2, [r3, #8]
    //*(volatile uint32_t *)(0x48001808) = 0x3c3c0fff; // Configure the IO Speed

    GPIOG->GPIOx_OTYPER = 0x6000;
20001870:	4b47      	ldr	r3, [pc, #284]	@ (20001990 <ui_cmd_I2C+0x180>)
20001872:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
20001876:	605a      	str	r2, [r3, #4]
    //*(volatile uint32_t *)(0x48001804) = 0x6000; // GPIO_OTYPER

    GPIOA->GPIOx_PUPDR = 0x4000000;
20001878:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
2000187c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
20001880:	60da      	str	r2, [r3, #12]
    //*(volatile uint32_t *)(0x4800082C) = 0x4000000; // Activate pull up or pull down GPIO_PUPDR

    // GPIOG->GPIOx_AFRL = 0x4400cc0;
    *(volatile uint32_t *)(0x48001824) = 0x4400cc0; // Configure Alternate function mapped with the current IO
20001882:	4b48      	ldr	r3, [pc, #288]	@ (200019a4 <ui_cmd_I2C+0x194>)
20001884:	4a48      	ldr	r2, [pc, #288]	@ (200019a8 <ui_cmd_I2C+0x198>)
20001886:	601a      	str	r2, [r3, #0]

    // GPIOG->GPIOx_MODER = 0x2bebcaaa;
    *(volatile uint32_t *)(0x48001800) = 0x2bebcaaa; // Configure IO Direction mode (Input, Output, Alternate or Analog)
20001888:	4b41      	ldr	r3, [pc, #260]	@ (20001990 <ui_cmd_I2C+0x180>)
2000188a:	4a48      	ldr	r2, [pc, #288]	@ (200019ac <ui_cmd_I2C+0x19c>)
2000188c:	601a      	str	r2, [r3, #0]

    // GPIOG->GPIOx_OSPEEDR = 0x3c3c0fff;
    *(volatile uint32_t *)(0x48001808) = 0x3c3c0fff; // Configure the IO Speed
2000188e:	4b48      	ldr	r3, [pc, #288]	@ (200019b0 <ui_cmd_I2C+0x1a0>)
20001890:	4a43      	ldr	r2, [pc, #268]	@ (200019a0 <ui_cmd_I2C+0x190>)
20001892:	601a      	str	r2, [r3, #0]

    // GPIOG->GPIOx_OTYPER = 0x6000;
    *(volatile uint32_t *)(0x48001804) = 0x6000; // GPIO_OTYPER
20001894:	4b47      	ldr	r3, [pc, #284]	@ (200019b4 <ui_cmd_I2C+0x1a4>)
20001896:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
2000189a:	601a      	str	r2, [r3, #0]

    // GPIOA->GPIOx_PUPDR = 0x0;
    *(volatile uint32_t *)(0x4800082C) = 0x0; // Activate pull up or pull down GPIO_PUPDR
2000189c:	4b46      	ldr	r3, [pc, #280]	@ (200019b8 <ui_cmd_I2C+0x1a8>)
2000189e:	2200      	movs	r2, #0
200018a0:	601a      	str	r2, [r3, #0]

    // *(volatile uint8_t *)(0x48001841) = 0x24; (specific address not covered by provided structures)
    *(volatile uint8_t *)(0x48001841) = 0x24; // hi2c->State = HAL_I2C_STATE_BUSY;
200018a2:	4b46      	ldr	r3, [pc, #280]	@ (200019bc <ui_cmd_I2C+0x1ac>)
200018a4:	2224      	movs	r2, #36	@ 0x24
200018a6:	701a      	strb	r2, [r3, #0]

    // I2C->I2C_CR1 = 0;
    *(volatile uint32_t *)(0x40005400) = 0; // Disable the selected I2C peripheral
200018a8:	4b45      	ldr	r3, [pc, #276]	@ (200019c0 <ui_cmd_I2C+0x1b0>)
200018aa:	2200      	movs	r2, #0
200018ac:	601a      	str	r2, [r3, #0]

    // I2C->I2C_TIMINGR = 0x20303E5D;
    *(volatile uint32_t *)(0x40005410) = 0x20303E5D; // Configure I2Cx: Frequency range
200018ae:	4b45      	ldr	r3, [pc, #276]	@ (200019c4 <ui_cmd_I2C+0x1b4>)
200018b0:	4a45      	ldr	r2, [pc, #276]	@ (200019c8 <ui_cmd_I2C+0x1b8>)
200018b2:	601a      	str	r2, [r3, #0]

    // I2C->I2C_OAR1 = 0;
    *(volatile uint32_t *)(0x40005408) = 0; // I2Cx OAR1 Configuration
200018b4:	4b45      	ldr	r3, [pc, #276]	@ (200019cc <ui_cmd_I2C+0x1bc>)
200018b6:	2200      	movs	r2, #0
200018b8:	601a      	str	r2, [r3, #0]

    // I2C->I2C_OAR1 = 0x8000;
    *(volatile uint32_t *)(0x40005408) = 0x8000; // Ack own address1 mode
200018ba:	4b44      	ldr	r3, [pc, #272]	@ (200019cc <ui_cmd_I2C+0x1bc>)
200018bc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
200018c0:	601a      	str	r2, [r3, #0]

    // I2C->I2C_CR2 = 0;
    *(volatile uint32_t *)(0x40005404) = 0; // Clear the I2C ADD10 bit
200018c2:	4b43      	ldr	r3, [pc, #268]	@ (200019d0 <ui_cmd_I2C+0x1c0>)
200018c4:	2200      	movs	r2, #0
200018c6:	601a      	str	r2, [r3, #0]

    // I2C->I2C_OAR2 = 0;
    *(volatile uint32_t *)(0x4000540C) = 0; // I2Cx OAR2 Configuration
200018c8:	4b42      	ldr	r3, [pc, #264]	@ (200019d4 <ui_cmd_I2C+0x1c4>)
200018ca:	2200      	movs	r2, #0
200018cc:	601a      	str	r2, [r3, #0]

    // I2C->I2C_CR1 = 0;
    *(volatile uint32_t *)(0x40005400) = 0; // Configure I2Cx: Generalcall and NoStretch mode
200018ce:	4b3c      	ldr	r3, [pc, #240]	@ (200019c0 <ui_cmd_I2C+0x1b0>)
200018d0:	2200      	movs	r2, #0
200018d2:	601a      	str	r2, [r3, #0]

    // I2C->I2C_CR1 = 1;
    *(volatile uint32_t *)(0x40005400) = 1; // Enable the selected I2C peripheral
200018d4:	4b3a      	ldr	r3, [pc, #232]	@ (200019c0 <ui_cmd_I2C+0x1b0>)
200018d6:	2201      	movs	r2, #1
200018d8:	601a      	str	r2, [r3, #0]

    // Transmit
    // I2C->I2C_CR1 = 0;
    *(volatile uint32_t *)(0x40005400) = 0; // I2C_CR1, clear
200018da:	4b39      	ldr	r3, [pc, #228]	@ (200019c0 <ui_cmd_I2C+0x1b0>)
200018dc:	2200      	movs	r2, #0
200018de:	601a      	str	r2, [r3, #0]

    // I2C->I2C_TIMINGR = 0x20303e5d;
    *(volatile uint32_t *)(0x40005410) = 0x20303e5d; // 595, timing
200018e0:	4b38      	ldr	r3, [pc, #224]	@ (200019c4 <ui_cmd_I2C+0x1b4>)
200018e2:	4a39      	ldr	r2, [pc, #228]	@ (200019c8 <ui_cmd_I2C+0x1b8>)
200018e4:	601a      	str	r2, [r3, #0]

    // I2C->I2C_OAR1 = 0;
    *(volatile uint32_t *)(0x40005408) = 0; // 595, OAR1
200018e6:	4b39      	ldr	r3, [pc, #228]	@ (200019cc <ui_cmd_I2C+0x1bc>)
200018e8:	2200      	movs	r2, #0
200018ea:	601a      	str	r2, [r3, #0]

    // I2C->I2C_OAR1 = 0x8000;
    *(volatile uint32_t *)(0x40005408) = 0x8000;
200018ec:	4b37      	ldr	r3, [pc, #220]	@ (200019cc <ui_cmd_I2C+0x1bc>)
200018ee:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
200018f2:	601a      	str	r2, [r3, #0]

    // I2C->I2C_CR2 = 0;
    *(volatile uint32_t *)(0x40005404) = 0; // 616, CR2
200018f4:	4b36      	ldr	r3, [pc, #216]	@ (200019d0 <ui_cmd_I2C+0x1c0>)
200018f6:	2200      	movs	r2, #0
200018f8:	601a      	str	r2, [r3, #0]

    // USART->USART_CR2 = 0x2008000;
    *(volatile uint32_t *)(0x40004404) = 0x2008000; // 618, auto end, bit 15, NACK
200018fa:	4b37      	ldr	r3, [pc, #220]	@ (200019d8 <ui_cmd_I2C+0x1c8>)
200018fc:	4a37      	ldr	r2, [pc, #220]	@ (200019dc <ui_cmd_I2C+0x1cc>)
200018fe:	601a      	str	r2, [r3, #0]

    // I2C->I2C_OAR2 = 0;
    *(volatile uint32_t *)(0x4000540C) = 0; // 623, OAR2
20001900:	4b34      	ldr	r3, [pc, #208]	@ (200019d4 <ui_cmd_I2C+0x1c4>)
20001902:	2200      	movs	r2, #0
20001904:	601a      	str	r2, [r3, #0]

    // I2C->I2C_CR1 = 1;
    *(volatile uint32_t *)(0x40005400) = 1; // 634, peripheral enable bit 0
20001906:	4b2e      	ldr	r3, [pc, #184]	@ (200019c0 <ui_cmd_I2C+0x1b0>)
20001908:	2201      	movs	r2, #1
2000190a:	601a      	str	r2, [r3, #0]

    // I2C->I2C_TXDR = 0x0;
    *(volatile uint32_t *)(0x40005428) = 0x0; // 1162, TX reg
2000190c:	4b34      	ldr	r3, [pc, #208]	@ (200019e0 <ui_cmd_I2C+0x1d0>)
2000190e:	2200      	movs	r2, #0
20001910:	601a      	str	r2, [r3, #0]

    // I2C->I2C_CR2 = 0x2012082;
    *(volatile uint32_t *)(0x40005404) = 0x2012082; // 7217, 82 device address
20001912:	4b2f      	ldr	r3, [pc, #188]	@ (200019d0 <ui_cmd_I2C+0x1c0>)
20001914:	4a33      	ldr	r2, [pc, #204]	@ (200019e4 <ui_cmd_I2C+0x1d4>)
20001916:	601a      	str	r2, [r3, #0]

    // Receive
    uint32_t temp = 0; // I2C_ISR STOPF: STOP detection flag
20001918:	2300      	movs	r3, #0
2000191a:	617b      	str	r3, [r7, #20]
    while (((temp = *(volatile uint32_t *)(0x40005418)) & 0x20) == 0) {}
2000191c:	bf00      	nop
2000191e:	4b32      	ldr	r3, [pc, #200]	@ (200019e8 <ui_cmd_I2C+0x1d8>)
20001920:	681b      	ldr	r3, [r3, #0]
20001922:	617b      	str	r3, [r7, #20]
20001924:	697b      	ldr	r3, [r7, #20]
20001926:	f003 0320 	and.w	r3, r3, #32
2000192a:	2b00      	cmp	r3, #0
2000192c:	d0f7      	beq.n	2000191e <ui_cmd_I2C+0x10e>

    // I2C->I2C_CR2 = 0x2012482;
    *(volatile uint32_t *)(0x40005404) = 0x2012482; // 7217 update CR2 register
2000192e:	4b28      	ldr	r3, [pc, #160]	@ (200019d0 <ui_cmd_I2C+0x1c0>)
20001930:	4a2e      	ldr	r2, [pc, #184]	@ (200019ec <ui_cmd_I2C+0x1dc>)
20001932:	601a      	str	r2, [r3, #0]

    uint32_t busy = 0; // I2C_ISR BUSY: BUSY detection flag
20001934:	2300      	movs	r3, #0
20001936:	613b      	str	r3, [r7, #16]
    while (((busy = *(volatile uint32_t *)(0x40005400)) & 0x8000) == 1) {}
20001938:	bf00      	nop
2000193a:	4b21      	ldr	r3, [pc, #132]	@ (200019c0 <ui_cmd_I2C+0x1b0>)
2000193c:	681b      	ldr	r3, [r3, #0]
2000193e:	613b      	str	r3, [r7, #16]
20001940:	693b      	ldr	r3, [r7, #16]
20001942:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
20001946:	2b01      	cmp	r3, #1
20001948:	d0f7      	beq.n	2000193a <ui_cmd_I2C+0x12a>

    uint32_t RXNE_BUSY = 0; // RXNE: Receive data register
2000194a:	2300      	movs	r3, #0
2000194c:	60fb      	str	r3, [r7, #12]
    while (((RXNE_BUSY = *(volatile uint32_t *)(0x40005418)) & 0x4) == 0) {}
2000194e:	bf00      	nop
20001950:	4b25      	ldr	r3, [pc, #148]	@ (200019e8 <ui_cmd_I2C+0x1d8>)
20001952:	681b      	ldr	r3, [r3, #0]
20001954:	60fb      	str	r3, [r7, #12]
20001956:	68fb      	ldr	r3, [r7, #12]
20001958:	f003 0304 	and.w	r3, r3, #4
2000195c:	2b00      	cmp	r3, #0
2000195e:	d0f7      	beq.n	20001950 <ui_cmd_I2C+0x140>

    // Corrections for printing function
    // RCC->CCIPR = 0x2;
    *(volatile uint32_t *)(0x40021088) = 0x2;
20001960:	4b23      	ldr	r3, [pc, #140]	@ (200019f0 <ui_cmd_I2C+0x1e0>)
20001962:	2202      	movs	r2, #2
20001964:	601a      	str	r2, [r3, #0]

    uint32_t received_data = *(volatile uint32_t *)(0x40005424);
20001966:	4b23      	ldr	r3, [pc, #140]	@ (200019f4 <ui_cmd_I2C+0x1e4>)
20001968:	681b      	ldr	r3, [r3, #0]
2000196a:	60bb      	str	r3, [r7, #8]
    printf("data");
2000196c:	4822      	ldr	r0, [pc, #136]	@ (200019f8 <ui_cmd_I2C+0x1e8>)
2000196e:	f7ff fa09 	bl	20000d84 <printf>
    printf("Received data: 0x%08X\n", received_data);
20001972:	68b9      	ldr	r1, [r7, #8]
20001974:	4821      	ldr	r0, [pc, #132]	@ (200019fc <ui_cmd_I2C+0x1ec>)
20001976:	f7ff fa05 	bl	20000d84 <printf>
}
2000197a:	bf00      	nop
2000197c:	3718      	adds	r7, #24
2000197e:	46bd      	mov	sp, r7
20001980:	bd80      	pop	{r7, pc}
20001982:	bf00      	nop
20001984:	40021000 	.word	0x40021000
20001988:	40007000 	.word	0x40007000
2000198c:	32200000 	.word	0x32200000
20001990:	48001800 	.word	0x48001800
20001994:	0c3c0fff 	.word	0x0c3c0fff
20001998:	00400cc0 	.word	0x00400cc0
2000199c:	3bebcaaa 	.word	0x3bebcaaa
200019a0:	3c3c0fff 	.word	0x3c3c0fff
200019a4:	48001824 	.word	0x48001824
200019a8:	04400cc0 	.word	0x04400cc0
200019ac:	2bebcaaa 	.word	0x2bebcaaa
200019b0:	48001808 	.word	0x48001808
200019b4:	48001804 	.word	0x48001804
200019b8:	4800082c 	.word	0x4800082c
200019bc:	48001841 	.word	0x48001841
200019c0:	40005400 	.word	0x40005400
200019c4:	40005410 	.word	0x40005410
200019c8:	20303e5d 	.word	0x20303e5d
200019cc:	40005408 	.word	0x40005408
200019d0:	40005404 	.word	0x40005404
200019d4:	4000540c 	.word	0x4000540c
200019d8:	40004404 	.word	0x40004404
200019dc:	02008000 	.word	0x02008000
200019e0:	40005428 	.word	0x40005428
200019e4:	02012082 	.word	0x02012082
200019e8:	40005418 	.word	0x40005418
200019ec:	02012482 	.word	0x02012482
200019f0:	40021088 	.word	0x40021088
200019f4:	40005424 	.word	0x40005424
200019f8:	20002720 	.word	0x20002720
200019fc:	20002728 	.word	0x20002728

20001a00 <READ_I2C_IO2>:

static int READ_I2C_IO2(int reg_address)
{
20001a00:	b580      	push	{r7, lr}
20001a02:	b086      	sub	sp, #24
20001a04:	af00      	add	r7, sp, #0
20001a06:	6078      	str	r0, [r7, #4]
    I2C_Init();
20001a08:	f7ff fdce 	bl	200015a8 <I2C_Init>
    uint32_t temp = 0;
20001a0c:	2300      	movs	r3, #0
20001a0e:	617b      	str	r3, [r7, #20]

    *(volatile uint32_t *)(0x40005428) = reg_address;
20001a10:	4a13      	ldr	r2, [pc, #76]	@ (20001a60 <READ_I2C_IO2+0x60>)
20001a12:	687b      	ldr	r3, [r7, #4]
20001a14:	6013      	str	r3, [r2, #0]
    //I2C->I2C_TXDR = reg_address; // Register address
    // I2C->I2C_TXDR = value_to_send; // Data to send

    //I2C->I2C_CR2 = 0x2012084; // 7217, 82 device address
    *(volatile uint32_t *)(0x40005404) = 0x2012084;
20001a16:	4b13      	ldr	r3, [pc, #76]	@ (20001a64 <READ_I2C_IO2+0x64>)
20001a18:	4a13      	ldr	r2, [pc, #76]	@ (20001a68 <READ_I2C_IO2+0x68>)
20001a1a:	601a      	str	r2, [r3, #0]

    //while (((temp = I2C->I2C_ISR) & 0x1) == 0) {}

    // Wait for STOPF
    temp = 0;
20001a1c:	2300      	movs	r3, #0
20001a1e:	617b      	str	r3, [r7, #20]
    //while (((temp = I2C->I2C_ISR) & 0x20) == 0) {}
    while (((temp = *(volatile uint32_t *)(0x40005418)) & 0x20) == 0) {}
20001a20:	bf00      	nop
20001a22:	4b12      	ldr	r3, [pc, #72]	@ (20001a6c <READ_I2C_IO2+0x6c>)
20001a24:	681b      	ldr	r3, [r3, #0]
20001a26:	617b      	str	r3, [r7, #20]
20001a28:	697b      	ldr	r3, [r7, #20]
20001a2a:	f003 0320 	and.w	r3, r3, #32
20001a2e:	2b00      	cmp	r3, #0
20001a30:	d0f7      	beq.n	20001a22 <READ_I2C_IO2+0x22>

    I2C->I2C_CR2 = 0x2012484; // 7217 update CR2 register
20001a32:	4b0f      	ldr	r3, [pc, #60]	@ (20001a70 <READ_I2C_IO2+0x70>)
20001a34:	4a0f      	ldr	r2, [pc, #60]	@ (20001a74 <READ_I2C_IO2+0x74>)
20001a36:	605a      	str	r2, [r3, #4]

    // Wait for RXNE
    uint32_t RXNE_BUSY = 0;
20001a38:	2300      	movs	r3, #0
20001a3a:	613b      	str	r3, [r7, #16]
    while (((RXNE_BUSY = I2C->I2C_ISR) & 0x4) == 0) {}
20001a3c:	bf00      	nop
20001a3e:	4b0c      	ldr	r3, [pc, #48]	@ (20001a70 <READ_I2C_IO2+0x70>)
20001a40:	699b      	ldr	r3, [r3, #24]
20001a42:	613b      	str	r3, [r7, #16]
20001a44:	693b      	ldr	r3, [r7, #16]
20001a46:	f003 0304 	and.w	r3, r3, #4
20001a4a:	2b00      	cmp	r3, #0
20001a4c:	d0f7      	beq.n	20001a3e <READ_I2C_IO2+0x3e>

    uint32_t received_data = I2C->I2C_RXDR;
20001a4e:	4b08      	ldr	r3, [pc, #32]	@ (20001a70 <READ_I2C_IO2+0x70>)
20001a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20001a52:	60fb      	str	r3, [r7, #12]

    // Corrections for printing function
    // RCC->CCIPR = 0x2;
    // printf("Received data: 0x%08X\n", received_data);

    return received_data;
20001a54:	68fb      	ldr	r3, [r7, #12]
}
20001a56:	4618      	mov	r0, r3
20001a58:	3718      	adds	r7, #24
20001a5a:	46bd      	mov	sp, r7
20001a5c:	bd80      	pop	{r7, pc}
20001a5e:	bf00      	nop
20001a60:	40005428 	.word	0x40005428
20001a64:	40005404 	.word	0x40005404
20001a68:	02012084 	.word	0x02012084
20001a6c:	40005418 	.word	0x40005418
20001a70:	40005400 	.word	0x40005400
20001a74:	02012484 	.word	0x02012484

20001a78 <ui_cmd_write_I2C>:
static int ui_cmd_write_I2C(int argc, char *argv[])
{
20001a78:	b580      	push	{r7, lr}
20001a7a:	b08a      	sub	sp, #40	@ 0x28
20001a7c:	af00      	add	r7, sp, #0
20001a7e:	6078      	str	r0, [r7, #4]
20001a80:	6039      	str	r1, [r7, #0]
    if (argc < 3) {
20001a82:	687b      	ldr	r3, [r7, #4]
20001a84:	2b02      	cmp	r3, #2
20001a86:	dc05      	bgt.n	20001a94 <ui_cmd_write_I2C+0x1c>
        printf("Usage: write_I2C <reg_address> <value_to_send>\n");
20001a88:	4840      	ldr	r0, [pc, #256]	@ (20001b8c <ui_cmd_write_I2C+0x114>)
20001a8a:	f7ff f97b 	bl	20000d84 <printf>
        return -1;
20001a8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
20001a92:	e077      	b.n	20001b84 <ui_cmd_write_I2C+0x10c>
    }

    char *reg_input = argv[1];
20001a94:	683b      	ldr	r3, [r7, #0]
20001a96:	685b      	ldr	r3, [r3, #4]
20001a98:	627b      	str	r3, [r7, #36]	@ 0x24
    char *val_input = argv[2];
20001a9a:	683b      	ldr	r3, [r7, #0]
20001a9c:	689b      	ldr	r3, [r3, #8]
20001a9e:	623b      	str	r3, [r7, #32]

    int reg_address = atoi(reg_input);
20001aa0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
20001aa2:	f000 fb65 	bl	20002170 <atoi>
20001aa6:	61f8      	str	r0, [r7, #28]
    int value_to_send = atoi(val_input);
20001aa8:	6a38      	ldr	r0, [r7, #32]
20001aaa:	f000 fb61 	bl	20002170 <atoi>
20001aae:	61b8      	str	r0, [r7, #24]

    // Initialization and clock configuration
    I2C_Init_INIT();
20001ab0:	f7ff fda2 	bl	200015f8 <I2C_Init_INIT>
    I2C_Init();
20001ab4:	f7ff fd78 	bl	200015a8 <I2C_Init>

    // Write to I2C
    uint32_t temp = 0;
20001ab8:	2300      	movs	r3, #0
20001aba:	617b      	str	r3, [r7, #20]

    while (((temp = I2C->I2C_ISR) & 0x1) == 0) {}
20001abc:	bf00      	nop
20001abe:	4b34      	ldr	r3, [pc, #208]	@ (20001b90 <ui_cmd_write_I2C+0x118>)
20001ac0:	699b      	ldr	r3, [r3, #24]
20001ac2:	617b      	str	r3, [r7, #20]
20001ac4:	697b      	ldr	r3, [r7, #20]
20001ac6:	f003 0301 	and.w	r3, r3, #1
20001aca:	2b00      	cmp	r3, #0
20001acc:	d0f7      	beq.n	20001abe <ui_cmd_write_I2C+0x46>

    I2C->I2C_TXDR = reg_address; // Register address
20001ace:	4a30      	ldr	r2, [pc, #192]	@ (20001b90 <ui_cmd_write_I2C+0x118>)
20001ad0:	69fb      	ldr	r3, [r7, #28]
20001ad2:	6293      	str	r3, [r2, #40]	@ 0x28
    I2C->I2C_CR2 = 0x2022082; // I2C device address
20001ad4:	4b2e      	ldr	r3, [pc, #184]	@ (20001b90 <ui_cmd_write_I2C+0x118>)
20001ad6:	4a2f      	ldr	r2, [pc, #188]	@ (20001b94 <ui_cmd_write_I2C+0x11c>)
20001ad8:	605a      	str	r2, [r3, #4]

    while (((temp = I2C->I2C_ISR) & 0x1) == 0) {}
20001ada:	bf00      	nop
20001adc:	4b2c      	ldr	r3, [pc, #176]	@ (20001b90 <ui_cmd_write_I2C+0x118>)
20001ade:	699b      	ldr	r3, [r3, #24]
20001ae0:	617b      	str	r3, [r7, #20]
20001ae2:	697b      	ldr	r3, [r7, #20]
20001ae4:	f003 0301 	and.w	r3, r3, #1
20001ae8:	2b00      	cmp	r3, #0
20001aea:	d0f7      	beq.n	20001adc <ui_cmd_write_I2C+0x64>

    I2C->I2C_TXDR = value_to_send;
20001aec:	4a28      	ldr	r2, [pc, #160]	@ (20001b90 <ui_cmd_write_I2C+0x118>)
20001aee:	69bb      	ldr	r3, [r7, #24]
20001af0:	6293      	str	r3, [r2, #40]	@ 0x28

    // Wait for STOPF
    temp = 0;
20001af2:	2300      	movs	r3, #0
20001af4:	617b      	str	r3, [r7, #20]
    while (((temp = I2C->I2C_ISR) & 0x20) == 0) {}
20001af6:	bf00      	nop
20001af8:	4b25      	ldr	r3, [pc, #148]	@ (20001b90 <ui_cmd_write_I2C+0x118>)
20001afa:	699b      	ldr	r3, [r3, #24]
20001afc:	617b      	str	r3, [r7, #20]
20001afe:	697b      	ldr	r3, [r7, #20]
20001b00:	f003 0320 	and.w	r3, r3, #32
20001b04:	2b00      	cmp	r3, #0
20001b06:	d0f7      	beq.n	20001af8 <ui_cmd_write_I2C+0x80>

    // Read back the written value to verify
    while (((temp = I2C->I2C_ISR) & 0x1) == 0) {}
20001b08:	bf00      	nop
20001b0a:	4b21      	ldr	r3, [pc, #132]	@ (20001b90 <ui_cmd_write_I2C+0x118>)
20001b0c:	699b      	ldr	r3, [r3, #24]
20001b0e:	617b      	str	r3, [r7, #20]
20001b10:	697b      	ldr	r3, [r7, #20]
20001b12:	f003 0301 	and.w	r3, r3, #1
20001b16:	2b00      	cmp	r3, #0
20001b18:	d0f7      	beq.n	20001b0a <ui_cmd_write_I2C+0x92>

    I2C->I2C_TXDR = reg_address; // Register address
20001b1a:	4a1d      	ldr	r2, [pc, #116]	@ (20001b90 <ui_cmd_write_I2C+0x118>)
20001b1c:	69fb      	ldr	r3, [r7, #28]
20001b1e:	6293      	str	r3, [r2, #40]	@ 0x28
    I2C->I2C_CR2 = 0x2012082; // I2C device address
20001b20:	4b1b      	ldr	r3, [pc, #108]	@ (20001b90 <ui_cmd_write_I2C+0x118>)
20001b22:	4a1d      	ldr	r2, [pc, #116]	@ (20001b98 <ui_cmd_write_I2C+0x120>)
20001b24:	605a      	str	r2, [r3, #4]

    while (((temp = I2C->I2C_ISR) & 0x1) == 0) {}
20001b26:	bf00      	nop
20001b28:	4b19      	ldr	r3, [pc, #100]	@ (20001b90 <ui_cmd_write_I2C+0x118>)
20001b2a:	699b      	ldr	r3, [r3, #24]
20001b2c:	617b      	str	r3, [r7, #20]
20001b2e:	697b      	ldr	r3, [r7, #20]
20001b30:	f003 0301 	and.w	r3, r3, #1
20001b34:	2b00      	cmp	r3, #0
20001b36:	d0f7      	beq.n	20001b28 <ui_cmd_write_I2C+0xb0>

    // Wait for STOPF
    temp = 0;
20001b38:	2300      	movs	r3, #0
20001b3a:	617b      	str	r3, [r7, #20]
    while (((temp = I2C->I2C_ISR) & 0x20) == 0) {}
20001b3c:	bf00      	nop
20001b3e:	4b14      	ldr	r3, [pc, #80]	@ (20001b90 <ui_cmd_write_I2C+0x118>)
20001b40:	699b      	ldr	r3, [r3, #24]
20001b42:	617b      	str	r3, [r7, #20]
20001b44:	697b      	ldr	r3, [r7, #20]
20001b46:	f003 0320 	and.w	r3, r3, #32
20001b4a:	2b00      	cmp	r3, #0
20001b4c:	d0f7      	beq.n	20001b3e <ui_cmd_write_I2C+0xc6>

    I2C->I2C_CR2 = 0x2012482; // Update CR2 register
20001b4e:	4b10      	ldr	r3, [pc, #64]	@ (20001b90 <ui_cmd_write_I2C+0x118>)
20001b50:	4a12      	ldr	r2, [pc, #72]	@ (20001b9c <ui_cmd_write_I2C+0x124>)
20001b52:	605a      	str	r2, [r3, #4]

    // Wait for RXNE
    uint32_t RXNE_BUSY = 0;
20001b54:	2300      	movs	r3, #0
20001b56:	613b      	str	r3, [r7, #16]
    while (((RXNE_BUSY = I2C->I2C_ISR) & 0x4) == 0) {}
20001b58:	bf00      	nop
20001b5a:	4b0d      	ldr	r3, [pc, #52]	@ (20001b90 <ui_cmd_write_I2C+0x118>)
20001b5c:	699b      	ldr	r3, [r3, #24]
20001b5e:	613b      	str	r3, [r7, #16]
20001b60:	693b      	ldr	r3, [r7, #16]
20001b62:	f003 0304 	and.w	r3, r3, #4
20001b66:	2b00      	cmp	r3, #0
20001b68:	d0f7      	beq.n	20001b5a <ui_cmd_write_I2C+0xe2>

    uint32_t received_data = I2C->I2C_RXDR;
20001b6a:	4b09      	ldr	r3, [pc, #36]	@ (20001b90 <ui_cmd_write_I2C+0x118>)
20001b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20001b6e:	60fb      	str	r3, [r7, #12]

    // Print results
    printf("Writing 0x%02X to register 0x%02X\n", value_to_send, reg_address);
20001b70:	69fa      	ldr	r2, [r7, #28]
20001b72:	69b9      	ldr	r1, [r7, #24]
20001b74:	480a      	ldr	r0, [pc, #40]	@ (20001ba0 <ui_cmd_write_I2C+0x128>)
20001b76:	f7ff f905 	bl	20000d84 <printf>
    printf("Received data: 0x%08X\n", received_data);
20001b7a:	68f9      	ldr	r1, [r7, #12]
20001b7c:	4809      	ldr	r0, [pc, #36]	@ (20001ba4 <ui_cmd_write_I2C+0x12c>)
20001b7e:	f7ff f901 	bl	20000d84 <printf>

    return 0;
20001b82:	2300      	movs	r3, #0
}
20001b84:	4618      	mov	r0, r3
20001b86:	3728      	adds	r7, #40	@ 0x28
20001b88:	46bd      	mov	sp, r7
20001b8a:	bd80      	pop	{r7, pc}
20001b8c:	20002740 	.word	0x20002740
20001b90:	40005400 	.word	0x40005400
20001b94:	02022082 	.word	0x02022082
20001b98:	02012082 	.word	0x02012082
20001b9c:	02012482 	.word	0x02012482
20001ba0:	20002770 	.word	0x20002770
20001ba4:	20002728 	.word	0x20002728

20001ba8 <ui_cmd_joystick>:


static int ui_cmd_joystick(int argc, char *argv[])
{
20001ba8:	b580      	push	{r7, lr}
20001baa:	b082      	sub	sp, #8
20001bac:	af00      	add	r7, sp, #0
20001bae:	6078      	str	r0, [r7, #4]
20001bb0:	6039      	str	r1, [r7, #0]
    state_str = cmd_getarg(cmd, 0);
    state = atoi(state_str);

*/
    // *(volatile uint32_t *)(0x40005404) = 0x12084;
	I2C_Init_INIT2();
20001bb2:	f7ff fd9b 	bl	200016ec <I2C_Init_INIT2>


    while(1){

    	if((READ_I2C_IO2(0x10) & 1) == 0){
20001bb6:	2010      	movs	r0, #16
20001bb8:	f7ff ff22 	bl	20001a00 <READ_I2C_IO2>
20001bbc:	4603      	mov	r3, r0
20001bbe:	f003 0301 	and.w	r3, r3, #1
20001bc2:	2b00      	cmp	r3, #0
20001bc4:	d103      	bne.n	20001bce <ui_cmd_joystick+0x26>
    		printf("SEL\r");
20001bc6:	481c      	ldr	r0, [pc, #112]	@ (20001c38 <ui_cmd_joystick+0x90>)
20001bc8:	f7ff f8dc 	bl	20000d84 <printf>
    		break;
20001bcc:	e02c      	b.n	20001c28 <ui_cmd_joystick+0x80>
    	}
    	if((READ_I2C_IO2(0x10) & 2) == 0){
20001bce:	2010      	movs	r0, #16
20001bd0:	f7ff ff16 	bl	20001a00 <READ_I2C_IO2>
20001bd4:	4603      	mov	r3, r0
20001bd6:	f003 0302 	and.w	r3, r3, #2
20001bda:	2b00      	cmp	r3, #0
20001bdc:	d102      	bne.n	20001be4 <ui_cmd_joystick+0x3c>
    		printf("DOWN   \r");
20001bde:	4817      	ldr	r0, [pc, #92]	@ (20001c3c <ui_cmd_joystick+0x94>)
20001be0:	f7ff f8d0 	bl	20000d84 <printf>
    	}
    	if((READ_I2C_IO2(0x10) & 4) == 0){
20001be4:	2010      	movs	r0, #16
20001be6:	f7ff ff0b 	bl	20001a00 <READ_I2C_IO2>
20001bea:	4603      	mov	r3, r0
20001bec:	f003 0304 	and.w	r3, r3, #4
20001bf0:	2b00      	cmp	r3, #0
20001bf2:	d102      	bne.n	20001bfa <ui_cmd_joystick+0x52>
    		printf("LEFT \r");
20001bf4:	4812      	ldr	r0, [pc, #72]	@ (20001c40 <ui_cmd_joystick+0x98>)
20001bf6:	f7ff f8c5 	bl	20000d84 <printf>
    	}
    	if((READ_I2C_IO2(0x10) & 8) == 0){
20001bfa:	2010      	movs	r0, #16
20001bfc:	f7ff ff00 	bl	20001a00 <READ_I2C_IO2>
20001c00:	4603      	mov	r3, r0
20001c02:	f003 0308 	and.w	r3, r3, #8
20001c06:	2b00      	cmp	r3, #0
20001c08:	d102      	bne.n	20001c10 <ui_cmd_joystick+0x68>
    		printf("RIGHT \r");
20001c0a:	480e      	ldr	r0, [pc, #56]	@ (20001c44 <ui_cmd_joystick+0x9c>)
20001c0c:	f7ff f8ba 	bl	20000d84 <printf>
    	}
    	if((READ_I2C_IO2(0x10) & 16) == 0){
20001c10:	2010      	movs	r0, #16
20001c12:	f7ff fef5 	bl	20001a00 <READ_I2C_IO2>
20001c16:	4603      	mov	r3, r0
20001c18:	f003 0310 	and.w	r3, r3, #16
20001c1c:	2b00      	cmp	r3, #0
20001c1e:	d1ca      	bne.n	20001bb6 <ui_cmd_joystick+0xe>
    		printf("UP      \r");
20001c20:	4809      	ldr	r0, [pc, #36]	@ (20001c48 <ui_cmd_joystick+0xa0>)
20001c22:	f7ff f8af 	bl	20000d84 <printf>
    	if((READ_I2C_IO2(0x10) & 1) == 0){
20001c26:	e7c6      	b.n	20001bb6 <ui_cmd_joystick+0xe>
    	}

    }
    printf("joystick end");
20001c28:	4808      	ldr	r0, [pc, #32]	@ (20001c4c <ui_cmd_joystick+0xa4>)
20001c2a:	f7ff f8ab 	bl	20000d84 <printf>

    return 0;
20001c2e:	2300      	movs	r3, #0
}
20001c30:	4618      	mov	r0, r3
20001c32:	3708      	adds	r7, #8
20001c34:	46bd      	mov	sp, r7
20001c36:	bd80      	pop	{r7, pc}
20001c38:	20002794 	.word	0x20002794
20001c3c:	2000279c 	.word	0x2000279c
20001c40:	200027a8 	.word	0x200027a8
20001c44:	200027b0 	.word	0x200027b0
20001c48:	200027b8 	.word	0x200027b8
20001c4c:	200027c4 	.word	0x200027c4

20001c50 <write_I2C_IO2>:

static int write_I2C_IO2(int reg_address, int value_to_send)
{
20001c50:	b580      	push	{r7, lr}
20001c52:	b086      	sub	sp, #24
20001c54:	af00      	add	r7, sp, #0
20001c56:	6078      	str	r0, [r7, #4]
20001c58:	6039      	str	r1, [r7, #0]

	I2C_Init();
20001c5a:	f7ff fca5 	bl	200015a8 <I2C_Init>

    //printf("Writing 0x%02X to register 0x%02X", value_to_send, reg_address);

    // RECorrections for printing function
    //*(volatile uint32_t *)(0x40021088) = 0; // RCC I2C clock selection
    uint32_t temp = 0;
20001c5e:	2300      	movs	r3, #0
20001c60:	617b      	str	r3, [r7, #20]

    while (((temp = *(volatile uint32_t *)(0x40005418)) & 0x1) == 0) {}
20001c62:	bf00      	nop
20001c64:	4b34      	ldr	r3, [pc, #208]	@ (20001d38 <write_I2C_IO2+0xe8>)
20001c66:	681b      	ldr	r3, [r3, #0]
20001c68:	617b      	str	r3, [r7, #20]
20001c6a:	697b      	ldr	r3, [r7, #20]
20001c6c:	f003 0301 	and.w	r3, r3, #1
20001c70:	2b00      	cmp	r3, #0
20001c72:	d0f7      	beq.n	20001c64 <write_I2C_IO2+0x14>

    *(volatile uint32_t *)(0x40005428) = reg_address; // Register address
20001c74:	4a31      	ldr	r2, [pc, #196]	@ (20001d3c <write_I2C_IO2+0xec>)
20001c76:	687b      	ldr	r3, [r7, #4]
20001c78:	6013      	str	r3, [r2, #0]
    // *(volatile uint32_t *)(0x40005428) = value_to_send; // Data to send

    *(volatile uint32_t *)(0x40005404) = 0x2022084; // 7217, 82 device address
20001c7a:	4b31      	ldr	r3, [pc, #196]	@ (20001d40 <write_I2C_IO2+0xf0>)
20001c7c:	4a31      	ldr	r2, [pc, #196]	@ (20001d44 <write_I2C_IO2+0xf4>)
20001c7e:	601a      	str	r2, [r3, #0]

    while (((temp = *(volatile uint32_t *)(0x40005418)) & 0x1) == 0) {}
20001c80:	bf00      	nop
20001c82:	4b2d      	ldr	r3, [pc, #180]	@ (20001d38 <write_I2C_IO2+0xe8>)
20001c84:	681b      	ldr	r3, [r3, #0]
20001c86:	617b      	str	r3, [r7, #20]
20001c88:	697b      	ldr	r3, [r7, #20]
20001c8a:	f003 0301 	and.w	r3, r3, #1
20001c8e:	2b00      	cmp	r3, #0
20001c90:	d0f7      	beq.n	20001c82 <write_I2C_IO2+0x32>

    *(volatile uint32_t *)(0x40005428) = value_to_send;
20001c92:	4a2a      	ldr	r2, [pc, #168]	@ (20001d3c <write_I2C_IO2+0xec>)
20001c94:	683b      	ldr	r3, [r7, #0]
20001c96:	6013      	str	r3, [r2, #0]
    // Wait for STOPF
    temp = 0;
20001c98:	2300      	movs	r3, #0
20001c9a:	617b      	str	r3, [r7, #20]
    while (((temp = *(volatile uint32_t *)(0x40005418)) & 0x20) == 0) {}
20001c9c:	bf00      	nop
20001c9e:	4b26      	ldr	r3, [pc, #152]	@ (20001d38 <write_I2C_IO2+0xe8>)
20001ca0:	681b      	ldr	r3, [r3, #0]
20001ca2:	617b      	str	r3, [r7, #20]
20001ca4:	697b      	ldr	r3, [r7, #20]
20001ca6:	f003 0320 	and.w	r3, r3, #32
20001caa:	2b00      	cmp	r3, #0
20001cac:	d0f7      	beq.n	20001c9e <write_I2C_IO2+0x4e>
    //printf("Reading back register 0x%02X", reg_address);

    // RECorrections for printing function
    //*(volatile uint32_t *)(0x40021088) = 0; // RCC I2C clock selection

    while (((temp = *(volatile uint32_t *)(0x40005418)) & 0x1) == 0) {}
20001cae:	bf00      	nop
20001cb0:	4b21      	ldr	r3, [pc, #132]	@ (20001d38 <write_I2C_IO2+0xe8>)
20001cb2:	681b      	ldr	r3, [r3, #0]
20001cb4:	617b      	str	r3, [r7, #20]
20001cb6:	697b      	ldr	r3, [r7, #20]
20001cb8:	f003 0301 	and.w	r3, r3, #1
20001cbc:	2b00      	cmp	r3, #0
20001cbe:	d0f7      	beq.n	20001cb0 <write_I2C_IO2+0x60>

    *(volatile uint32_t *)(0x40005428) = reg_address; // Register address
20001cc0:	4a1e      	ldr	r2, [pc, #120]	@ (20001d3c <write_I2C_IO2+0xec>)
20001cc2:	687b      	ldr	r3, [r7, #4]
20001cc4:	6013      	str	r3, [r2, #0]
    // *(volatile uint32_t *)(0x40005428) = value_to_send; // Data to send

    *(volatile uint32_t *)(0x40005404) = 0x2012084; // 7217, 82 device address
20001cc6:	4b1e      	ldr	r3, [pc, #120]	@ (20001d40 <write_I2C_IO2+0xf0>)
20001cc8:	4a1f      	ldr	r2, [pc, #124]	@ (20001d48 <write_I2C_IO2+0xf8>)
20001cca:	601a      	str	r2, [r3, #0]

    while (((temp = *(volatile uint32_t *)(0x40005418)) & 0x1) == 0) {}
20001ccc:	bf00      	nop
20001cce:	4b1a      	ldr	r3, [pc, #104]	@ (20001d38 <write_I2C_IO2+0xe8>)
20001cd0:	681b      	ldr	r3, [r3, #0]
20001cd2:	617b      	str	r3, [r7, #20]
20001cd4:	697b      	ldr	r3, [r7, #20]
20001cd6:	f003 0301 	and.w	r3, r3, #1
20001cda:	2b00      	cmp	r3, #0
20001cdc:	d0f7      	beq.n	20001cce <write_I2C_IO2+0x7e>

    // Wait for STOPF
    temp = 0;
20001cde:	2300      	movs	r3, #0
20001ce0:	617b      	str	r3, [r7, #20]
    while (((temp = *(volatile uint32_t *)(0x40005418)) & 0x20) == 0) {}
20001ce2:	bf00      	nop
20001ce4:	4b14      	ldr	r3, [pc, #80]	@ (20001d38 <write_I2C_IO2+0xe8>)
20001ce6:	681b      	ldr	r3, [r3, #0]
20001ce8:	617b      	str	r3, [r7, #20]
20001cea:	697b      	ldr	r3, [r7, #20]
20001cec:	f003 0320 	and.w	r3, r3, #32
20001cf0:	2b00      	cmp	r3, #0
20001cf2:	d0f7      	beq.n	20001ce4 <write_I2C_IO2+0x94>

    *(volatile uint32_t *)(0x40005404) = 0x2012484; // 7217 update CR2 register
20001cf4:	4b12      	ldr	r3, [pc, #72]	@ (20001d40 <write_I2C_IO2+0xf0>)
20001cf6:	4a15      	ldr	r2, [pc, #84]	@ (20001d4c <write_I2C_IO2+0xfc>)
20001cf8:	601a      	str	r2, [r3, #0]

    // Wait for RXNE
    uint32_t RXNE_BUSY = 0;
20001cfa:	2300      	movs	r3, #0
20001cfc:	613b      	str	r3, [r7, #16]
    while (((RXNE_BUSY = *(volatile uint32_t *)(0x40005418)) & 0x4) == 0) {}
20001cfe:	bf00      	nop
20001d00:	4b0d      	ldr	r3, [pc, #52]	@ (20001d38 <write_I2C_IO2+0xe8>)
20001d02:	681b      	ldr	r3, [r3, #0]
20001d04:	613b      	str	r3, [r7, #16]
20001d06:	693b      	ldr	r3, [r7, #16]
20001d08:	f003 0304 	and.w	r3, r3, #4
20001d0c:	2b00      	cmp	r3, #0
20001d0e:	d0f7      	beq.n	20001d00 <write_I2C_IO2+0xb0>

    uint32_t received_data = *(volatile uint32_t *)(0x40005424);
20001d10:	4b0f      	ldr	r3, [pc, #60]	@ (20001d50 <write_I2C_IO2+0x100>)
20001d12:	681b      	ldr	r3, [r3, #0]
20001d14:	60fb      	str	r3, [r7, #12]

    // Corrections for printing function
	*(volatile uint32_t *)(0x40021088) = 0x2;
20001d16:	4b0f      	ldr	r3, [pc, #60]	@ (20001d54 <write_I2C_IO2+0x104>)
20001d18:	2202      	movs	r2, #2
20001d1a:	601a      	str	r2, [r3, #0]
	printf("Writing 0x%02X to register 0x%02X\n", value_to_send, reg_address);
20001d1c:	687a      	ldr	r2, [r7, #4]
20001d1e:	6839      	ldr	r1, [r7, #0]
20001d20:	480d      	ldr	r0, [pc, #52]	@ (20001d58 <write_I2C_IO2+0x108>)
20001d22:	f7ff f82f 	bl	20000d84 <printf>
    printf("Received data: 0x%08X\n", received_data);
20001d26:	68f9      	ldr	r1, [r7, #12]
20001d28:	480c      	ldr	r0, [pc, #48]	@ (20001d5c <write_I2C_IO2+0x10c>)
20001d2a:	f7ff f82b 	bl	20000d84 <printf>



    return 0;
20001d2e:	2300      	movs	r3, #0
}
20001d30:	4618      	mov	r0, r3
20001d32:	3718      	adds	r7, #24
20001d34:	46bd      	mov	sp, r7
20001d36:	bd80      	pop	{r7, pc}
20001d38:	40005418 	.word	0x40005418
20001d3c:	40005428 	.word	0x40005428
20001d40:	40005404 	.word	0x40005404
20001d44:	02022084 	.word	0x02022084
20001d48:	02012084 	.word	0x02012084
20001d4c:	02012484 	.word	0x02012484
20001d50:	40005424 	.word	0x40005424
20001d54:	40021088 	.word	0x40021088
20001d58:	20002770 	.word	0x20002770
20001d5c:	20002728 	.word	0x20002728

20001d60 <write_GPIOx_MODER>:
// #define GPIOA ((GPIOX_TypeDef *)0x48000000) &= << |= <<
//#define GPIOB ((GPIOX_TypeDef *)0x48000400)
//#define GPIOC ((GPIOX_TypeDef *)0x48000800)
//#define GPIOG ((GPIOX_TypeDef *)0x48001800)

static void write_GPIOx_MODER(int gpio_address, int pin_idx, int mode) {
20001d60:	b580      	push	{r7, lr}
20001d62:	b088      	sub	sp, #32
20001d64:	af00      	add	r7, sp, #0
20001d66:	60f8      	str	r0, [r7, #12]
20001d68:	60b9      	str	r1, [r7, #8]
20001d6a:	607a      	str	r2, [r7, #4]

	*(volatile uint32_t *)(0x40007004) = 0x200;
20001d6c:	4b19      	ldr	r3, [pc, #100]	@ (20001dd4 <write_GPIOx_MODER+0x74>)
20001d6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
20001d72:	601a      	str	r2, [r3, #0]

    volatile uint32_t *RCC_AHB2ENR = (uint32_t *)(0x40021000 + 0x4C);
20001d74:	4b18      	ldr	r3, [pc, #96]	@ (20001dd8 <write_GPIOx_MODER+0x78>)
20001d76:	61fb      	str	r3, [r7, #28]
    *RCC_AHB2ENR = 0xf;
20001d78:	69fb      	ldr	r3, [r7, #28]
20001d7a:	220f      	movs	r2, #15
20001d7c:	601a      	str	r2, [r3, #0]

    volatile uint32_t *RCC_APB1ENR1 = (uint32_t *)(0x40021000 + 0x58);
20001d7e:	4b17      	ldr	r3, [pc, #92]	@ (20001ddc <write_GPIOx_MODER+0x7c>)
20001d80:	61bb      	str	r3, [r7, #24]
    *RCC_APB1ENR1 |= (1 << 28);
20001d82:	69bb      	ldr	r3, [r7, #24]
20001d84:	681b      	ldr	r3, [r3, #0]
20001d86:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
20001d8a:	69bb      	ldr	r3, [r7, #24]
20001d8c:	601a      	str	r2, [r3, #0]


	volatile uint32_t *GPIO_MODER = (volatile uint32_t *)(gpio_address);
20001d8e:	68fb      	ldr	r3, [r7, #12]
20001d90:	617b      	str	r3, [r7, #20]
    int pos = pin_idx * 2;
20001d92:	68bb      	ldr	r3, [r7, #8]
20001d94:	005b      	lsls	r3, r3, #1
20001d96:	613b      	str	r3, [r7, #16]

    *GPIO_MODER &= ~(0x3 << pos);
20001d98:	697b      	ldr	r3, [r7, #20]
20001d9a:	681b      	ldr	r3, [r3, #0]
20001d9c:	2103      	movs	r1, #3
20001d9e:	693a      	ldr	r2, [r7, #16]
20001da0:	fa01 f202 	lsl.w	r2, r1, r2
20001da4:	43d2      	mvns	r2, r2
20001da6:	401a      	ands	r2, r3
20001da8:	697b      	ldr	r3, [r7, #20]
20001daa:	601a      	str	r2, [r3, #0]

    *GPIO_MODER |= (mode << pos);
20001dac:	697b      	ldr	r3, [r7, #20]
20001dae:	681b      	ldr	r3, [r3, #0]
20001db0:	6879      	ldr	r1, [r7, #4]
20001db2:	693a      	ldr	r2, [r7, #16]
20001db4:	fa01 f202 	lsl.w	r2, r1, r2
20001db8:	431a      	orrs	r2, r3
20001dba:	697b      	ldr	r3, [r7, #20]
20001dbc:	601a      	str	r2, [r3, #0]


    printf("Written mode %d to GPIO at address 0x%08X, pin %d\n", mode, gpio_address, pin_idx);
20001dbe:	68bb      	ldr	r3, [r7, #8]
20001dc0:	68fa      	ldr	r2, [r7, #12]
20001dc2:	6879      	ldr	r1, [r7, #4]
20001dc4:	4806      	ldr	r0, [pc, #24]	@ (20001de0 <write_GPIOx_MODER+0x80>)
20001dc6:	f7fe ffdd 	bl	20000d84 <printf>
}
20001dca:	bf00      	nop
20001dcc:	3720      	adds	r7, #32
20001dce:	46bd      	mov	sp, r7
20001dd0:	bd80      	pop	{r7, pc}
20001dd2:	bf00      	nop
20001dd4:	40007004 	.word	0x40007004
20001dd8:	4002104c 	.word	0x4002104c
20001ddc:	40021058 	.word	0x40021058
20001de0:	200027d4 	.word	0x200027d4

20001de4 <read_GPIOx_IDX>:
    *GPIO_PUPDR |= (pupdr_mode << pos);

    printf("Written PUPDR mode %d to GPIO at address 0x%08X, pin %d\n", pupdr_mode, gpio_address, pin_idx);
}
static int read_GPIOx_IDX(int gpio_address, int idx, int gpio_register)
{
20001de4:	b580      	push	{r7, lr}
20001de6:	b086      	sub	sp, #24
20001de8:	af00      	add	r7, sp, #0
20001dea:	60f8      	str	r0, [r7, #12]
20001dec:	60b9      	str	r1, [r7, #8]
20001dee:	607a      	str	r2, [r7, #4]
	//write_GPIOx_PUPDR(gpio_address, idx, 1);
	write_GPIOx_MODER(gpio_address, idx, 0);
20001df0:	2200      	movs	r2, #0
20001df2:	68b9      	ldr	r1, [r7, #8]
20001df4:	68f8      	ldr	r0, [r7, #12]
20001df6:	f7ff ffb3 	bl	20001d60 <write_GPIOx_MODER>


	volatile uint32_t *GPIO_IDR = (volatile uint32_t *)(gpio_address + gpio_register);
20001dfa:	68fa      	ldr	r2, [r7, #12]
20001dfc:	687b      	ldr	r3, [r7, #4]
20001dfe:	4413      	add	r3, r2
20001e00:	617b      	str	r3, [r7, #20]


    uint32_t pin_value = (*GPIO_IDR >> idx) & 0x1;
20001e02:	697b      	ldr	r3, [r7, #20]
20001e04:	681a      	ldr	r2, [r3, #0]
20001e06:	68bb      	ldr	r3, [r7, #8]
20001e08:	fa22 f303 	lsr.w	r3, r2, r3
20001e0c:	f003 0301 	and.w	r3, r3, #1
20001e10:	613b      	str	r3, [r7, #16]


    printf("Reading GPIO at address 0x%08X, pin %d: %d\n", (gpio_address + gpio_register), idx, pin_value);
20001e12:	68fa      	ldr	r2, [r7, #12]
20001e14:	687b      	ldr	r3, [r7, #4]
20001e16:	18d1      	adds	r1, r2, r3
20001e18:	693b      	ldr	r3, [r7, #16]
20001e1a:	68ba      	ldr	r2, [r7, #8]
20001e1c:	4803      	ldr	r0, [pc, #12]	@ (20001e2c <read_GPIOx_IDX+0x48>)
20001e1e:	f7fe ffb1 	bl	20000d84 <printf>

    return pin_value;
20001e22:	693b      	ldr	r3, [r7, #16]
}
20001e24:	4618      	mov	r0, r3
20001e26:	3718      	adds	r7, #24
20001e28:	46bd      	mov	sp, r7
20001e2a:	bd80      	pop	{r7, pc}
20001e2c:	20002844 	.word	0x20002844

20001e30 <codetest>:

void codetest(int argc, char *argv[]){
20001e30:	b580      	push	{r7, lr}
20001e32:	b084      	sub	sp, #16
20001e34:	af00      	add	r7, sp, #0
20001e36:	6078      	str	r0, [r7, #4]
20001e38:	6039      	str	r1, [r7, #0]
	//write_GPIOx_MODER(0x48001800, 15, 1);
    int x = read_GPIOx_IDX(0x48000800, 13, 0);
20001e3a:	2200      	movs	r2, #0
20001e3c:	210d      	movs	r1, #13
20001e3e:	480b      	ldr	r0, [pc, #44]	@ (20001e6c <codetest+0x3c>)
20001e40:	f7ff ffd0 	bl	20001de4 <read_GPIOx_IDX>
20001e44:	60f8      	str	r0, [r7, #12]
    printf("GPIO PG15 state: %d\n", x);
20001e46:	68f9      	ldr	r1, [r7, #12]
20001e48:	4809      	ldr	r0, [pc, #36]	@ (20001e70 <codetest+0x40>)
20001e4a:	f7fe ff9b 	bl	20000d84 <printf>
    int pg15_state = read_GPIOx_IDX(0x48000800, 13, 0x10);
20001e4e:	2210      	movs	r2, #16
20001e50:	210d      	movs	r1, #13
20001e52:	4806      	ldr	r0, [pc, #24]	@ (20001e6c <codetest+0x3c>)
20001e54:	f7ff ffc6 	bl	20001de4 <read_GPIOx_IDX>
20001e58:	60b8      	str	r0, [r7, #8]
    printf("GPIO PG15 state: %d\n", pg15_state);
20001e5a:	68b9      	ldr	r1, [r7, #8]
20001e5c:	4804      	ldr	r0, [pc, #16]	@ (20001e70 <codetest+0x40>)
20001e5e:	f7fe ff91 	bl	20000d84 <printf>
}
20001e62:	bf00      	nop
20001e64:	3710      	adds	r7, #16
20001e66:	46bd      	mov	sp, r7
20001e68:	bd80      	pop	{r7, pc}
20001e6a:	bf00      	nop
20001e6c:	48000800 	.word	0x48000800
20001e70:	20002870 	.word	0x20002870

20001e74 <i2c_joystick_handler>:

static int i2c_joystick_handler(int argc, char *argv[]) {
20001e74:	b580      	push	{r7, lr}
20001e76:	b088      	sub	sp, #32
20001e78:	af00      	add	r7, sp, #0
20001e7a:	6078      	str	r0, [r7, #4]
20001e7c:	6039      	str	r1, [r7, #0]

	I2C_Init_INIT2();
20001e7e:	f7ff fc35 	bl	200016ec <I2C_Init_INIT2>

	write_I2C_IO2(0x08,0x0F);
20001e82:	210f      	movs	r1, #15
20001e84:	2008      	movs	r0, #8
20001e86:	f7ff fee3 	bl	20001c50 <write_I2C_IO2>

    uint32_t interrupt_status_lsb = READ_I2C_IO2(0x08);
20001e8a:	2008      	movs	r0, #8
20001e8c:	f7ff fdb8 	bl	20001a00 <READ_I2C_IO2>
20001e90:	4603      	mov	r3, r0
20001e92:	61fb      	str	r3, [r7, #28]
    uint32_t interrupt_status_msb = READ_I2C_IO2(0x09);
20001e94:	2009      	movs	r0, #9
20001e96:	f7ff fdb3 	bl	20001a00 <READ_I2C_IO2>
20001e9a:	4603      	mov	r3, r0
20001e9c:	61bb      	str	r3, [r7, #24]

    printf("LSB 0x%02X\n", interrupt_status_lsb);
20001e9e:	69f9      	ldr	r1, [r7, #28]
20001ea0:	4813      	ldr	r0, [pc, #76]	@ (20001ef0 <i2c_joystick_handler+0x7c>)
20001ea2:	f7fe ff6f 	bl	20000d84 <printf>
    printf("MSB 0x%02X\n", interrupt_status_msb);
20001ea6:	69b9      	ldr	r1, [r7, #24]
20001ea8:	4812      	ldr	r0, [pc, #72]	@ (20001ef4 <i2c_joystick_handler+0x80>)
20001eaa:	f7fe ff6b 	bl	20000d84 <printf>

    uint32_t ISGPIOR_lsb = READ_I2C_IO2(0x0A);
20001eae:	200a      	movs	r0, #10
20001eb0:	f7ff fda6 	bl	20001a00 <READ_I2C_IO2>
20001eb4:	4603      	mov	r3, r0
20001eb6:	617b      	str	r3, [r7, #20]
    uint32_t ISGPIOR_msb = READ_I2C_IO2(0x0B);
20001eb8:	200b      	movs	r0, #11
20001eba:	f7ff fda1 	bl	20001a00 <READ_I2C_IO2>
20001ebe:	4603      	mov	r3, r0
20001ec0:	613b      	str	r3, [r7, #16]

    printf("ISGPIOR_LSB 0x%02X\n", ISGPIOR_lsb);
20001ec2:	6979      	ldr	r1, [r7, #20]
20001ec4:	480c      	ldr	r0, [pc, #48]	@ (20001ef8 <i2c_joystick_handler+0x84>)
20001ec6:	f7fe ff5d 	bl	20000d84 <printf>
    printf("ISGPIOR_MSB 0x%02X\n", ISGPIOR_msb);
20001eca:	6939      	ldr	r1, [r7, #16]
20001ecc:	480b      	ldr	r0, [pc, #44]	@ (20001efc <i2c_joystick_handler+0x88>)
20001ece:	f7fe ff59 	bl	20000d84 <printf>

    int pg15_state = read_GPIOx_IDX(0x48001800, 15, 0x10);
20001ed2:	2210      	movs	r2, #16
20001ed4:	210f      	movs	r1, #15
20001ed6:	480a      	ldr	r0, [pc, #40]	@ (20001f00 <i2c_joystick_handler+0x8c>)
20001ed8:	f7ff ff84 	bl	20001de4 <read_GPIOx_IDX>
20001edc:	60f8      	str	r0, [r7, #12]
    printf("GPIO PG15 state: %d\n", pg15_state);
20001ede:	68f9      	ldr	r1, [r7, #12]
20001ee0:	4808      	ldr	r0, [pc, #32]	@ (20001f04 <i2c_joystick_handler+0x90>)
20001ee2:	f7fe ff4f 	bl	20000d84 <printf>

    return 0;
20001ee6:	2300      	movs	r3, #0
        if ((joystick_state & 16) == 0) {
            printf("UP\r");
        }
    }
*/
}
20001ee8:	4618      	mov	r0, r3
20001eea:	3720      	adds	r7, #32
20001eec:	46bd      	mov	sp, r7
20001eee:	bd80      	pop	{r7, pc}
20001ef0:	20002888 	.word	0x20002888
20001ef4:	20002894 	.word	0x20002894
20001ef8:	200028a0 	.word	0x200028a0
20001efc:	200028b4 	.word	0x200028b4
20001f00:	48001800 	.word	0x48001800
20001f04:	20002870 	.word	0x20002870

20001f08 <uart_handler>:

static int uart_handler(int argc, char *argv[]){
20001f08:	b580      	push	{r7, lr}
20001f0a:	b082      	sub	sp, #8
20001f0c:	af00      	add	r7, sp, #0
20001f0e:	6078      	str	r0, [r7, #4]
20001f10:	6039      	str	r1, [r7, #0]

	*(volatile uint32_t *)0xE000ED08 = 0x20000000;
20001f12:	4b08      	ldr	r3, [pc, #32]	@ (20001f34 <uart_handler+0x2c>)
20001f14:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
20001f18:	601a      	str	r2, [r3, #0]

	*(volatile uint32_t *)0xE000E104 = 0x20;
20001f1a:	4b07      	ldr	r3, [pc, #28]	@ (20001f38 <uart_handler+0x30>)
20001f1c:	2220      	movs	r2, #32
20001f1e:	601a      	str	r2, [r3, #0]
//	(*(volatile uint32_t *)0x40021058)|= (1 << 17); //RCC->APB1ENR1

	//(*(volatile uint32_t *)0x4000440C) = 0xD0;
	(*(volatile uint32_t *)0x40013800) |= 0x2D; //10 1101
20001f20:	4b06      	ldr	r3, [pc, #24]	@ (20001f3c <uart_handler+0x34>)
20001f22:	681b      	ldr	r3, [r3, #0]
20001f24:	4a05      	ldr	r2, [pc, #20]	@ (20001f3c <uart_handler+0x34>)
20001f26:	f043 032d 	orr.w	r3, r3, #45	@ 0x2d
20001f2a:	6013      	str	r3, [r2, #0]
//	(*(volatile uint32_t *)0x40004400) |= 0x2D;


	//(*(volatile uint32_t *)0xE000E104) = 0x7;
	while(1){
		printf("hello\n");
20001f2c:	4804      	ldr	r0, [pc, #16]	@ (20001f40 <uart_handler+0x38>)
20001f2e:	f7fe ff29 	bl	20000d84 <printf>
20001f32:	e7fb      	b.n	20001f2c <uart_handler+0x24>
20001f34:	e000ed08 	.word	0xe000ed08
20001f38:	e000e104 	.word	0xe000e104
20001f3c:	40013800 	.word	0x40013800
20001f40:	200028c8 	.word	0x200028c8

20001f44 <mytest_1>:

	return 0;

}

void mytest_1(){
20001f44:	b580      	push	{r7, lr}
20001f46:	b082      	sub	sp, #8
20001f48:	af00      	add	r7, sp, #0
	printf("hello");
20001f4a:	4806      	ldr	r0, [pc, #24]	@ (20001f64 <mytest_1+0x20>)
20001f4c:	f7fe ff1a 	bl	20000d84 <printf>
    // Clear the USART interrupt flag
    //volatile uint32_t *USART1_ICR = (volatile uint32_t *)(0x40013800 + 0x1C);

    // Clear the RXNE interrupt flag
    //volatile uint32_t *USART1_ISR = (volatile uint32_t *)(0x40013800 + 0x1C); // USART_ISR register
    volatile uint32_t USART1_ICR = *(volatile uint32_t *)(0x40013800 + 0x24); // USART_ICR register
20001f50:	4b05      	ldr	r3, [pc, #20]	@ (20001f68 <mytest_1+0x24>)
20001f52:	681b      	ldr	r3, [r3, #0]
20001f54:	607b      	str	r3, [r7, #4]

    //printf("%c", USART1_ISR );
    printf("%c", USART1_ICR );
20001f56:	687b      	ldr	r3, [r7, #4]
20001f58:	4619      	mov	r1, r3
20001f5a:	4804      	ldr	r0, [pc, #16]	@ (20001f6c <mytest_1+0x28>)
20001f5c:	f7fe ff12 	bl	20000d84 <printf>

    while(1){
20001f60:	bf00      	nop
20001f62:	e7fd      	b.n	20001f60 <mytest_1+0x1c>
20001f64:	200028d0 	.word	0x200028d0
20001f68:	40013824 	.word	0x40013824
20001f6c:	200028d8 	.word	0x200028d8

20001f70 <ui_clock_measure>:
yeah
	*/
}


static int ui_clock_measure(int argc, char *argv[]){
20001f70:	b580      	push	{r7, lr}
20001f72:	b084      	sub	sp, #16
20001f74:	af00      	add	r7, sp, #0
20001f76:	6078      	str	r0, [r7, #4]
20001f78:	6039      	str	r1, [r7, #0]

	*(volatile uint32_t *)(0x40007000) = 0x200;
20001f7a:	4b35      	ldr	r3, [pc, #212]	@ (20002050 <ui_clock_measure+0xe0>)
20001f7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
20001f80:	601a      	str	r2, [r3, #0]

    RCC->AHB2ENR |= 0xf;
20001f82:	4b34      	ldr	r3, [pc, #208]	@ (20002054 <ui_clock_measure+0xe4>)
20001f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20001f86:	4a33      	ldr	r2, [pc, #204]	@ (20002054 <ui_clock_measure+0xe4>)
20001f88:	f043 030f 	orr.w	r3, r3, #15
20001f8c:	64d3      	str	r3, [r2, #76]	@ 0x4c

    RCC->APB1ENR1 |= (1 << 28);
20001f8e:	4b31      	ldr	r3, [pc, #196]	@ (20002054 <ui_clock_measure+0xe4>)
20001f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20001f92:	4a30      	ldr	r2, [pc, #192]	@ (20002054 <ui_clock_measure+0xe4>)
20001f94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20001f98:	6593      	str	r3, [r2, #88]	@ 0x58



	volatile uint32_t val;

	val = *(volatile uint32_t *)(0x48000000);
20001f9a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
20001f9e:	681b      	ldr	r3, [r3, #0]
20001fa0:	60bb      	str	r3, [r7, #8]
	val &= 0xFFFCFFFF;
20001fa2:	68bb      	ldr	r3, [r7, #8]
20001fa4:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
20001fa8:	60bb      	str	r3, [r7, #8]
	val |= 0x10000;
20001faa:	68bb      	ldr	r3, [r7, #8]
20001fac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20001fb0:	60bb      	str	r3, [r7, #8]
	*(volatile uint32_t *)(0x48000000) = val;
20001fb2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
20001fb6:	68bb      	ldr	r3, [r7, #8]
20001fb8:	6013      	str	r3, [r2, #0]
	//convert to function
	val = *(volatile uint32_t *)(0x4800000C);
20001fba:	4b27      	ldr	r3, [pc, #156]	@ (20002058 <ui_clock_measure+0xe8>)
20001fbc:	681b      	ldr	r3, [r3, #0]
20001fbe:	60bb      	str	r3, [r7, #8]
	val &= 0xFFFCFFFF;
20001fc0:	68bb      	ldr	r3, [r7, #8]
20001fc2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
20001fc6:	60bb      	str	r3, [r7, #8]

	*(volatile uint32_t *)(0x4800000C) = val;
20001fc8:	4a23      	ldr	r2, [pc, #140]	@ (20002058 <ui_clock_measure+0xe8>)
20001fca:	68bb      	ldr	r3, [r7, #8]
20001fcc:	6013      	str	r3, [r2, #0]

	val = *(volatile uint32_t *)(0x48000014);
20001fce:	4b23      	ldr	r3, [pc, #140]	@ (2000205c <ui_clock_measure+0xec>)
20001fd0:	681b      	ldr	r3, [r3, #0]
20001fd2:	60bb      	str	r3, [r7, #8]
	val &= 0xFFFCFFFF;
20001fd4:	68bb      	ldr	r3, [r7, #8]
20001fd6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
20001fda:	60bb      	str	r3, [r7, #8]
	val |= 0x100;
20001fdc:	68bb      	ldr	r3, [r7, #8]
20001fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
20001fe2:	60bb      	str	r3, [r7, #8]
	*(volatile uint32_t *)(0x48000014) = val;
20001fe4:	4a1d      	ldr	r2, [pc, #116]	@ (2000205c <ui_clock_measure+0xec>)
20001fe6:	68bb      	ldr	r3, [r7, #8]
20001fe8:	6013      	str	r3, [r2, #0]




    int state = atoi(argv[1]);
20001fea:	683b      	ldr	r3, [r7, #0]
20001fec:	3304      	adds	r3, #4
20001fee:	681b      	ldr	r3, [r3, #0]
20001ff0:	4618      	mov	r0, r3
20001ff2:	f000 f8bd 	bl	20002170 <atoi>
20001ff6:	60f8      	str	r0, [r7, #12]

    val = *(volatile uint32_t *)(0x48000014);
20001ff8:	4b18      	ldr	r3, [pc, #96]	@ (2000205c <ui_clock_measure+0xec>)
20001ffa:	681b      	ldr	r3, [r3, #0]
20001ffc:	60bb      	str	r3, [r7, #8]

    if (state == 1) {
20001ffe:	68fb      	ldr	r3, [r7, #12]
20002000:	2b01      	cmp	r3, #1
20002002:	d10c      	bne.n	2000201e <ui_clock_measure+0xae>

    	val |= 0x100;
20002004:	68bb      	ldr	r3, [r7, #8]
20002006:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
2000200a:	60bb      	str	r3, [r7, #8]
    	*(volatile uint32_t *)(0x48000014) = val;
2000200c:	4a13      	ldr	r2, [pc, #76]	@ (2000205c <ui_clock_measure+0xec>)
2000200e:	68bb      	ldr	r3, [r7, #8]
20002010:	6013      	str	r3, [r2, #0]
    	printf("0x%08X\n", val);
20002012:	68bb      	ldr	r3, [r7, #8]
20002014:	4619      	mov	r1, r3
20002016:	4812      	ldr	r0, [pc, #72]	@ (20002060 <ui_clock_measure+0xf0>)
20002018:	f7fe feb4 	bl	20000d84 <printf>
2000201c:	e012      	b.n	20002044 <ui_clock_measure+0xd4>
    } else if (state == 0) {
2000201e:	68fb      	ldr	r3, [r7, #12]
20002020:	2b00      	cmp	r3, #0
20002022:	d10c      	bne.n	2000203e <ui_clock_measure+0xce>
    	val &= ~0x100;
20002024:	68bb      	ldr	r3, [r7, #8]
20002026:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
2000202a:	60bb      	str	r3, [r7, #8]
    	*(volatile uint32_t *)(0x48000014) = val;
2000202c:	4a0b      	ldr	r2, [pc, #44]	@ (2000205c <ui_clock_measure+0xec>)
2000202e:	68bb      	ldr	r3, [r7, #8]
20002030:	6013      	str	r3, [r2, #0]
    	printf("0x%08X\n", val);
20002032:	68bb      	ldr	r3, [r7, #8]
20002034:	4619      	mov	r1, r3
20002036:	480a      	ldr	r0, [pc, #40]	@ (20002060 <ui_clock_measure+0xf0>)
20002038:	f7fe fea4 	bl	20000d84 <printf>
2000203c:	e002      	b.n	20002044 <ui_clock_measure+0xd4>

    } else{
    	printf("Invalid state");
2000203e:	4809      	ldr	r0, [pc, #36]	@ (20002064 <ui_clock_measure+0xf4>)
20002040:	f7fe fea0 	bl	20000d84 <printf>

    }

    return 0;
20002044:	2300      	movs	r3, #0
}
20002046:	4618      	mov	r0, r3
20002048:	3710      	adds	r7, #16
2000204a:	46bd      	mov	sp, r7
2000204c:	bd80      	pop	{r7, pc}
2000204e:	bf00      	nop
20002050:	40007000 	.word	0x40007000
20002054:	40021000 	.word	0x40021000
20002058:	4800000c 	.word	0x4800000c
2000205c:	48000014 	.word	0x48000014
20002060:	200028dc 	.word	0x200028dc
20002064:	200028e4 	.word	0x200028e4

20002068 <ui_CM>:


static int ui_CM(int argc, char *argv[]){
20002068:	b480      	push	{r7}
2000206a:	b085      	sub	sp, #20
2000206c:	af00      	add	r7, sp, #0
2000206e:	6078      	str	r0, [r7, #4]
20002070:	6039      	str	r1, [r7, #0]




	*(volatile uint32_t *)(0x40007000) = 0x200;
20002072:	4b23      	ldr	r3, [pc, #140]	@ (20002100 <ui_CM+0x98>)
20002074:	f44f 7200 	mov.w	r2, #512	@ 0x200
20002078:	601a      	str	r2, [r3, #0]

    RCC->AHB2ENR |= 0xf;
2000207a:	4b22      	ldr	r3, [pc, #136]	@ (20002104 <ui_CM+0x9c>)
2000207c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2000207e:	4a21      	ldr	r2, [pc, #132]	@ (20002104 <ui_CM+0x9c>)
20002080:	f043 030f 	orr.w	r3, r3, #15
20002084:	64d3      	str	r3, [r2, #76]	@ 0x4c

    RCC->APB1ENR1 |= (1 << 28);
20002086:	4b1f      	ldr	r3, [pc, #124]	@ (20002104 <ui_CM+0x9c>)
20002088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2000208a:	4a1e      	ldr	r2, [pc, #120]	@ (20002104 <ui_CM+0x9c>)
2000208c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20002090:	6593      	str	r3, [r2, #88]	@ 0x58



	volatile uint32_t val;

	val = *(volatile uint32_t *)(0x48000000);
20002092:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
20002096:	681b      	ldr	r3, [r3, #0]
20002098:	60fb      	str	r3, [r7, #12]
	val &= 0xFFFCFFFF;
2000209a:	68fb      	ldr	r3, [r7, #12]
2000209c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
200020a0:	60fb      	str	r3, [r7, #12]
	val |= 0x20000;
200020a2:	68fb      	ldr	r3, [r7, #12]
200020a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
200020a8:	60fb      	str	r3, [r7, #12]
	*(volatile uint32_t *)(0x48000000) = val;
200020aa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
200020ae:	68fb      	ldr	r3, [r7, #12]
200020b0:	6013      	str	r3, [r2, #0]

	//convert to function

	val = *(volatile uint32_t *)(0x4800000C);
200020b2:	4b15      	ldr	r3, [pc, #84]	@ (20002108 <ui_CM+0xa0>)
200020b4:	681b      	ldr	r3, [r3, #0]
200020b6:	60fb      	str	r3, [r7, #12]
	val &= 0xFFFCFFFF;
200020b8:	68fb      	ldr	r3, [r7, #12]
200020ba:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
200020be:	60fb      	str	r3, [r7, #12]
	*(volatile uint32_t *)(0x4800000C) = val;
200020c0:	4a11      	ldr	r2, [pc, #68]	@ (20002108 <ui_CM+0xa0>)
200020c2:	68fb      	ldr	r3, [r7, #12]
200020c4:	6013      	str	r3, [r2, #0]


	val = *(volatile uint32_t *)(0x48000024);
200020c6:	4b11      	ldr	r3, [pc, #68]	@ (2000210c <ui_CM+0xa4>)
200020c8:	681b      	ldr	r3, [r3, #0]
200020ca:	60fb      	str	r3, [r7, #12]
	val &= 0xFFFFFFF0;
200020cc:	68fb      	ldr	r3, [r7, #12]
200020ce:	f023 030f 	bic.w	r3, r3, #15
200020d2:	60fb      	str	r3, [r7, #12]
	*(volatile uint32_t *)(0x48000024) = val;
200020d4:	4a0d      	ldr	r2, [pc, #52]	@ (2000210c <ui_CM+0xa4>)
200020d6:	68fb      	ldr	r3, [r7, #12]
200020d8:	6013      	str	r3, [r2, #0]

	RCC ->CFGR |= (2<< 24);
200020da:	4b0a      	ldr	r3, [pc, #40]	@ (20002104 <ui_CM+0x9c>)
200020dc:	689b      	ldr	r3, [r3, #8]
200020de:	4a09      	ldr	r2, [pc, #36]	@ (20002104 <ui_CM+0x9c>)
200020e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
200020e4:	6093      	str	r3, [r2, #8]
	RCC ->CFGR |= (4<< 28);
200020e6:	4b07      	ldr	r3, [pc, #28]	@ (20002104 <ui_CM+0x9c>)
200020e8:	689b      	ldr	r3, [r3, #8]
200020ea:	4a06      	ldr	r2, [pc, #24]	@ (20002104 <ui_CM+0x9c>)
200020ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
200020f0:	6093      	str	r3, [r2, #8]





    return 0;
200020f2:	2300      	movs	r3, #0
}
200020f4:	4618      	mov	r0, r3
200020f6:	3714      	adds	r7, #20
200020f8:	46bd      	mov	sp, r7
200020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
200020fe:	4770      	bx	lr
20002100:	40007000 	.word	0x40007000
20002104:	40021000 	.word	0x40021000
20002108:	4800000c 	.word	0x4800000c
2000210c:	48000024 	.word	0x48000024

20002110 <SysTick_Init>:


static int SysTick_Init(int argc, char *argv[]){
20002110:	b580      	push	{r7, lr}
20002112:	b086      	sub	sp, #24
20002114:	af00      	add	r7, sp, #0
20002116:	6078      	str	r0, [r7, #4]
20002118:	6039      	str	r1, [r7, #0]

	 *(volatile uint32_t *)0xE000ED08 = 0x20000000; // vtor
2000211a:	4b0e      	ldr	r3, [pc, #56]	@ (20002154 <SysTick_Init+0x44>)
2000211c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
20002120:	601a      	str	r2, [r3, #0]

    *(volatile uint32_t *)0xE000E010 = 0x7; // 00000111
20002122:	4b0d      	ldr	r3, [pc, #52]	@ (20002158 <SysTick_Init+0x48>)
20002124:	2207      	movs	r2, #7
20002126:	601a      	str	r2, [r3, #0]

    *(volatile uint32_t *)0xE000E014 = 1000000;
20002128:	4b0c      	ldr	r3, [pc, #48]	@ (2000215c <SysTick_Init+0x4c>)
2000212a:	4a0d      	ldr	r2, [pc, #52]	@ (20002160 <SysTick_Init+0x50>)
2000212c:	601a      	str	r2, [r3, #0]

    *(volatile uint32_t *)0xE000E018 = 0;
2000212e:	4b0d      	ldr	r3, [pc, #52]	@ (20002164 <SysTick_Init+0x54>)
20002130:	2200      	movs	r2, #0
20002132:	601a      	str	r2, [r3, #0]

    *(volatile uint32_t *)0xE000ED20 = 0;
20002134:	4b0c      	ldr	r3, [pc, #48]	@ (20002168 <SysTick_Init+0x58>)
20002136:	2200      	movs	r2, #0
20002138:	601a      	str	r2, [r3, #0]
    uint32_t value;




    uint32_t address = 0xE000E018;
2000213a:	4b0a      	ldr	r3, [pc, #40]	@ (20002164 <SysTick_Init+0x54>)
2000213c:	617b      	str	r3, [r7, #20]


	while (1) {
	    ptr = (volatile uint32_t *)address;
2000213e:	697b      	ldr	r3, [r7, #20]
20002140:	613b      	str	r3, [r7, #16]
	    value = *ptr;
20002142:	693b      	ldr	r3, [r7, #16]
20002144:	681b      	ldr	r3, [r3, #0]
20002146:	60fb      	str	r3, [r7, #12]
		printf("0x%08X\n", value);
20002148:	68f9      	ldr	r1, [r7, #12]
2000214a:	4808      	ldr	r0, [pc, #32]	@ (2000216c <SysTick_Init+0x5c>)
2000214c:	f7fe fe1a 	bl	20000d84 <printf>
	    ptr = (volatile uint32_t *)address;
20002150:	bf00      	nop
20002152:	e7f4      	b.n	2000213e <SysTick_Init+0x2e>
20002154:	e000ed08 	.word	0xe000ed08
20002158:	e000e010 	.word	0xe000e010
2000215c:	e000e014 	.word	0xe000e014
20002160:	000f4240 	.word	0x000f4240
20002164:	e000e018 	.word	0xe000e018
20002168:	e000ed20 	.word	0xe000ed20
2000216c:	200028dc 	.word	0x200028dc

20002170 <atoi>:
20002170:	220a      	movs	r2, #10
20002172:	2100      	movs	r1, #0
20002174:	f000 b87a 	b.w	2000226c <strtol>

20002178 <_strtol_l.constprop.0>:
20002178:	2b24      	cmp	r3, #36	@ 0x24
2000217a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000217e:	4686      	mov	lr, r0
20002180:	4690      	mov	r8, r2
20002182:	d801      	bhi.n	20002188 <_strtol_l.constprop.0+0x10>
20002184:	2b01      	cmp	r3, #1
20002186:	d106      	bne.n	20002196 <_strtol_l.constprop.0+0x1e>
20002188:	f000 f8f2 	bl	20002370 <__errno>
2000218c:	2316      	movs	r3, #22
2000218e:	6003      	str	r3, [r0, #0]
20002190:	2000      	movs	r0, #0
20002192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20002196:	4834      	ldr	r0, [pc, #208]	@ (20002268 <_strtol_l.constprop.0+0xf0>)
20002198:	460d      	mov	r5, r1
2000219a:	462a      	mov	r2, r5
2000219c:	f815 4b01 	ldrb.w	r4, [r5], #1
200021a0:	5d06      	ldrb	r6, [r0, r4]
200021a2:	f016 0608 	ands.w	r6, r6, #8
200021a6:	d1f8      	bne.n	2000219a <_strtol_l.constprop.0+0x22>
200021a8:	2c2d      	cmp	r4, #45	@ 0x2d
200021aa:	d12d      	bne.n	20002208 <_strtol_l.constprop.0+0x90>
200021ac:	782c      	ldrb	r4, [r5, #0]
200021ae:	2601      	movs	r6, #1
200021b0:	1c95      	adds	r5, r2, #2
200021b2:	f033 0210 	bics.w	r2, r3, #16
200021b6:	d109      	bne.n	200021cc <_strtol_l.constprop.0+0x54>
200021b8:	2c30      	cmp	r4, #48	@ 0x30
200021ba:	d12a      	bne.n	20002212 <_strtol_l.constprop.0+0x9a>
200021bc:	782a      	ldrb	r2, [r5, #0]
200021be:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
200021c2:	2a58      	cmp	r2, #88	@ 0x58
200021c4:	d125      	bne.n	20002212 <_strtol_l.constprop.0+0x9a>
200021c6:	786c      	ldrb	r4, [r5, #1]
200021c8:	2310      	movs	r3, #16
200021ca:	3502      	adds	r5, #2
200021cc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
200021d0:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
200021d4:	2200      	movs	r2, #0
200021d6:	fbbc f9f3 	udiv	r9, ip, r3
200021da:	4610      	mov	r0, r2
200021dc:	fb03 ca19 	mls	sl, r3, r9, ip
200021e0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
200021e4:	2f09      	cmp	r7, #9
200021e6:	d81b      	bhi.n	20002220 <_strtol_l.constprop.0+0xa8>
200021e8:	463c      	mov	r4, r7
200021ea:	42a3      	cmp	r3, r4
200021ec:	dd27      	ble.n	2000223e <_strtol_l.constprop.0+0xc6>
200021ee:	1c57      	adds	r7, r2, #1
200021f0:	d007      	beq.n	20002202 <_strtol_l.constprop.0+0x8a>
200021f2:	4581      	cmp	r9, r0
200021f4:	d320      	bcc.n	20002238 <_strtol_l.constprop.0+0xc0>
200021f6:	d101      	bne.n	200021fc <_strtol_l.constprop.0+0x84>
200021f8:	45a2      	cmp	sl, r4
200021fa:	db1d      	blt.n	20002238 <_strtol_l.constprop.0+0xc0>
200021fc:	fb00 4003 	mla	r0, r0, r3, r4
20002200:	2201      	movs	r2, #1
20002202:	f815 4b01 	ldrb.w	r4, [r5], #1
20002206:	e7eb      	b.n	200021e0 <_strtol_l.constprop.0+0x68>
20002208:	2c2b      	cmp	r4, #43	@ 0x2b
2000220a:	bf04      	itt	eq
2000220c:	782c      	ldrbeq	r4, [r5, #0]
2000220e:	1c95      	addeq	r5, r2, #2
20002210:	e7cf      	b.n	200021b2 <_strtol_l.constprop.0+0x3a>
20002212:	2b00      	cmp	r3, #0
20002214:	d1da      	bne.n	200021cc <_strtol_l.constprop.0+0x54>
20002216:	2c30      	cmp	r4, #48	@ 0x30
20002218:	bf0c      	ite	eq
2000221a:	2308      	moveq	r3, #8
2000221c:	230a      	movne	r3, #10
2000221e:	e7d5      	b.n	200021cc <_strtol_l.constprop.0+0x54>
20002220:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
20002224:	2f19      	cmp	r7, #25
20002226:	d801      	bhi.n	2000222c <_strtol_l.constprop.0+0xb4>
20002228:	3c37      	subs	r4, #55	@ 0x37
2000222a:	e7de      	b.n	200021ea <_strtol_l.constprop.0+0x72>
2000222c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
20002230:	2f19      	cmp	r7, #25
20002232:	d804      	bhi.n	2000223e <_strtol_l.constprop.0+0xc6>
20002234:	3c57      	subs	r4, #87	@ 0x57
20002236:	e7d8      	b.n	200021ea <_strtol_l.constprop.0+0x72>
20002238:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
2000223c:	e7e1      	b.n	20002202 <_strtol_l.constprop.0+0x8a>
2000223e:	1c53      	adds	r3, r2, #1
20002240:	d108      	bne.n	20002254 <_strtol_l.constprop.0+0xdc>
20002242:	2322      	movs	r3, #34	@ 0x22
20002244:	f8ce 3000 	str.w	r3, [lr]
20002248:	4660      	mov	r0, ip
2000224a:	f1b8 0f00 	cmp.w	r8, #0
2000224e:	d0a0      	beq.n	20002192 <_strtol_l.constprop.0+0x1a>
20002250:	1e69      	subs	r1, r5, #1
20002252:	e006      	b.n	20002262 <_strtol_l.constprop.0+0xea>
20002254:	b106      	cbz	r6, 20002258 <_strtol_l.constprop.0+0xe0>
20002256:	4240      	negs	r0, r0
20002258:	f1b8 0f00 	cmp.w	r8, #0
2000225c:	d099      	beq.n	20002192 <_strtol_l.constprop.0+0x1a>
2000225e:	2a00      	cmp	r2, #0
20002260:	d1f6      	bne.n	20002250 <_strtol_l.constprop.0+0xd8>
20002262:	f8c8 1000 	str.w	r1, [r8]
20002266:	e794      	b.n	20002192 <_strtol_l.constprop.0+0x1a>
20002268:	2000291a 	.word	0x2000291a

2000226c <strtol>:
2000226c:	4613      	mov	r3, r2
2000226e:	460a      	mov	r2, r1
20002270:	4601      	mov	r1, r0
20002272:	4802      	ldr	r0, [pc, #8]	@ (2000227c <strtol+0x10>)
20002274:	6800      	ldr	r0, [r0, #0]
20002276:	f7ff bf7f 	b.w	20002178 <_strtol_l.constprop.0>
2000227a:	bf00      	nop
2000227c:	20002a2c 	.word	0x20002a2c

20002280 <_strtoul_l.constprop.0>:
20002280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
20002284:	4e34      	ldr	r6, [pc, #208]	@ (20002358 <_strtoul_l.constprop.0+0xd8>)
20002286:	4686      	mov	lr, r0
20002288:	460d      	mov	r5, r1
2000228a:	4628      	mov	r0, r5
2000228c:	f815 4b01 	ldrb.w	r4, [r5], #1
20002290:	5d37      	ldrb	r7, [r6, r4]
20002292:	f017 0708 	ands.w	r7, r7, #8
20002296:	d1f8      	bne.n	2000228a <_strtoul_l.constprop.0+0xa>
20002298:	2c2d      	cmp	r4, #45	@ 0x2d
2000229a:	d12f      	bne.n	200022fc <_strtoul_l.constprop.0+0x7c>
2000229c:	782c      	ldrb	r4, [r5, #0]
2000229e:	2701      	movs	r7, #1
200022a0:	1c85      	adds	r5, r0, #2
200022a2:	f033 0010 	bics.w	r0, r3, #16
200022a6:	d109      	bne.n	200022bc <_strtoul_l.constprop.0+0x3c>
200022a8:	2c30      	cmp	r4, #48	@ 0x30
200022aa:	d12c      	bne.n	20002306 <_strtoul_l.constprop.0+0x86>
200022ac:	7828      	ldrb	r0, [r5, #0]
200022ae:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
200022b2:	2858      	cmp	r0, #88	@ 0x58
200022b4:	d127      	bne.n	20002306 <_strtoul_l.constprop.0+0x86>
200022b6:	786c      	ldrb	r4, [r5, #1]
200022b8:	2310      	movs	r3, #16
200022ba:	3502      	adds	r5, #2
200022bc:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
200022c0:	2600      	movs	r6, #0
200022c2:	fbb8 f8f3 	udiv	r8, r8, r3
200022c6:	fb03 f908 	mul.w	r9, r3, r8
200022ca:	ea6f 0909 	mvn.w	r9, r9
200022ce:	4630      	mov	r0, r6
200022d0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
200022d4:	f1bc 0f09 	cmp.w	ip, #9
200022d8:	d81c      	bhi.n	20002314 <_strtoul_l.constprop.0+0x94>
200022da:	4664      	mov	r4, ip
200022dc:	42a3      	cmp	r3, r4
200022de:	dd2a      	ble.n	20002336 <_strtoul_l.constprop.0+0xb6>
200022e0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
200022e4:	d007      	beq.n	200022f6 <_strtoul_l.constprop.0+0x76>
200022e6:	4580      	cmp	r8, r0
200022e8:	d322      	bcc.n	20002330 <_strtoul_l.constprop.0+0xb0>
200022ea:	d101      	bne.n	200022f0 <_strtoul_l.constprop.0+0x70>
200022ec:	45a1      	cmp	r9, r4
200022ee:	db1f      	blt.n	20002330 <_strtoul_l.constprop.0+0xb0>
200022f0:	fb00 4003 	mla	r0, r0, r3, r4
200022f4:	2601      	movs	r6, #1
200022f6:	f815 4b01 	ldrb.w	r4, [r5], #1
200022fa:	e7e9      	b.n	200022d0 <_strtoul_l.constprop.0+0x50>
200022fc:	2c2b      	cmp	r4, #43	@ 0x2b
200022fe:	bf04      	itt	eq
20002300:	782c      	ldrbeq	r4, [r5, #0]
20002302:	1c85      	addeq	r5, r0, #2
20002304:	e7cd      	b.n	200022a2 <_strtoul_l.constprop.0+0x22>
20002306:	2b00      	cmp	r3, #0
20002308:	d1d8      	bne.n	200022bc <_strtoul_l.constprop.0+0x3c>
2000230a:	2c30      	cmp	r4, #48	@ 0x30
2000230c:	bf0c      	ite	eq
2000230e:	2308      	moveq	r3, #8
20002310:	230a      	movne	r3, #10
20002312:	e7d3      	b.n	200022bc <_strtoul_l.constprop.0+0x3c>
20002314:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
20002318:	f1bc 0f19 	cmp.w	ip, #25
2000231c:	d801      	bhi.n	20002322 <_strtoul_l.constprop.0+0xa2>
2000231e:	3c37      	subs	r4, #55	@ 0x37
20002320:	e7dc      	b.n	200022dc <_strtoul_l.constprop.0+0x5c>
20002322:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
20002326:	f1bc 0f19 	cmp.w	ip, #25
2000232a:	d804      	bhi.n	20002336 <_strtoul_l.constprop.0+0xb6>
2000232c:	3c57      	subs	r4, #87	@ 0x57
2000232e:	e7d5      	b.n	200022dc <_strtoul_l.constprop.0+0x5c>
20002330:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
20002334:	e7df      	b.n	200022f6 <_strtoul_l.constprop.0+0x76>
20002336:	1c73      	adds	r3, r6, #1
20002338:	d106      	bne.n	20002348 <_strtoul_l.constprop.0+0xc8>
2000233a:	2322      	movs	r3, #34	@ 0x22
2000233c:	f8ce 3000 	str.w	r3, [lr]
20002340:	4630      	mov	r0, r6
20002342:	b932      	cbnz	r2, 20002352 <_strtoul_l.constprop.0+0xd2>
20002344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
20002348:	b107      	cbz	r7, 2000234c <_strtoul_l.constprop.0+0xcc>
2000234a:	4240      	negs	r0, r0
2000234c:	2a00      	cmp	r2, #0
2000234e:	d0f9      	beq.n	20002344 <_strtoul_l.constprop.0+0xc4>
20002350:	b106      	cbz	r6, 20002354 <_strtoul_l.constprop.0+0xd4>
20002352:	1e69      	subs	r1, r5, #1
20002354:	6011      	str	r1, [r2, #0]
20002356:	e7f5      	b.n	20002344 <_strtoul_l.constprop.0+0xc4>
20002358:	2000291a 	.word	0x2000291a

2000235c <strtoul>:
2000235c:	4613      	mov	r3, r2
2000235e:	460a      	mov	r2, r1
20002360:	4601      	mov	r1, r0
20002362:	4802      	ldr	r0, [pc, #8]	@ (2000236c <strtoul+0x10>)
20002364:	6800      	ldr	r0, [r0, #0]
20002366:	f7ff bf8b 	b.w	20002280 <_strtoul_l.constprop.0>
2000236a:	bf00      	nop
2000236c:	20002a2c 	.word	0x20002a2c

20002370 <__errno>:
20002370:	4b01      	ldr	r3, [pc, #4]	@ (20002378 <__errno+0x8>)
20002372:	6818      	ldr	r0, [r3, #0]
20002374:	4770      	bx	lr
20002376:	bf00      	nop
20002378:	20002a2c 	.word	0x20002a2c

2000237c <_init>:
2000237c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000237e:	bf00      	nop
20002380:	bcf8      	pop	{r3, r4, r5, r6, r7}
20002382:	bc08      	pop	{r3}
20002384:	469e      	mov	lr, r3
20002386:	4770      	bx	lr

20002388 <_fini>:
20002388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000238a:	bf00      	nop
2000238c:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000238e:	bc08      	pop	{r3}
20002390:	469e      	mov	lr, r3
20002392:	4770      	bx	lr
